
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010954  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08010ae8  08010ae8  00020ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c98  08010c98  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08010c98  08010c98  00020c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ca0  08010ca0  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ca0  08010ca0  00020ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ca4  08010ca4  00020ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08010ca8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030110  2**0
                  CONTENTS
 10 .bss          00002dc0  20000110  20000110  00030110  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002ed0  20002ed0  00030110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 14 .debug_info   000254c4  00000000  00000000  00030183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005aeb  00000000  00000000  00055647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c18  00000000  00000000  0005b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015a5  00000000  00000000  0005cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022cb2  00000000  00000000  0005e2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026f44  00000000  00000000  00080fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c45ee  00000000  00000000  000a7eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007b2c  00000000  00000000  0016c4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00174008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010acc 	.word	0x08010acc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	08010acc 	.word	0x08010acc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_ldivmod>:
 8000b6c:	b97b      	cbnz	r3, 8000b8e <__aeabi_ldivmod+0x22>
 8000b6e:	b972      	cbnz	r2, 8000b8e <__aeabi_ldivmod+0x22>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bfbe      	ittt	lt
 8000b74:	2000      	movlt	r0, #0
 8000b76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b7a:	e006      	blt.n	8000b8a <__aeabi_ldivmod+0x1e>
 8000b7c:	bf08      	it	eq
 8000b7e:	2800      	cmpeq	r0, #0
 8000b80:	bf1c      	itt	ne
 8000b82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b86:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8a:	f000 b9f1 	b.w	8000f70 <__aeabi_idiv0>
 8000b8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b96:	2900      	cmp	r1, #0
 8000b98:	db09      	blt.n	8000bae <__aeabi_ldivmod+0x42>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db1a      	blt.n	8000bd4 <__aeabi_ldivmod+0x68>
 8000b9e:	f000 f883 	bl	8000ca8 <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db1b      	blt.n	8000bf0 <__aeabi_ldivmod+0x84>
 8000bb8:	f000 f876 	bl	8000ca8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f865 	bl	8000ca8 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4240      	negs	r0, r0
 8000bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f857 	bl	8000ca8 <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9a6 	b.w	8000f70 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff fef1 	bl	8000a2c <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fc67 	bl	8000548 <__aeabi_dmul>
 8000c7a:	f000 f97b 	bl	8000f74 <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fbe8 	bl	8000454 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fc5e 	bl	8000548 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faa0 	bl	80001d8 <__aeabi_dsub>
 8000c98:	f000 f96c 	bl	8000f74 <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__aeabi_d2uiz>:
 8000f74:	004a      	lsls	r2, r1, #1
 8000f76:	d211      	bcs.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f7c:	d211      	bcs.n	8000fa2 <__aeabi_d2uiz+0x2e>
 8000f7e:	d50d      	bpl.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f88:	d40e      	bmi.n	8000fa8 <__aeabi_d2uiz+0x34>
 8000f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fa6:	d102      	bne.n	8000fae <__aeabi_d2uiz+0x3a>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fe8 <fromTickToMs+0x34>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fe8 <fromTickToMs+0x34>
 8000fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	447a0000 	.word	0x447a0000

08000fec <cmp>:
uint32_t MS5837_conv_start_tick = CONVERTION_TIMEOUT;

void calculate();
void init_new_convertion();

int cmp(const void *a, const void *b) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    return *(int*)a - *(int*)b;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <MS5837_02BA_init>:

bool MS5837_02BA_begin(I2C_HandleTypeDef * hi2c){
	return(MS5837_02BA_init(hi2c));
}

bool MS5837_02BA_init(I2C_HandleTypeDef * hi2c){
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
	MS5837_hi2c = hi2c;
 8001014:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <MS5837_02BA_init+0x9c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
	HAL_I2C_Init(hi2c);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f005 ff2c 	bl	8006e78 <HAL_I2C_Init>
	if(HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &RES_DEVICE_COMM, COMMAND_LENGTH, 100) != HAL_OK){
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MS5837_02BA_init+0x9c>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	4a20      	ldr	r2, [pc, #128]	; (80010ac <MS5837_02BA_init+0xa0>)
 800102c:	21ec      	movs	r1, #236	; 0xec
 800102e:	f005 ffe1 	bl	8006ff4 <HAL_I2C_Master_Transmit>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MS5837_02BA_init+0x30>
		return false;
 8001038:	2300      	movs	r3, #0
 800103a:	e030      	b.n	800109e <MS5837_02BA_init+0x92>
	}
	//receiving C1 - C6
	uint8_t prom_addr = 0xA0;
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e027      	b.n	8001096 <MS5837_02BA_init+0x8a>
		uint8_t prom_buff[2];
		prom_addr += 2;
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	3302      	adds	r3, #2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &prom_addr, COMMAND_LENGTH, 100);
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MS5837_02BA_init+0x9c>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 020e 	add.w	r2, r7, #14
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	21ec      	movs	r1, #236	; 0xec
 800105e:	f005 ffc9 	bl	8006ff4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, prom_buff, PROM_LENGTH, 100);
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MS5837_02BA_init+0x9c>)
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	2364      	movs	r3, #100	; 0x64
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2302      	movs	r3, #2
 8001070:	21ec      	movs	r1, #236	; 0xec
 8001072:	f006 f8b3 	bl	80071dc <HAL_I2C_Master_Receive>
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 8001076:	7b3b      	ldrb	r3, [r7, #12]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	7b7a      	ldrb	r2, [r7, #13]
 800107c:	4313      	orrs	r3, r2
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	17d9      	asrs	r1, r3, #31
 8001082:	461c      	mov	r4, r3
 8001084:	460d      	mov	r5, r1
 8001086:	490a      	ldr	r1, [pc, #40]	; (80010b0 <MS5837_02BA_init+0xa4>)
 8001088:	00d3      	lsls	r3, r2, #3
 800108a:	440b      	add	r3, r1
 800108c:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint8_t i = 0; i < 7; i++) {
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	3301      	adds	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2b06      	cmp	r3, #6
 800109a:	d9d4      	bls.n	8001046 <MS5837_02BA_init+0x3a>
	}
	return true;
 800109c:	2301      	movs	r3, #1
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bdb0      	pop	{r4, r5, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000012c 	.word	0x2000012c
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000138 	.word	0x20000138

080010b4 <MS5837_02BA_reinit>:

bool MS5837_02BA_reinit(){
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af02      	add	r7, sp, #8
	HAL_I2C_DeInit(MS5837_hi2c);
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <MS5837_02BA_reinit+0xa4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 ff69 	bl	8006f96 <HAL_I2C_DeInit>
	HAL_I2C_Init(MS5837_hi2c);
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MS5837_02BA_reinit+0xa4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fed5 	bl	8006e78 <HAL_I2C_Init>
	MS5837_I2C_State = MS5837_I2C_NONE;
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <MS5837_02BA_reinit+0xa8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &RES_DEVICE_COMM, COMMAND_LENGTH, 100) != HAL_OK){
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <MS5837_02BA_reinit+0xa4>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	4a20      	ldr	r2, [pc, #128]	; (8001160 <MS5837_02BA_reinit+0xac>)
 80010e0:	21ec      	movs	r1, #236	; 0xec
 80010e2:	f005 ff87 	bl	8006ff4 <HAL_I2C_Master_Transmit>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MS5837_02BA_reinit+0x3c>
		return false;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e02e      	b.n	800114e <MS5837_02BA_reinit+0x9a>
	}
	//receiving C1 - C6
	uint8_t prom_addr = 0xA0;
 80010f0:	23a0      	movs	r3, #160	; 0xa0
 80010f2:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 7; i++) {
 80010f4:	2300      	movs	r3, #0
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	e025      	b.n	8001146 <MS5837_02BA_reinit+0x92>
		uint8_t prom_buff[2];
		prom_addr += 2;
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	3302      	adds	r3, #2
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &prom_addr, COMMAND_LENGTH, 100);
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MS5837_02BA_reinit+0xa4>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	1dba      	adds	r2, r7, #6
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	21ec      	movs	r1, #236	; 0xec
 8001110:	f005 ff70 	bl	8006ff4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, prom_buff, PROM_LENGTH, 100);
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MS5837_02BA_reinit+0xa4>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	1d3a      	adds	r2, r7, #4
 800111a:	2364      	movs	r3, #100	; 0x64
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2302      	movs	r3, #2
 8001120:	21ec      	movs	r1, #236	; 0xec
 8001122:	f006 f85b 	bl	80071dc <HAL_I2C_Master_Receive>
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 8001126:	793b      	ldrb	r3, [r7, #4]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	797a      	ldrb	r2, [r7, #5]
 800112c:	4313      	orrs	r3, r2
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	17d9      	asrs	r1, r3, #31
 8001132:	461c      	mov	r4, r3
 8001134:	460d      	mov	r5, r1
 8001136:	490b      	ldr	r1, [pc, #44]	; (8001164 <MS5837_02BA_reinit+0xb0>)
 8001138:	00d3      	lsls	r3, r2, #3
 800113a:	440b      	add	r3, r1
 800113c:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint8_t i = 0; i < 7; i++) {
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3301      	adds	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b06      	cmp	r3, #6
 800114a:	d9d6      	bls.n	80010fa <MS5837_02BA_reinit+0x46>
	}
	return true;
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bdb0      	pop	{r4, r5, r7, pc}
 8001156:	bf00      	nop
 8001158:	2000012c 	.word	0x2000012c
 800115c:	2000018b 	.word	0x2000018b
 8001160:	20000000 	.word	0x20000000
 8001164:	20000138 	.word	0x20000138

08001168 <MS5837_02BA_get_actual_pressure>:

int32_t MS5837_02BA_get_actual_pressure(){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	uint32_t current_tick = HAL_GetTick();
 800116e:	f004 fea7 	bl	8005ec0 <HAL_GetTick>
 8001172:	6078      	str	r0, [r7, #4]
	if(MS5837_I2C_NONE == MS5837_I2C_State){
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MS5837_02BA_get_actual_pressure+0x7c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <MS5837_02BA_get_actual_pressure+0x18>
		init_new_convertion();
 800117c:	f000 f83e 	bl	80011fc <init_new_convertion>
	}
	if(MS5837_I2C_D1_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MS5837_02BA_get_actual_pressure+0x7c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d10f      	bne.n	80011a8 <MS5837_02BA_get_actual_pressure+0x40>
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MS5837_02BA_get_actual_pressure+0x80>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b13      	cmp	r3, #19
 8001192:	d909      	bls.n	80011a8 <MS5837_02BA_get_actual_pressure+0x40>
		MS5837_I2C_State = MS5837_I2C_D1_TX_ADC_COM;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MS5837_02BA_get_actual_pressure+0x7c>)
 8001196:	2203      	movs	r2, #3
 8001198:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MS5837_02BA_get_actual_pressure+0x84>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <MS5837_02BA_get_actual_pressure+0x88>)
 80011a2:	21ec      	movs	r1, #236	; 0xec
 80011a4:	f006 f910 	bl	80073c8 <HAL_I2C_Master_Transmit_IT>
	}
	if(MS5837_I2C_D2_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MS5837_02BA_get_actual_pressure+0x7c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b06      	cmp	r3, #6
 80011ae:	d10f      	bne.n	80011d0 <MS5837_02BA_get_actual_pressure+0x68>
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MS5837_02BA_get_actual_pressure+0x80>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b13      	cmp	r3, #19
 80011ba:	d909      	bls.n	80011d0 <MS5837_02BA_get_actual_pressure+0x68>
		MS5837_I2C_State = MS5837_I2C_D2_TX_ADC_COM;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MS5837_02BA_get_actual_pressure+0x7c>)
 80011be:	2207      	movs	r2, #7
 80011c0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MS5837_02BA_get_actual_pressure+0x84>)
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <MS5837_02BA_get_actual_pressure+0x88>)
 80011ca:	21ec      	movs	r1, #236	; 0xec
 80011cc:	f006 f8fc 	bl	80073c8 <HAL_I2C_Master_Transmit_IT>
	}
//	HAL_I2C_StateTypeDef i2c_state = HAL_I2C_GetState(MS5837_hi2c);
	return presure-initial_pressure;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MS5837_02BA_get_actual_pressure+0x8c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MS5837_02BA_get_actual_pressure+0x90>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	1ad3      	subs	r3, r2, r3
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000018b 	.word	0x2000018b
 80011e8:	20000004 	.word	0x20000004
 80011ec:	2000012c 	.word	0x2000012c
 80011f0:	20000130 	.word	0x20000130
 80011f4:	20000180 	.word	0x20000180
 80011f8:	20000184 	.word	0x20000184

080011fc <init_new_convertion>:

void init_new_convertion(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	MS5837_I2C_State = MS5837_I2C_D1_TX_CONV_COM;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <init_new_convertion+0x1c>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH);
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <init_new_convertion+0x20>)
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <init_new_convertion+0x24>)
 800120e:	21ec      	movs	r1, #236	; 0xec
 8001210:	f006 f8da 	bl	80073c8 <HAL_I2C_Master_Transmit_IT>
//	MS5837_conv_start_tick = HAL_GetTick();
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000018b 	.word	0x2000018b
 800121c:	2000012c 	.word	0x2000012c
 8001220:	20000001 	.word	0x20000001

08001224 <MS5837_I2C_MasterRxCplt>:

void MS5837_I2C_MasterRxCplt (I2C_HandleTypeDef * hi2c){
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800122c:	491f      	ldr	r1, [pc, #124]	; (80012ac <MS5837_I2C_MasterRxCplt+0x88>)
 800122e:	6809      	ldr	r1, [r1, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4288      	cmp	r0, r1
 8001234:	d135      	bne.n	80012a2 <MS5837_I2C_MasterRxCplt+0x7e>
		if(MS5837_I2C_D1_RX_ADC == MS5837_I2C_State){
 8001236:	491e      	ldr	r1, [pc, #120]	; (80012b0 <MS5837_I2C_MasterRxCplt+0x8c>)
 8001238:	7809      	ldrb	r1, [r1, #0]
 800123a:	2904      	cmp	r1, #4
 800123c:	d119      	bne.n	8001272 <MS5837_I2C_MasterRxCplt+0x4e>
			D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800123e:	491d      	ldr	r1, [pc, #116]	; (80012b4 <MS5837_I2C_MasterRxCplt+0x90>)
 8001240:	7809      	ldrb	r1, [r1, #0]
 8001242:	0408      	lsls	r0, r1, #16
 8001244:	491b      	ldr	r1, [pc, #108]	; (80012b4 <MS5837_I2C_MasterRxCplt+0x90>)
 8001246:	7849      	ldrb	r1, [r1, #1]
 8001248:	0209      	lsls	r1, r1, #8
 800124a:	4301      	orrs	r1, r0
 800124c:	4819      	ldr	r0, [pc, #100]	; (80012b4 <MS5837_I2C_MasterRxCplt+0x90>)
 800124e:	7880      	ldrb	r0, [r0, #2]
 8001250:	4301      	orrs	r1, r0
 8001252:	17c8      	asrs	r0, r1, #31
 8001254:	460a      	mov	r2, r1
 8001256:	4603      	mov	r3, r0
 8001258:	4917      	ldr	r1, [pc, #92]	; (80012b8 <MS5837_I2C_MasterRxCplt+0x94>)
 800125a:	e9c1 2300 	strd	r2, r3, [r1]
			MS5837_I2C_State = MS5837_I2C_D2_TX_CONV_COM;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MS5837_I2C_MasterRxCplt+0x8c>)
 8001260:	2205      	movs	r2, #5
 8001262:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH);
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MS5837_I2C_MasterRxCplt+0x88>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <MS5837_I2C_MasterRxCplt+0x98>)
 800126c:	21ec      	movs	r1, #236	; 0xec
 800126e:	f006 f8ab 	bl	80073c8 <HAL_I2C_Master_Transmit_IT>
		}
		if(MS5837_I2C_D2_RX_ADC == MS5837_I2C_State){
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MS5837_I2C_MasterRxCplt+0x8c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b08      	cmp	r3, #8
 8001278:	d113      	bne.n	80012a2 <MS5837_I2C_MasterRxCplt+0x7e>
			D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MS5837_I2C_MasterRxCplt+0x90>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	041a      	lsls	r2, r3, #16
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MS5837_I2C_MasterRxCplt+0x90>)
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4313      	orrs	r3, r2
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <MS5837_I2C_MasterRxCplt+0x90>)
 800128a:	7892      	ldrb	r2, [r2, #2]
 800128c:	4313      	orrs	r3, r2
 800128e:	17da      	asrs	r2, r3, #31
 8001290:	461c      	mov	r4, r3
 8001292:	4615      	mov	r5, r2
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MS5837_I2C_MasterRxCplt+0x9c>)
 8001296:	e9c3 4500 	strd	r4, r5, [r3]
			init_new_convertion();
 800129a:	f7ff ffaf 	bl	80011fc <init_new_convertion>
			calculate();
 800129e:	f000 f90b 	bl	80014b8 <calculate>
		}
//		MS5837_conv_start_tick = HAL_GetTick();
	}
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bdb0      	pop	{r4, r5, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000012c 	.word	0x2000012c
 80012b0:	2000018b 	.word	0x2000018b
 80012b4:	20000188 	.word	0x20000188
 80012b8:	20000170 	.word	0x20000170
 80012bc:	20000002 	.word	0x20000002
 80012c0:	20000178 	.word	0x20000178

080012c4 <MS5837_I2C_MasterTxCplt>:

void MS5837_I2C_MasterTxCplt (I2C_HandleTypeDef * hi2c){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MS5837_I2C_MasterTxCplt+0x84>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d133      	bne.n	800133e <MS5837_I2C_MasterTxCplt+0x7a>
		if(MS5837_I2C_D1_TX_CONV_COM == MS5837_I2C_State){
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MS5837_I2C_MasterTxCplt+0x88>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d107      	bne.n	80012ee <MS5837_I2C_MasterTxCplt+0x2a>
			MS5837_I2C_State = MS5837_I2C_D1_CONVERTION;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MS5837_I2C_MasterTxCplt+0x88>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 80012e4:	f004 fdec 	bl	8005ec0 <HAL_GetTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <MS5837_I2C_MasterTxCplt+0x8c>)
 80012ec:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D1_TX_ADC_COM == MS5837_I2C_State){
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MS5837_I2C_MasterTxCplt+0x88>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d109      	bne.n	800130a <MS5837_I2C_MasterTxCplt+0x46>
			MS5837_I2C_State = MS5837_I2C_D1_RX_ADC;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <MS5837_I2C_MasterTxCplt+0x88>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MS5837_I2C_MasterTxCplt+0x84>)
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	2303      	movs	r3, #3
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <MS5837_I2C_MasterTxCplt+0x90>)
 8001304:	21ec      	movs	r1, #236	; 0xec
 8001306:	f006 f8cf 	bl	80074a8 <HAL_I2C_Master_Receive_IT>
		}
		if(MS5837_I2C_D2_TX_CONV_COM == MS5837_I2C_State){
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MS5837_I2C_MasterTxCplt+0x88>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d107      	bne.n	8001322 <MS5837_I2C_MasterTxCplt+0x5e>
			MS5837_I2C_State = MS5837_I2C_D2_CONVERTION;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MS5837_I2C_MasterTxCplt+0x88>)
 8001314:	2206      	movs	r2, #6
 8001316:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 8001318:	f004 fdd2 	bl	8005ec0 <HAL_GetTick>
 800131c:	4603      	mov	r3, r0
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <MS5837_I2C_MasterTxCplt+0x8c>)
 8001320:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D2_TX_ADC_COM == MS5837_I2C_State){
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MS5837_I2C_MasterTxCplt+0x88>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b07      	cmp	r3, #7
 8001328:	d109      	bne.n	800133e <MS5837_I2C_MasterTxCplt+0x7a>
			MS5837_I2C_State = MS5837_I2C_D2_RX_ADC;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MS5837_I2C_MasterTxCplt+0x88>)
 800132c:	2208      	movs	r2, #8
 800132e:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <MS5837_I2C_MasterTxCplt+0x84>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2303      	movs	r3, #3
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <MS5837_I2C_MasterTxCplt+0x90>)
 8001338:	21ec      	movs	r1, #236	; 0xec
 800133a:	f006 f8b5 	bl	80074a8 <HAL_I2C_Master_Receive_IT>
		}
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000012c 	.word	0x2000012c
 800134c:	2000018b 	.word	0x2000018b
 8001350:	20000004 	.word	0x20000004
 8001354:	20000188 	.word	0x20000188

08001358 <MS5837_02BA_check_pressure>:

void MS5837_I2C_MasterError (I2C_HandleTypeDef * hi2c){
	__NOP();
}

int32_t MS5837_02BA_check_pressure(){
 8001358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af02      	add	r7, sp, #8
	//initializing D1 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <MS5837_02BA_check_pressure+0xe4>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	4a34      	ldr	r2, [pc, #208]	; (8001440 <MS5837_02BA_check_pressure+0xe8>)
 800136e:	21ec      	movs	r1, #236	; 0xec
 8001370:	f005 fe40 	bl	8006ff4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001374:	2014      	movs	r0, #20
 8001376:	f004 fdaf 	bl	8005ed8 <HAL_Delay>
	//reading D1 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <MS5837_02BA_check_pressure+0xe4>)
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	4a2f      	ldr	r2, [pc, #188]	; (8001444 <MS5837_02BA_check_pressure+0xec>)
 8001388:	21ec      	movs	r1, #236	; 0xec
 800138a:	f005 fe33 	bl	8006ff4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <MS5837_02BA_check_pressure+0xe4>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2303      	movs	r3, #3
 800139a:	4a2b      	ldr	r2, [pc, #172]	; (8001448 <MS5837_02BA_check_pressure+0xf0>)
 800139c:	21ec      	movs	r1, #236	; 0xec
 800139e:	f005 ff1d 	bl	80071dc <HAL_I2C_Master_Receive>
	D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <MS5837_02BA_check_pressure+0xf0>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	041a      	lsls	r2, r3, #16
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <MS5837_02BA_check_pressure+0xf0>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	4313      	orrs	r3, r2
 80013b0:	4a25      	ldr	r2, [pc, #148]	; (8001448 <MS5837_02BA_check_pressure+0xf0>)
 80013b2:	7892      	ldrb	r2, [r2, #2]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	17da      	asrs	r2, r3, #31
 80013b8:	4698      	mov	r8, r3
 80013ba:	4691      	mov	r9, r2
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <MS5837_02BA_check_pressure+0xf4>)
 80013be:	e9c3 8900 	strd	r8, r9, [r3]
	//initializing D2 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MS5837_02BA_check_pressure+0xe4>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	4a20      	ldr	r2, [pc, #128]	; (8001450 <MS5837_02BA_check_pressure+0xf8>)
 80013d0:	21ec      	movs	r1, #236	; 0xec
 80013d2:	f005 fe0f 	bl	8006ff4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80013d6:	2014      	movs	r0, #20
 80013d8:	f004 fd7e 	bl	8005ed8 <HAL_Delay>
	//reading D2 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MS5837_02BA_check_pressure+0xe4>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	4a16      	ldr	r2, [pc, #88]	; (8001444 <MS5837_02BA_check_pressure+0xec>)
 80013ea:	21ec      	movs	r1, #236	; 0xec
 80013ec:	f005 fe02 	bl	8006ff4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MS5837_02BA_check_pressure+0xe4>)
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2303      	movs	r3, #3
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MS5837_02BA_check_pressure+0xf0>)
 80013fe:	21ec      	movs	r1, #236	; 0xec
 8001400:	f005 feec 	bl	80071dc <HAL_I2C_Master_Receive>
	D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MS5837_02BA_check_pressure+0xf0>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MS5837_02BA_check_pressure+0xf0>)
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	4313      	orrs	r3, r2
 8001412:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <MS5837_02BA_check_pressure+0xf0>)
 8001414:	7892      	ldrb	r2, [r2, #2]
 8001416:	4313      	orrs	r3, r2
 8001418:	17da      	asrs	r2, r3, #31
 800141a:	461c      	mov	r4, r3
 800141c:	4615      	mov	r5, r2
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <MS5837_02BA_check_pressure+0xfc>)
 8001420:	e9c3 4500 	strd	r4, r5, [r3]
	calculate();
 8001424:	f000 f848 	bl	80014b8 <calculate>
	return presure-initial_pressure;
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MS5837_02BA_check_pressure+0x100>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MS5837_02BA_check_pressure+0x104>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	1ad3      	subs	r3, r2, r3
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800143a:	bf00      	nop
 800143c:	2000012c 	.word	0x2000012c
 8001440:	20000001 	.word	0x20000001
 8001444:	20000130 	.word	0x20000130
 8001448:	20000188 	.word	0x20000188
 800144c:	20000170 	.word	0x20000170
 8001450:	20000002 	.word	0x20000002
 8001454:	20000178 	.word	0x20000178
 8001458:	20000180 	.word	0x20000180
 800145c:	20000184 	.word	0x20000184

08001460 <MS5837_02BA_reset_pressure>:

uint32_t MS5837_02BA_reset_pressure(){
 8001460:	b580      	push	{r7, lr}
 8001462:	b09a      	sub	sp, #104	; 0x68
 8001464:	af00      	add	r7, sp, #0
	int32_t current_pressure[25];

	for(int i =0;i<25;i++)
 8001466:	2300      	movs	r3, #0
 8001468:	667b      	str	r3, [r7, #100]	; 0x64
 800146a:	e00b      	b.n	8001484 <MS5837_02BA_reset_pressure+0x24>
	{
		current_pressure[i]=MS5837_02BA_check_pressure();
 800146c:	f7ff ff74 	bl	8001358 <MS5837_02BA_check_pressure>
 8001470:	4602      	mov	r2, r0
 8001472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	3368      	adds	r3, #104	; 0x68
 8001478:	443b      	add	r3, r7
 800147a:	f843 2c68 	str.w	r2, [r3, #-104]
	for(int i =0;i<25;i++)
 800147e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001480:	3301      	adds	r3, #1
 8001482:	667b      	str	r3, [r7, #100]	; 0x64
 8001484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001486:	2b18      	cmp	r3, #24
 8001488:	ddf0      	ble.n	800146c <MS5837_02BA_reset_pressure+0xc>
	}
	qsort(current_pressure, 25, sizeof(int32_t), cmp );
 800148a:	4638      	mov	r0, r7
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MS5837_02BA_reset_pressure+0x4c>)
 800148e:	2204      	movs	r2, #4
 8001490:	2119      	movs	r1, #25
 8001492:	f00e fed3 	bl	801023c <qsort>
	init_new_convertion();
 8001496:	f7ff feb1 	bl	80011fc <init_new_convertion>
	return initial_pressure = current_pressure[24];
 800149a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <MS5837_02BA_reset_pressure+0x50>)
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <MS5837_02BA_reset_pressure+0x50>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3768      	adds	r7, #104	; 0x68
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	08000fed 	.word	0x08000fed
 80014b0:	20000184 	.word	0x20000184
 80014b4:	00000000 	.word	0x00000000

080014b8 <calculate>:

void calculate(){
 80014b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014bc:	b0be      	sub	sp, #248	; 0xf8
 80014be:	af00      	add	r7, sp, #0
	int64_t dT = 0;
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t TEMP = 0;
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	int64_t OFF = 0;
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	int64_t SENS = 0;
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	int64_t P = 0;
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	int64_t SENSi = 0;
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	int64_t OFFi = 0;
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	int64_t Ti = 0;
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int64_t OFF2 = 0;
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t SENS2 = 0;
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	int64_t P2 = 0;
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int64_t TEMP2 = 0;
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	//first order compensation
	dT = D2 -  C[4]*256;
 8001550:	4be1      	ldr	r3, [pc, #900]	; (80018d8 <calculate+0x420>)
 8001552:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001556:	4be1      	ldr	r3, [pc, #900]	; (80018dc <calculate+0x424>)
 8001558:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800155c:	f04f 0000 	mov.w	r0, #0
 8001560:	f04f 0100 	mov.w	r1, #0
 8001564:	0219      	lsls	r1, r3, #8
 8001566:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800156a:	0210      	lsls	r0, r2, #8
 800156c:	1a23      	subs	r3, r4, r0
 800156e:	663b      	str	r3, [r7, #96]	; 0x60
 8001570:	eb65 0301 	sbc.w	r3, r5, r1
 8001574:	667b      	str	r3, [r7, #100]	; 0x64
 8001576:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800157a:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	TEMP = 2000 + dT*C[4]/8388608;
 800157e:	4bd7      	ldr	r3, [pc, #860]	; (80018dc <calculate+0x424>)
 8001580:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001584:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001588:	fb02 f501 	mul.w	r5, r2, r1
 800158c:	fb00 f403 	mul.w	r4, r0, r3
 8001590:	442c      	add	r4, r5
 8001592:	fba0 8902 	umull	r8, r9, r0, r2
 8001596:	eb04 0309 	add.w	r3, r4, r9
 800159a:	4699      	mov	r9, r3
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 80015a8:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 80015ac:	ea4f 53d9 	mov.w	r3, r9, lsr #23
 80015b0:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 80015b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80015b6:	f143 0300 	adc.w	r3, r3, #0
 80015ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015bc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80015c0:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8

//	OFF = C[1]*65536 + (C[3]*dT)/128;
//	SENS = C[0]*32768 + (C[2]*dT)/256;
//	P = ((D1 * SENS)/(2097152) - OFF)/8192;

	OFF = (C[1])*131072+(C[3]*dT)/64;
 80015c4:	4bc5      	ldr	r3, [pc, #788]	; (80018dc <calculate+0x424>)
 80015c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015ca:	f04f 0800 	mov.w	r8, #0
 80015ce:	f04f 0900 	mov.w	r9, #0
 80015d2:	ea4f 4943 	mov.w	r9, r3, lsl #17
 80015d6:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 80015da:	ea4f 4842 	mov.w	r8, r2, lsl #17
 80015de:	4bbf      	ldr	r3, [pc, #764]	; (80018dc <calculate+0x424>)
 80015e0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80015e4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80015e8:	fb02 f501 	mul.w	r5, r2, r1
 80015ec:	fb00 f403 	mul.w	r4, r0, r3
 80015f0:	442c      	add	r4, r5
 80015f2:	fba0 ab02 	umull	sl, fp, r0, r2
 80015f6:	eb04 030b 	add.w	r3, r4, fp
 80015fa:	469b      	mov	fp, r3
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	ea4f 129a 	mov.w	r2, sl, lsr #6
 8001608:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800160c:	ea4f 139b 	mov.w	r3, fp, lsr #6
 8001610:	eb18 0102 	adds.w	r1, r8, r2
 8001614:	6539      	str	r1, [r7, #80]	; 0x50
 8001616:	eb49 0303 	adc.w	r3, r9, r3
 800161a:	657b      	str	r3, [r7, #84]	; 0x54
 800161c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001620:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0

	SENS = C[0]*65536+(C[2]*dT)/128;
 8001624:	4bad      	ldr	r3, [pc, #692]	; (80018dc <calculate+0x424>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f04f 0800 	mov.w	r8, #0
 800162e:	f04f 0900 	mov.w	r9, #0
 8001632:	ea4f 4903 	mov.w	r9, r3, lsl #16
 8001636:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 800163a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800163e:	4ba7      	ldr	r3, [pc, #668]	; (80018dc <calculate+0x424>)
 8001640:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001644:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001648:	fb02 f501 	mul.w	r5, r2, r1
 800164c:	fb00 f403 	mul.w	r4, r0, r3
 8001650:	442c      	add	r4, r5
 8001652:	fba0 2302 	umull	r2, r3, r0, r2
 8001656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800165a:	4613      	mov	r3, r2
 800165c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001664:	18e3      	adds	r3, r4, r3
 8001666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001676:	4621      	mov	r1, r4
 8001678:	09ca      	lsrs	r2, r1, #7
 800167a:	4629      	mov	r1, r5
 800167c:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001680:	4629      	mov	r1, r5
 8001682:	09cb      	lsrs	r3, r1, #7
 8001684:	eb18 0102 	adds.w	r1, r8, r2
 8001688:	64b9      	str	r1, [r7, #72]	; 0x48
 800168a:	eb49 0303 	adc.w	r3, r9, r3
 800168e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001690:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001694:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

	P = (D1*SENS/(2097152)-OFF)/(32768);
 8001698:	4b91      	ldr	r3, [pc, #580]	; (80018e0 <calculate+0x428>)
 800169a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800169e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80016a2:	fb02 f501 	mul.w	r5, r2, r1
 80016a6:	fb00 f403 	mul.w	r4, r0, r3
 80016aa:	442c      	add	r4, r5
 80016ac:	fba0 2302 	umull	r2, r3, r0, r2
 80016b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016b4:	4613      	mov	r3, r2
 80016b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016be:	18e3      	adds	r3, r4, r3
 80016c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016c4:	f04f 0000 	mov.w	r0, #0
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80016d0:	4623      	mov	r3, r4
 80016d2:	0d58      	lsrs	r0, r3, #21
 80016d4:	462b      	mov	r3, r5
 80016d6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80016da:	462b      	mov	r3, r5
 80016dc:	0d59      	lsrs	r1, r3, #21
 80016de:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80016e2:	1a84      	subs	r4, r0, r2
 80016e4:	643c      	str	r4, [r7, #64]	; 0x40
 80016e6:	eb61 0303 	sbc.w	r3, r1, r3
 80016ea:	647b      	str	r3, [r7, #68]	; 0x44
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80016f8:	4621      	mov	r1, r4
 80016fa:	0bca      	lsrs	r2, r1, #15
 80016fc:	4629      	mov	r1, r5
 80016fe:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001702:	4629      	mov	r1, r5
 8001704:	0bcb      	lsrs	r3, r1, #15
 8001706:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	//			OFFi = OFFi + 7*(TEMP + 1500l)*(TEMP + 1500l);
	//			SENSi = SENSi + 4*(TEMP + 1500l)*(TEMP + 1500l);
	//		}
	//	} else
	//	{
	Ti = (2*dT*dT)/1.37438953E11;
 800170a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800170e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001712:	fb03 f102 	mul.w	r1, r3, r2
 8001716:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800171a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	18ca      	adds	r2, r1, r3
 8001724:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001728:	fba3 1303 	umull	r1, r3, r3, r3
 800172c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800172e:	460b      	mov	r3, r1
 8001730:	67bb      	str	r3, [r7, #120]	; 0x78
 8001732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001734:	18d3      	adds	r3, r2, r3
 8001736:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001738:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800173c:	460b      	mov	r3, r1
 800173e:	18db      	adds	r3, r3, r3
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	4613      	mov	r3, r2
 8001744:	eb42 0303 	adc.w	r3, r2, r3
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7fe fecb 	bl	80004ec <__aeabi_l2d>
 8001756:	a35e      	add	r3, pc, #376	; (adr r3, 80018d0 <calculate+0x418>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7ff f81e 	bl	800079c <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff fa68 	bl	8000c3c <__aeabi_d2lz>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	OFFi = ((TEMP-2000)*(TEMP - 2000))/16;
 8001774:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001778:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 800177c:	63b9      	str	r1, [r7, #56]	; 0x38
 800177e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001784:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001788:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 800178c:	6339      	str	r1, [r7, #48]	; 0x30
 800178e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
 8001794:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001798:	462b      	mov	r3, r5
 800179a:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800179e:	4642      	mov	r2, r8
 80017a0:	fb02 f203 	mul.w	r2, r2, r3
 80017a4:	464b      	mov	r3, r9
 80017a6:	4621      	mov	r1, r4
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	4622      	mov	r2, r4
 80017b0:	4641      	mov	r1, r8
 80017b2:	fba2 1201 	umull	r1, r2, r2, r1
 80017b6:	677a      	str	r2, [r7, #116]	; 0x74
 80017b8:	460a      	mov	r2, r1
 80017ba:	673a      	str	r2, [r7, #112]	; 0x70
 80017bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80017be:	4413      	add	r3, r2
 80017c0:	677b      	str	r3, [r7, #116]	; 0x74
 80017c2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017c6:	2900      	cmp	r1, #0
 80017c8:	da07      	bge.n	80017da <calculate+0x322>
 80017ca:	f110 030f 	adds.w	r3, r0, #15
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	f141 0300 	adc.w	r3, r1, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	0902      	lsrs	r2, r0, #4
 80017e4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80017e8:	110b      	asrs	r3, r1, #4
 80017ea:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	SENSi = 0;
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	//	}

	OFF2 = OFF - OFFi;
 80017fa:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80017fe:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001802:	1a84      	subs	r4, r0, r2
 8001804:	60bc      	str	r4, [r7, #8]
 8001806:	eb61 0303 	sbc.w	r3, r1, r3
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001810:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	SENS2 = SENS - SENSi;
 8001814:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001818:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800181c:	1a84      	subs	r4, r0, r2
 800181e:	603c      	str	r4, [r7, #0]
 8001820:	eb61 0303 	sbc.w	r3, r1, r3
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	e9d7 3400 	ldrd	r3, r4, [r7]
 800182a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

	TEMP2 = (TEMP - Ti) / 100; //C
 800182e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001832:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001836:	1a84      	subs	r4, r0, r2
 8001838:	62bc      	str	r4, [r7, #40]	; 0x28
 800183a:	eb61 0303 	sbc.w	r3, r1, r3
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800184c:	f7ff f98e 	bl	8000b6c <__aeabi_ldivmod>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	P2 = (((D1*SENS2)/2097152 - OFF2)/8192)/10; //mbar
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <calculate+0x428>)
 800185a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001862:	fb02 f501 	mul.w	r5, r2, r1
 8001866:	fb00 f403 	mul.w	r4, r0, r3
 800186a:	442c      	add	r4, r5
 800186c:	fba0 2302 	umull	r2, r3, r0, r2
 8001870:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001872:	4613      	mov	r3, r2
 8001874:	66bb      	str	r3, [r7, #104]	; 0x68
 8001876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001878:	18e3      	adds	r3, r4, r3
 800187a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001888:	4621      	mov	r1, r4
 800188a:	0d4a      	lsrs	r2, r1, #21
 800188c:	4629      	mov	r1, r5
 800188e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001892:	4629      	mov	r1, r5
 8001894:	0d4b      	lsrs	r3, r1, #21
 8001896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800189a:	1a14      	subs	r4, r2, r0
 800189c:	623c      	str	r4, [r7, #32]
 800189e:	eb63 0301 	sbc.w	r3, r3, r1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
 80018a4:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018b0:	f7ff f9ac 	bl	8000c0c <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int32_t res[2];
	res[0] = P;
 80018bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	res[1] = TEMP/100;
 80018c4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80018c8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80018cc:	e00a      	b.n	80018e4 <calculate+0x42c>
 80018ce:	bf00      	nop
 80018d0:	fe280000 	.word	0xfe280000
 80018d4:	423fffff 	.word	0x423fffff
 80018d8:	20000178 	.word	0x20000178
 80018dc:	20000138 	.word	0x20000138
 80018e0:	20000170 	.word	0x20000170
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	f7ff f940 	bl	8000b6c <__aeabi_ldivmod>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4613      	mov	r3, r2
 80018f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	//	strcat(snum1,"\r\n");
	//	HAL_UART_Transmit(&huart2, (uint8_t*) snum1, strlen(snum1),6);



	presure = res[0]/10;
 80018f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018fa:	4a06      	ldr	r2, [pc, #24]	; (8001914 <calculate+0x45c>)
 80018fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001900:	1092      	asrs	r2, r2, #2
 8001902:	17db      	asrs	r3, r3, #31
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <calculate+0x460>)
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	bf00      	nop
 800190c:	37f8      	adds	r7, #248	; 0xf8
 800190e:	46bd      	mov	sp, r7
 8001910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001914:	66666667 	.word	0x66666667
 8001918:	20000180 	.word	0x20000180

0800191c <GetCrc16Checksumm>:
 */

#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8001928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192c:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	3b02      	subs	r3, #2
 8001932:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8001934:	e025      	b.n	8001982 <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21a      	sxth	r2, r3
 8001942:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001946:	4053      	eors	r3, r2
 8001948:	b21b      	sxth	r3, r3
 800194a:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 800194c:	2300      	movs	r3, #0
 800194e:	737b      	strb	r3, [r7, #13]
 8001950:	e014      	b.n	800197c <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8001952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001956:	2b00      	cmp	r3, #0
 8001958:	da09      	bge.n	800196e <GetCrc16Checksumm+0x52>
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	b21b      	sxth	r3, r3
 8001960:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001964:	f083 0301 	eor.w	r3, r3, #1
 8001968:	b21b      	sxth	r3, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	e002      	b.n	8001974 <GetCrc16Checksumm+0x58>
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	b29b      	uxth	r3, r3
 8001974:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 8001976:	7b7b      	ldrb	r3, [r7, #13]
 8001978:	3301      	adds	r3, #1
 800197a:	737b      	strb	r3, [r7, #13]
 800197c:	7b7b      	ldrb	r3, [r7, #13]
 800197e:	2b07      	cmp	r3, #7
 8001980:	d9e7      	bls.n	8001952 <GetCrc16Checksumm+0x36>
    while (len--) {
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	807a      	strh	r2, [r7, #2]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1d4      	bne.n	8001936 <GetCrc16Checksumm+0x1a>
    }
    return crc;
 800198c:	89fb      	ldrh	r3, [r7, #14]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	4619      	mov	r1, r3
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffb6 	bl	800191c <GetCrc16Checksumm>
 80019b0:	4603      	mov	r3, r0
 80019b2:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	3b02      	subs	r3, #2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 80019c4:	89fa      	ldrh	r2, [r7, #14]
 80019c6:	8afb      	ldrh	r3, [r7, #22]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d101      	bne.n	80019d0 <IsCrc16ChecksummCorrect+0x36>
		return true;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 80019d0:	2300      	movs	r3, #0
	}
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff96 	bl	800191c <GetCrc16Checksumm>
 80019f0:	4603      	mov	r3, r0
 80019f2:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	3b02      	subs	r3, #2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	89fa      	ldrh	r2, [r7, #14]
 8001a02:	801a      	strh	r2, [r3, #0]
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	e009      	b.n	8001a42 <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
 8001a38:	4053      	eors	r3, r2
 8001a3a:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbf0      	blt.n	8001a2e <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 8001a4c:	7dfa      	ldrb	r2, [r7, #23]
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d101      	bne.n	8001a58 <IsChecksumm8bCorrect+0x4c>
        return 1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <IsChecksumm8bCorrect+0x4e>
    else return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	e009      	b.n	8001a94 <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	4053      	eors	r3, r2
 8001a8c:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dbf0      	blt.n	8001a80 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 8001a9e:	887b      	ldrh	r3, [r7, #2]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	701a      	strb	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b087      	sub	sp, #28
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	e009      	b.n	8001aec <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	4053      	eors	r3, r2
 8001ae4:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	dbf0      	blt.n	8001ad8 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 8001af6:	7dfa      	ldrb	r2, [r7, #23]
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d101      	bne.n	8001b02 <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 8001b02:	2300      	movs	r3, #0
	}
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 8001b20:	2301      	movs	r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	e009      	b.n	8001b3a <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	4053      	eors	r3, r2
 8001b32:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	3301      	adds	r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf0      	blt.n	8001b26 <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	701a      	strb	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	460a      	mov	r2, r1
 8001b66:	71fb      	strb	r3, [r7, #7]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 8001b6c:	79bb      	ldrb	r3, [r7, #6]
 8001b6e:	2b07      	cmp	r3, #7
 8001b70:	d857      	bhi.n	8001c22 <PickBit+0xc6>
 8001b72:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <PickBit+0x1c>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001b99 	.word	0x08001b99
 8001b7c:	08001bab 	.word	0x08001bab
 8001b80:	08001bbd 	.word	0x08001bbd
 8001b84:	08001bcf 	.word	0x08001bcf
 8001b88:	08001be1 	.word	0x08001be1
 8001b8c:	08001bf3 	.word	0x08001bf3
 8001b90:	08001c05 	.word	0x08001c05
 8001b94:	08001c17 	.word	0x08001c17
	case 0:
			return (bool) (input & 0b00000001);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	e03c      	b.n	8001c24 <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e033      	b.n	8001c24 <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	e02a      	b.n	8001c24 <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e021      	b.n	8001c24 <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	e018      	b.n	8001c24 <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e00f      	b.n	8001c24 <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf14      	ite	ne
 8001c0e:	2301      	movne	r3, #1
 8001c10:	2300      	moveq	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	e006      	b.n	8001c24 <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	09db      	lsrs	r3, r3, #7
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	e000      	b.n	8001c24 <PickBit+0xc8>
	}
	return false;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <variableInit>:

uint16_t counterRx = 0;


void variableInit()
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001c36:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 8001c38:	4b4e      	ldr	r3, [pc, #312]	; (8001d74 <variableInit+0x144>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <variableInit+0x148>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 8001c44:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <variableInit+0x148>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 8001c4a:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <variableInit+0x148>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 8001c50:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <variableInit+0x148>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 8001c56:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <variableInit+0x148>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 8001c5c:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <variableInit+0x148>)
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 8001c64:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <variableInit+0x14c>)
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 8001c6c:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <variableInit+0x14c>)
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 8001c74:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <variableInit+0x14c>)
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <variableInit+0x14c>)
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 8001c84:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <variableInit+0x14c>)
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <variableInit+0x14c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	831a      	strh	r2, [r3, #24]

	rSensors.pressure_raw = 0;
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <variableInit+0x14c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	659a      	str	r2, [r3, #88]	; 0x58
	rSensors.pressure = 0;
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <variableInit+0x14c>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	65da      	str	r2, [r3, #92]	; 0x5c
	rSensors.pressure_null = 0;
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <variableInit+0x14c>)
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	661a      	str	r2, [r3, #96]	; 0x60
	rSensors.last_pressure = 0;
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <variableInit+0x14c>)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	665a      	str	r2, [r3, #100]	; 0x64

	rSensors.pressure_watchdog_counter = 0;
 8001cb0:	4b32      	ldr	r3, [pc, #200]	; (8001d7c <variableInit+0x14c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	rSensors.rollSpeed = 0;
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <variableInit+0x14c>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <variableInit+0x14c>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <variableInit+0x14c>)
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <variableInit+0x14c>)
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <variableInit+0x14c>)
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <variableInit+0x14c>)
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <variableInit+0x14c>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <variableInit+0x14c>)
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <variableInit+0x14c>)
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <variableInit+0x14c>)
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <variableInit+0x14c>)
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <variableInit+0x14c>)
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <variableInit+0x14c>)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <variableInit+0x150>)
 8001d22:	2203      	movs	r2, #3
 8001d24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <variableInit+0x150>)
 8001d2a:	2205      	movs	r2, #5
 8001d2c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <variableInit+0x150>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <variableInit+0x150>)
 8001d38:	2206      	movs	r2, #6
 8001d3a:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <variableInit+0x150>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	779a      	strb	r2, [r3, #30]

	rSensors.startIMU = true;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <variableInit+0x14c>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rSensors.startPressure = true;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <variableInit+0x14c>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	thrustersInit();
 8001d52:	f003 fb71 	bl	8005438 <thrustersInit>

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
 8001d56:	463b      	mov	r3, r7
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 f977 	bl	800304c <flashReadSettings>
	flashReadStructure(&config);
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 fb2d 	bl	80033c0 <flashReadStructure>

	// Thrusters initialization
	if(rState.flash) {
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <variableInit+0x148>)
 8001d68:	789b      	ldrb	r3, [r3, #2]
 8001d6a:	2b00      	cmp	r3, #0
		return;
	}
}
 8001d6c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20001b8c 	.word	0x20001b8c
 8001d78:	20001a78 	.word	0x20001a78
 8001d7c:	20001b14 	.word	0x20001b14
 8001d80:	20001ba8 	.word	0x20001ba8

08001d84 <uartBusesInit>:

void uartBusesInit()
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 8001d8a:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <uartBusesInit+0x1dc>)
 8001d8c:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <uartBusesInit+0x1e0>)
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 8001d90:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <uartBusesInit+0x1dc>)
 8001d92:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <uartBusesInit+0x1e4>)
 8001d94:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <uartBusesInit+0x1dc>)
 8001d98:	4a74      	ldr	r2, [pc, #464]	; (8001f6c <uartBusesInit+0x1e8>)
 8001d9a:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 8001d9c:	4b70      	ldr	r3, [pc, #448]	; (8001f60 <uartBusesInit+0x1dc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 8001da4:	4b6e      	ldr	r3, [pc, #440]	; (8001f60 <uartBusesInit+0x1dc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 8001dac:	4b6c      	ldr	r3, [pc, #432]	; (8001f60 <uartBusesInit+0x1dc>)
 8001dae:	2214      	movs	r2, #20
 8001db0:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 8001db2:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <uartBusesInit+0x1dc>)
 8001db4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001db8:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 8001dba:	4b69      	ldr	r3, [pc, #420]	; (8001f60 <uartBusesInit+0x1dc>)
 8001dbc:	22c8      	movs	r2, #200	; 0xc8
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 8001dc0:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <uartBusesInit+0x1dc>)
 8001dc2:	22c8      	movs	r2, #200	; 0xc8
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 8001dc6:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <uartBusesInit+0x1dc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 8001dce:	4b64      	ldr	r3, [pc, #400]	; (8001f60 <uartBusesInit+0x1dc>)
 8001dd0:	4a67      	ldr	r2, [pc, #412]	; (8001f70 <uartBusesInit+0x1ec>)
 8001dd2:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001dd4:	4b62      	ldr	r3, [pc, #392]	; (8001f60 <uartBusesInit+0x1dc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001dda:	4b61      	ldr	r3, [pc, #388]	; (8001f60 <uartBusesInit+0x1dc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 8001de0:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <uartBusesInit+0x1dc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 8001de8:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <uartBusesInit+0x1dc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001df0:	4b5b      	ldr	r3, [pc, #364]	; (8001f60 <uartBusesInit+0x1dc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001df8:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <uartBusesInit+0x1dc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 8001dfe:	4b58      	ldr	r3, [pc, #352]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e00:	2264      	movs	r2, #100	; 0x64
 8001e02:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 8001e04:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e06:	2264      	movs	r2, #100	; 0x64
 8001e08:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 8001e0a:	4b55      	ldr	r3, [pc, #340]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart4;
 8001e12:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e14:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <uartBusesInit+0x1f0>)
 8001e16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001e1a:	4b51      	ldr	r3, [pc, #324]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001e20:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 8001e26:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e30:	220a      	movs	r2, #10
 8001e32:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001e3e:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e48:	2264      	movs	r2, #100	; 0x64
 8001e4a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 8001e4e:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e50:	2264      	movs	r2, #100	; 0x64
 8001e52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 8001e56:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e60:	4a45      	ldr	r2, [pc, #276]	; (8001f78 <uartBusesInit+0x1f4>)
 8001e62:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e68:	4a44      	ldr	r2, [pc, #272]	; (8001f7c <uartBusesInit+0x1f8>)
 8001e6a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 8001e96:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <uartBusesInit+0x1dc>)
 8001e98:	2264      	movs	r2, #100	; 0x64
 8001e9a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <uartBusesInit+0x1dc>)
 8001ea0:	2264      	movs	r2, #100	; 0x64
 8001ea2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <uartBusesInit+0x1dc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	e04a      	b.n	8001f4a <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	492a      	ldr	r1, [pc, #168]	; (8001f60 <uartBusesInit+0x1dc>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 8001ec8:	79fa      	ldrb	r2, [r7, #7]
 8001eca:	4925      	ldr	r1, [pc, #148]	; (8001f60 <uartBusesInit+0x1dc>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3309      	adds	r3, #9
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 8001edc:	79fa      	ldrb	r2, [r7, #7]
 8001ede:	4920      	ldr	r1, [pc, #128]	; (8001f60 <uartBusesInit+0x1dc>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	330a      	adds	r3, #10
 8001eec:	2200      	movs	r2, #0
 8001eee:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 8001ef0:	79fa      	ldrb	r2, [r7, #7]
 8001ef2:	491b      	ldr	r1, [pc, #108]	; (8001f60 <uartBusesInit+0x1dc>)
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	330c      	adds	r3, #12
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 8001f04:	79fa      	ldrb	r2, [r7, #7]
 8001f06:	4916      	ldr	r1, [pc, #88]	; (8001f60 <uartBusesInit+0x1dc>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	3310      	adds	r3, #16
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 8001f18:	79fa      	ldrb	r2, [r7, #7]
 8001f1a:	4911      	ldr	r1, [pc, #68]	; (8001f60 <uartBusesInit+0x1dc>)
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	3314      	adds	r3, #20
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 8001f2e:	79fa      	ldrb	r2, [r7, #7]
 8001f30:	490b      	ldr	r1, [pc, #44]	; (8001f60 <uartBusesInit+0x1dc>)
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	3301      	adds	r3, #1
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d9b1      	bls.n	8001eb4 <uartBusesInit+0x130>
	}
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	2000018c 	.word	0x2000018c
 8001f64:	20002548 	.word	0x20002548
 8001f68:	20001fc0 	.word	0x20001fc0
 8001f6c:	20002014 	.word	0x20002014
 8001f70:	20002438 	.word	0x20002438
 8001f74:	200023b0 	.word	0x200023b0
 8001f78:	200024c0 	.word	0x200024c0
 8001f7c:	20002078 	.word	0x20002078

08001f80 <i2cBusesInit>:

void i2cBusesInit()
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	// TODO refactor i2c communication routines
	i2cBus[DEV_I2C].hi2c = &hi2c1; // Link to hi2c will be set before receiving
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <i2cBusesInit+0x14>)
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <i2cBusesInit+0x18>)
 8001f88:	601a      	str	r2, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	2000026c 	.word	0x2000026c
 8001f98:	20002120 	.word	0x20002120

08001f9c <transmitPackage>:


bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f009 fa0a 	bl	800b3cc <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00d      	beq.n	8001fde <transmitPackage+0x42>
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d117      	bne.n	8001ff6 <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f009 f938 	bl	800b24c <HAL_UART_Transmit_DMA>
            break;
 8001fdc:	e00d      	b.n	8001ffa <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f009 f88a 	bl	800b108 <HAL_UART_Transmit_IT>
            break;
 8001ff4:	e001      	b.n	8001ffa <transmitPackage+0x5e>
        default:
            return false;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e036      	b.n	8002068 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8001ffa:	f00c fb97 	bl	800e72c <xTaskGetTickCount>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe ffd7 	bl	8000fb4 <fromTickToMs>
 8002006:	eef0 7a40 	vmov.f32	s15, s0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 8002010:	e01c      	b.n	800204c <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 8002012:	f00c fb8b 	bl	800e72c <xTaskGetTickCount>
 8002016:	4603      	mov	r3, r0
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe ffcb 	bl	8000fb4 <fromTickToMs>
 800201e:	eeb0 7a40 	vmov.f32	s14, s0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	edd3 7a05 	vldr	s15, [r3, #20]
 8002028:	ee37 7a67 	vsub.f32	s14, s14, s15
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002040:	dd01      	ble.n	8002046 <transmitPackage+0xaa>
    		return false;
 8002042:	2300      	movs	r3, #0
 8002044:	e010      	b.n	8002068 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 8002046:	2032      	movs	r0, #50	; 0x32
 8002048:	f00b f846 	bl	800d0d8 <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7a5b      	ldrb	r3, [r3, #9]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <transmitPackage+0xca>
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1d5      	bne.n	8002012 <transmitPackage+0x76>
    }
    return true;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4618      	mov	r0, r3
 800208e:	f009 fa15 	bl	800b4bc <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4618      	mov	r0, r3
 8002098:	f009 f998 	bl	800b3cc <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d018      	beq.n	80020d8 <transmitAndReceive+0x68>
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d12d      	bne.n	8002106 <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6819      	ldr	r1, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	f009 f942 	bl	800b344 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	f009 f8bb 	bl	800b24c <HAL_UART_Transmit_DMA>
			break;
 80020d6:	e018      	b.n	800210a <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6819      	ldr	r1, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	f009 f86b 	bl	800b1c4 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	f009 f802 	bl	800b108 <HAL_UART_Transmit_IT>
			break;
 8002104:	e001      	b.n	800210a <transmitAndReceive+0x9a>
		default:
			return false;
 8002106:	2300      	movs	r3, #0
 8002108:	e03d      	b.n	8002186 <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 800210a:	f00c fb0f 	bl	800e72c <xTaskGetTickCount>
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe ff4f 	bl	8000fb4 <fromTickToMs>
 8002116:	eef0 7a40 	vmov.f32	s15, s0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8002120:	e01c      	b.n	800215c <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 8002122:	f00c fb03 	bl	800e72c <xTaskGetTickCount>
 8002126:	4603      	mov	r3, r0
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ff43 	bl	8000fb4 <fromTickToMs>
 800212e:	eeb0 7a40 	vmov.f32	s14, s0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edd3 7a05 	vldr	s15, [r3, #20]
 8002138:	ee37 7a67 	vsub.f32	s14, s14, s15
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002150:	dd01      	ble.n	8002156 <transmitAndReceive+0xe6>
			return false;
 8002152:	2300      	movs	r3, #0
 8002154:	e017      	b.n	8002186 <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 8002156:	2032      	movs	r0, #50	; 0x32
 8002158:	f00a ffbe 	bl	800d0d8 <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7a5b      	ldrb	r3, [r3, #9]
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00c      	beq.n	8002184 <transmitAndReceive+0x114>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7a1b      	ldrb	r3, [r3, #8]
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <transmitAndReceive+0x114>
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ce      	bne.n	8002122 <transmitAndReceive+0xb2>
	}
	return true;
 8002184:	2301      	movs	r3, #1
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_UART_TxCpltCallback+0x8c>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d103      	bne.n	80021aa <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_UART_TxCpltCallback+0x8c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	725a      	strb	r2, [r3, #9]
		return;
 80021a8:	e035      	b.n	8002216 <HAL_UART_TxCpltCallback+0x86>
	}

	if(huart == uartBus[IMU_UART].huart)
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_UART_TxCpltCallback+0x8c>)
 80021ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d10c      	bne.n	80021d0 <HAL_UART_TxCpltCallback+0x40>
	{
	   HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_UART_TxCpltCallback+0x8c>)
 80021b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021bc:	4a17      	ldr	r2, [pc, #92]	; (800221c <HAL_UART_TxCpltCallback+0x8c>)
 80021be:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 80021c2:	4a16      	ldr	r2, [pc, #88]	; (800221c <HAL_UART_TxCpltCallback+0x8c>)
 80021c4:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 80021c8:	b292      	uxth	r2, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f008 fffa 	bl	800b1c4 <HAL_UART_Receive_IT>
	}


	struct uartBus_s *bus = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e01a      	b.n	8002210 <HAL_UART_TxCpltCallback+0x80>
		if(uartBus[i].huart == huart) {
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	490f      	ldr	r1, [pc, #60]	; (800221c <HAL_UART_TxCpltCallback+0x8c>)
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	3330      	adds	r3, #48	; 0x30
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d10b      	bne.n	800220a <HAL_UART_TxCpltCallback+0x7a>
			bus = &uartBus[i];
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4a07      	ldr	r2, [pc, #28]	; (800221c <HAL_UART_TxCpltCallback+0x8c>)
 80021fe:	4413      	add	r3, r2
 8002200:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2201      	movs	r2, #1
 8002206:	725a      	strb	r2, [r3, #9]
			break;
 8002208:	e005      	b.n	8002216 <HAL_UART_TxCpltCallback+0x86>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	3301      	adds	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d9e1      	bls.n	80021da <HAL_UART_TxCpltCallback+0x4a>
		}
	}
}
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000018c 	.word	0x2000018c

08002220 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <HAL_UART_RxCpltCallback+0x7c>)
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d102      	bne.n	8002238 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 8002232:	f000 f84b 	bl	80022cc <ShoreReceive>
		return;
 8002236:	e02d      	b.n	8002294 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e025      	b.n	800228e <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	4915      	ldr	r1, [pc, #84]	; (800229c <HAL_UART_RxCpltCallback+0x7c>)
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	3330      	adds	r3, #48	; 0x30
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	d116      	bne.n	8002288 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <HAL_UART_RxCpltCallback+0x7c>)
 8002266:	4413      	add	r3, r2
 8002268:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2201      	movs	r2, #1
 800226e:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 8002270:	f00c fa5c 	bl	800e72c <xTaskGetTickCount>
 8002274:	4603      	mov	r3, r0
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fe9c 	bl	8000fb4 <fromTickToMs>
 800227c:	eef0 7a40 	vmov.f32	s15, s0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 8002286:	e005      	b.n	8002294 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	3301      	adds	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d9d6      	bls.n	8002242 <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000018c 	.word	0x2000018c

080022a0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterRxCplt(hi2c);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7fe ffbb 	bl	8001224 <MS5837_I2C_MasterRxCplt>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterTxCplt(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff f800 	bl	80012c4 <MS5837_I2C_MasterTxCplt>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <ShoreReceive>:
	MS5837_I2C_MasterError(hi2c);
}


void ShoreReceive()
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <ShoreReceive+0xec>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 80022d8:	4b38      	ldr	r3, [pc, #224]	; (80023bc <ShoreReceive+0xf0>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d142      	bne.n	8002366 <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 80022e0:	2300      	movs	r3, #0
 80022e2:	71fb      	strb	r3, [r7, #7]
 80022e4:	e03b      	b.n	800235e <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 80022e6:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <ShoreReceive+0xf4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	4935      	ldr	r1, [pc, #212]	; (80023c4 <ShoreReceive+0xf8>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d125      	bne.n	8002342 <ShoreReceive+0x76>
				counterRx = 1;
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <ShoreReceive+0xf0>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	4a32      	ldr	r2, [pc, #200]	; (80023c8 <ShoreReceive+0xfc>)
 8002300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <ShoreReceive+0xf4>)
 800230c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 8002310:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <ShoreReceive+0xf4>)
 8002312:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <ShoreReceive+0xf4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <ShoreReceive+0xf4>)
 800231c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002320:	b292      	uxth	r2, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f008 ff4e 	bl	800b1c4 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8002328:	4b28      	ldr	r3, [pc, #160]	; (80023cc <ShoreReceive+0x100>)
 800232a:	681c      	ldr	r4, [r3, #0]
 800232c:	f00c fa0e 	bl	800e74c <xTaskGetTickCountFromISR>
 8002330:	4602      	mov	r2, r0
 8002332:	2300      	movs	r3, #0
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <ShoreReceive+0xec>)
 8002338:	2106      	movs	r1, #6
 800233a:	4620      	mov	r0, r4
 800233c:	f00d f86a 	bl	800f414 <xTimerGenericCommand>
				break;
 8002340:	e026      	b.n	8002390 <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d107      	bne.n	8002358 <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <ShoreReceive+0xf4>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <ShoreReceive+0xf4>)
 800234e:	6811      	ldr	r1, [r2, #0]
 8002350:	2201      	movs	r2, #1
 8002352:	4618      	mov	r0, r3
 8002354:	f008 ff36 	bl	800b1c4 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	3301      	adds	r3, #1
 800235c:	71fb      	strb	r3, [r7, #7]
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d9c0      	bls.n	80022e6 <ShoreReceive+0x1a>
 8002364:	e014      	b.n	8002390 <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <ShoreReceive+0xf0>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d110      	bne.n	8002390 <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <ShoreReceive+0xf4>)
 8002370:	2201      	movs	r2, #1
 8002372:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 8002374:	f00c f9da 	bl	800e72c <xTaskGetTickCount>
 8002378:	4603      	mov	r3, r0
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fe1a 	bl	8000fb4 <fromTickToMs>
 8002380:	eef0 7a40 	vmov.f32	s15, s0
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <ShoreReceive+0xf4>)
 8002386:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <ShoreReceive+0xf0>)
 800238c:	2202      	movs	r2, #2
 800238e:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <ShoreReceive+0xec>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d10a      	bne.n	80023ae <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <ShoreReceive+0xec>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
		taskYIELD();
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <ShoreReceive+0x104>)
 80023a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	f3bf 8f6f 	isb	sy
	}
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000278 	.word	0x20000278
 80023bc:	20000274 	.word	0x20000274
 80023c0:	2000018c 	.word	0x2000018c
 80023c4:	08010c2c 	.word	0x08010c2c
 80023c8:	08010c24 	.word	0x08010c24
 80023cc:	20000280 	.word	0x20000280
 80023d0:	e000ed04 	.word	0xe000ed04

080023d4 <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 80023e0:	23aa      	movs	r3, #170	; 0xaa
 80023e2:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 80023e4:	23aa      	movs	r3, #170	; 0xaa
 80023e6:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	4916      	ldr	r1, [pc, #88]	; (8002444 <DevicesRequestUpdate+0x70>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	440b      	add	r3, r1
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	4911      	ldr	r1, [pc, #68]	; (8002444 <DevicesRequestUpdate+0x70>)
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	440b      	add	r3, r1
 8002408:	3301      	adds	r3, #1
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	72fb      	strb	r3, [r7, #11]
    //req.velocity1 = 0;
    //req.velocity2 = rDevice[dev].force;

   // if(dev == GRAB) {
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <DevicesRequestUpdate+0x70>)
 8002410:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002414:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <DevicesRequestUpdate+0x70>)
 8002418:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800241c:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	461a      	mov	r2, r3
 8002422:	f107 0308 	add.w	r3, r7, #8
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	6010      	str	r0, [r2, #0]
 800242a:	8899      	ldrh	r1, [r3, #4]
 800242c:	799b      	ldrb	r3, [r3, #6]
 800242e:	8091      	strh	r1, [r2, #4]
 8002430:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 8002432:	2107      	movs	r1, #7
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fb16 	bl	8001a66 <AddChecksumm8b>
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20001ba8 	.word	0x20001ba8

08002448 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 8002454:	210a      	movs	r1, #10
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fad8 	bl	8001a0c <IsChecksumm8bCorrect>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d04a      	beq.n	80024f8 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	6810      	ldr	r0, [r2, #0]
 800246a:	6851      	ldr	r1, [r2, #4]
 800246c:	c303      	stmia	r3!, {r0, r1}
 800246e:	8912      	ldrh	r2, [r2, #8]
 8002470:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8002478:	b298      	uxth	r0, r3
 800247a:	4924      	ldr	r1, [pc, #144]	; (800250c <DevicesResponseUpdate+0xc4>)
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	440b      	add	r3, r1
 8002486:	3304      	adds	r3, #4
 8002488:	4602      	mov	r2, r0
 800248a:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	7cf8      	ldrb	r0, [r7, #19]
 8002490:	491e      	ldr	r1, [pc, #120]	; (800250c <DevicesResponseUpdate+0xc4>)
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	440b      	add	r3, r1
 800249c:	3307      	adds	r3, #7
 800249e:	4602      	mov	r2, r0
 80024a0:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	7d38      	ldrb	r0, [r7, #20]
 80024a6:	4919      	ldr	r1, [pc, #100]	; (800250c <DevicesResponseUpdate+0xc4>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	440b      	add	r3, r1
 80024b2:	3308      	adds	r3, #8
 80024b4:	4602      	mov	r2, r0
 80024b6:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <DevicesResponseUpdate+0xc4>)
 80024ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <DevicesResponseUpdate+0x88>
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d103      	bne.n	80024d0 <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <DevicesResponseUpdate+0xc8>)
 80024ca:	2203      	movs	r2, #3
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e00a      	b.n	80024e6 <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <DevicesResponseUpdate+0xc4>)
 80024d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <DevicesResponseUpdate+0x9e>
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d102      	bne.n	80024e6 <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <DevicesResponseUpdate+0xc8>)
 80024e2:	2204      	movs	r2, #4
 80024e4:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <DevicesResponseUpdate+0xcc>)
 80024e8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80024ec:	3301      	adds	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <DevicesResponseUpdate+0xcc>)
 80024f2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 80024f6:	e004      	b.n	8002502 <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <DevicesResponseUpdate+0xcc>)
 80024fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024fc:	3301      	adds	r3, #1
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <DevicesResponseUpdate+0xcc>)
 8002500:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20001ba8 	.word	0x20001ba8
 8002510:	20001be4 	.word	0x20001be4
 8002514:	2000018c 	.word	0x2000018c

08002518 <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800251e:	af00      	add	r7, sp, #0
 8002520:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002524:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002528:	6018      	str	r0, [r3, #0]
	bool flag = false;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	flag = IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH);
 8002530:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002534:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002538:	211f      	movs	r1, #31
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	f7ff fa2d 	bl	800199a <IsCrc16ChecksummCorrect>
 8002540:	4603      	mov	r3, r0
 8002542:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 8002546:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800254a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800254e:	211f      	movs	r1, #31
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	f7ff fa22 	bl	800199a <IsCrc16ChecksummCorrect>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8142 	beq.w	80027e2 <ShoreRequest+0x2ca>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 800255e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002562:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f507 7405 	add.w	r4, r7, #532	; 0x214
 800256c:	461d      	mov	r5, r3
 800256e:	6828      	ldr	r0, [r5, #0]
 8002570:	6869      	ldr	r1, [r5, #4]
 8002572:	68aa      	ldr	r2, [r5, #8]
 8002574:	68eb      	ldr	r3, [r5, #12]
 8002576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002578:	6928      	ldr	r0, [r5, #16]
 800257a:	6969      	ldr	r1, [r5, #20]
 800257c:	69aa      	ldr	r2, [r5, #24]
 800257e:	c407      	stmia	r4!, {r0, r1, r2}
 8002580:	8bab      	ldrh	r3, [r5, #28]
 8002582:	7faa      	ldrb	r2, [r5, #30]
 8002584:	8023      	strh	r3, [r4, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	70a3      	strb	r3, [r4, #2]

    	uint8_t tempCameraNum = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236

        rJoySpeed.march = req.march;
 8002590:	f8d7 3217 	ldr.w	r3, [r7, #535]	; 0x217
 8002594:	4a98      	ldr	r2, [pc, #608]	; (80027f8 <ShoreRequest+0x2e0>)
 8002596:	6013      	str	r3, [r2, #0]
        rJoySpeed.lag = req.lag;
 8002598:	f8d7 321b 	ldr.w	r3, [r7, #539]	; 0x21b
 800259c:	4a96      	ldr	r2, [pc, #600]	; (80027f8 <ShoreRequest+0x2e0>)
 800259e:	6053      	str	r3, [r2, #4]
        rJoySpeed.depth = req.depth;
 80025a0:	f8d7 321f 	ldr.w	r3, [r7, #543]	; 0x21f
 80025a4:	4a94      	ldr	r2, [pc, #592]	; (80027f8 <ShoreRequest+0x2e0>)
 80025a6:	6093      	str	r3, [r2, #8]
        rJoySpeed.roll = req.roll;
 80025a8:	f8d7 3223 	ldr.w	r3, [r7, #547]	; 0x223
 80025ac:	4a92      	ldr	r2, [pc, #584]	; (80027f8 <ShoreRequest+0x2e0>)
 80025ae:	60d3      	str	r3, [r2, #12]
        rJoySpeed.pitch = req.pitch;
 80025b0:	f8d7 3227 	ldr.w	r3, [r7, #551]	; 0x227
 80025b4:	4a90      	ldr	r2, [pc, #576]	; (80027f8 <ShoreRequest+0x2e0>)
 80025b6:	6113      	str	r3, [r2, #16]
        rJoySpeed.yaw = req.yaw;
 80025b8:	f8d7 322b 	ldr.w	r3, [r7, #555]	; 0x22b
 80025bc:	4a8e      	ldr	r2, [pc, #568]	; (80027f8 <ShoreRequest+0x2e0>)
 80025be:	6153      	str	r3, [r2, #20]

        rDevice[GRAB].force = req.grab;
 80025c0:	f997 2230 	ldrsb.w	r2, [r7, #560]	; 0x230
 80025c4:	4b8d      	ldr	r3, [pc, #564]	; (80027fc <ShoreRequest+0x2e4>)
 80025c6:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <ShoreRequest+0x2e4>)
 80025ca:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80025ce:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80025d2:	d102      	bne.n	80025da <ShoreRequest+0xc2>
            rDevice[GRAB].force = -127;
 80025d4:	4b89      	ldr	r3, [pc, #548]	; (80027fc <ShoreRequest+0x2e4>)
 80025d6:	2281      	movs	r2, #129	; 0x81
 80025d8:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.drop;
 80025da:	f997 222f 	ldrsb.w	r2, [r7, #559]	; 0x22f
 80025de:	4b87      	ldr	r3, [pc, #540]	; (80027fc <ShoreRequest+0x2e4>)
 80025e0:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 80025e4:	4b85      	ldr	r3, [pc, #532]	; (80027fc <ShoreRequest+0x2e4>)
 80025e6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80025ea:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80025ee:	d103      	bne.n	80025f8 <ShoreRequest+0xe0>
        	rDevice[TILT].force = -127;
 80025f0:	4b82      	ldr	r3, [pc, #520]	; (80027fc <ShoreRequest+0x2e4>)
 80025f2:	2281      	movs	r2, #129	; 0x81
 80025f4:	f883 2020 	strb.w	r2, [r3, #32]
//        rDevice[DEV1].force = req.dev1;
//        rDevice[DEV2].force = req.dev2;

//        rState.lag_error = (float) req.lag_error;

        rSensors.startIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 80025f8:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80025fc:	2106      	movs	r1, #6
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff faac 	bl	8001b5c <PickBit>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	4b7d      	ldr	r3, [pc, #500]	; (8002800 <ShoreRequest+0x2e8>)
 800260a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 800260e:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002612:	2107      	movs	r1, #7
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff faa1 	bl	8001b5c <PickBit>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <ShoreRequest+0x11c>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fd6f 	bl	8003108 <flashFillStructure>
        	flashWriteSettings(&config);
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fd30 	bl	8003094 <flashWriteSettings>
        }

//        tempCameraNum = req.cameras;

        uint8_t old_reset = rComputer.reset;
 8002634:	4b73      	ldr	r3, [pc, #460]	; (8002804 <ShoreRequest+0x2ec>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
   //         	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
//            }
//        }
//        rComputer.reset = req.pc_reset;

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 800263c:	4b72      	ldr	r3, [pc, #456]	; (8002808 <ShoreRequest+0x2f0>)
 800263e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002642:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 8002646:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800264a:	2103      	movs	r1, #3
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fa85 	bl	8001b5c <PickBit>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	4b6c      	ldr	r3, [pc, #432]	; (8002808 <ShoreRequest+0x2f0>)
 8002658:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 800265c:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002660:	f083 0301 	eor.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <ShoreRequest+0x162>
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <ShoreRequest+0x2f0>)
 800266c:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <ShoreRequest+0x162>
        	stabilizationStart(STAB_YAW);
 8002674:	2003      	movs	r0, #3
 8002676:	f002 fa31 	bl	8004adc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <ShoreRequest+0x2f0>)
 800267c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002680:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 8002684:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fa66 	bl	8001b5c <PickBit>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <ShoreRequest+0x2f0>)
 8002696:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 800269a:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 800269e:	f083 0301 	eor.w	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <ShoreRequest+0x1a0>
 80026a8:	4b57      	ldr	r3, [pc, #348]	; (8002808 <ShoreRequest+0x2f0>)
 80026aa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <ShoreRequest+0x1a0>
        	stabilizationStart(STAB_ROLL);
 80026b2:	2004      	movs	r0, #4
 80026b4:	f002 fa12 	bl	8004adc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <ShoreRequest+0x2f0>)
 80026ba:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80026be:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 80026c2:	4b51      	ldr	r3, [pc, #324]	; (8002808 <ShoreRequest+0x2f0>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 80026ca:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80026ce:	f083 0301 	eor.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <ShoreRequest+0x1d0>
 80026d8:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <ShoreRequest+0x2f0>)
 80026da:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <ShoreRequest+0x1d0>
        	stabilizationStart(STAB_PITCH);
 80026e2:	2005      	movs	r0, #5
 80026e4:	f002 f9fa 	bl	8004adc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 80026e8:	4b47      	ldr	r3, [pc, #284]	; (8002808 <ShoreRequest+0x2f0>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 80026f0:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fa30 	bl	8001b5c <PickBit>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <ShoreRequest+0x2f0>)
 8002702:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 8002704:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <ShoreRequest+0x208>
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <ShoreRequest+0x2f0>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <ShoreRequest+0x208>
        	stabilizationStart(STAB_DEPTH);
 800271a:	2000      	movs	r0, #0
 800271c:	f002 f9de 	bl	8004adc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 8002720:	4b39      	ldr	r3, [pc, #228]	; (8002808 <ShoreRequest+0x2f0>)
 8002722:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002726:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 800272a:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800272e:	2104      	movs	r1, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fa13 	bl	8001b5c <PickBit>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	4b33      	ldr	r3, [pc, #204]	; (8002808 <ShoreRequest+0x2f0>)
 800273c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 8002740:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002744:	f083 0301 	eor.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <ShoreRequest+0x246>
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <ShoreRequest+0x2f0>)
 8002750:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <ShoreRequest+0x246>
        	stabilizationStart(STAB_LAG);
 8002758:	2002      	movs	r0, #2
 800275a:	f002 f9bf 	bl	8004adc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 800275e:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <ShoreRequest+0x2f0>)
 8002760:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002764:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 8002768:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800276c:	2105      	movs	r1, #5
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f9f4 	bl	8001b5c <PickBit>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <ShoreRequest+0x2f0>)
 800277a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 800277e:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002782:	f083 0301 	eor.w	r3, r3, #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <ShoreRequest+0x284>
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <ShoreRequest+0x2f0>)
 800278e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <ShoreRequest+0x284>
        	stabilizationStart(STAB_MARCH);
 8002796:	2001      	movs	r0, #1
 8002798:	f002 f9a0 	bl	8004adc <stabilizationStart>
//        	else {
//        		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD;
//        	}
//        }

        if(tempCameraNum != rState.cameraNum) {
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <ShoreRequest+0x2f4>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	f897 2236 	ldrb.w	r2, [r7, #566]	; 0x236
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d013      	beq.n	80027d0 <ShoreRequest+0x2b8>
        	rState.cameraNum = tempCameraNum;
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <ShoreRequest+0x2f4>)
 80027aa:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80027ae:	7013      	strb	r3, [r2, #0]
        	switch(rState.cameraNum) {
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <ShoreRequest+0x2f4>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d80b      	bhi.n	80027d0 <ShoreRequest+0x2b8>
 80027b8:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <ShoreRequest+0x2a8>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027d1 	.word	0x080027d1
 80027c8:	080027d1 	.word	0x080027d1
 80027cc:	080027d1 	.word	0x080027d1
        		break;
        	}
        }

        // TODO tuuuupoooo
        formThrustVectors();
 80027d0:	f002 ff48 	bl	8005664 <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <ShoreRequest+0x2f8>)
 80027d6:	895b      	ldrh	r3, [r3, #10]
 80027d8:	3301      	adds	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <ShoreRequest+0x2f8>)
 80027de:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 80027e0:	e004      	b.n	80027ec <ShoreRequest+0x2d4>
    	++uartBus[SHORE_UART].brokenRxCounter;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <ShoreRequest+0x2f8>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	3301      	adds	r3, #1
 80027e8:	4a09      	ldr	r2, [pc, #36]	; (8002810 <ShoreRequest+0x2f8>)
 80027ea:	60d3      	str	r3, [r2, #12]
}
 80027ec:	bf00      	nop
 80027ee:	f507 770e 	add.w	r7, r7, #568	; 0x238
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bdb0      	pop	{r4, r5, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20001b90 	.word	0x20001b90
 80027fc:	20001ba8 	.word	0x20001ba8
 8002800:	20001b14 	.word	0x20001b14
 8002804:	20001b8c 	.word	0x20001b8c
 8002808:	20001be8 	.word	0x20001be8
 800280c:	20001a78 	.word	0x20001a78
 8002810:	2000018c 	.word	0x2000018c

08002814 <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b098      	sub	sp, #96	; 0x60
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 800281c:	2154      	movs	r1, #84	; 0x54
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff f8bb 	bl	800199a <IsCrc16ChecksummCorrect>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8124 	beq.w	8002a74 <ShoreConfigRequest+0x260>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	4611      	mov	r1, r2
 8002834:	2254      	movs	r2, #84	; 0x54
 8002836:	4618      	mov	r0, r3
 8002838:	f00d feda 	bl	80105f0 <memcpy>

		rJoySpeed.march = req.march;
 800283c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002848:	4b8f      	ldr	r3, [pc, #572]	; (8002a88 <ShoreConfigRequest+0x274>)
 800284a:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 800284e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285a:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <ShoreConfigRequest+0x274>)
 800285c:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 8002860:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286c:	4b86      	ldr	r3, [pc, #536]	; (8002a88 <ShoreConfigRequest+0x274>)
 800286e:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 8002872:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <ShoreConfigRequest+0x274>)
 8002880:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 8002884:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002890:	4b7d      	ldr	r3, [pc, #500]	; (8002a88 <ShoreConfigRequest+0x274>)
 8002892:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 8002896:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a2:	4b79      	ldr	r3, [pc, #484]	; (8002a88 <ShoreConfigRequest+0x274>)
 80028a4:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 80028a8:	7a7b      	ldrb	r3, [r7, #9]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f8d7 3016 	ldr.w	r3, [r7, #22]
 80028b0:	4976      	ldr	r1, [pc, #472]	; (8002a8c <ShoreConfigRequest+0x278>)
 80028b2:	224c      	movs	r2, #76	; 0x4c
 80028b4:	fb00 f202 	mul.w	r2, r0, r2
 80028b8:	440a      	add	r2, r1
 80028ba:	3204      	adds	r2, #4
 80028bc:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 80028be:	7a7b      	ldrb	r3, [r7, #9]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f8d7 301a 	ldr.w	r3, [r7, #26]
 80028c6:	4971      	ldr	r1, [pc, #452]	; (8002a8c <ShoreConfigRequest+0x278>)
 80028c8:	224c      	movs	r2, #76	; 0x4c
 80028ca:	fb00 f202 	mul.w	r2, r0, r2
 80028ce:	440a      	add	r2, r1
 80028d0:	3208      	adds	r2, #8
 80028d2:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 80028d4:	7a7b      	ldrb	r3, [r7, #9]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f8d7 301e 	ldr.w	r3, [r7, #30]
 80028dc:	496b      	ldr	r1, [pc, #428]	; (8002a8c <ShoreConfigRequest+0x278>)
 80028de:	224c      	movs	r2, #76	; 0x4c
 80028e0:	fb00 f202 	mul.w	r2, r0, r2
 80028e4:	440a      	add	r2, r1
 80028e6:	320c      	adds	r2, #12
 80028e8:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 80028ea:	7a7b      	ldrb	r3, [r7, #9]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f8d7 3022 	ldr.w	r3, [r7, #34]	; 0x22
 80028f2:	4966      	ldr	r1, [pc, #408]	; (8002a8c <ShoreConfigRequest+0x278>)
 80028f4:	224c      	movs	r2, #76	; 0x4c
 80028f6:	fb00 f202 	mul.w	r2, r0, r2
 80028fa:	440a      	add	r2, r1
 80028fc:	3210      	adds	r2, #16
 80028fe:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 8002900:	7a7b      	ldrb	r3, [r7, #9]
 8002902:	4618      	mov	r0, r3
 8002904:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 8002908:	4960      	ldr	r1, [pc, #384]	; (8002a8c <ShoreConfigRequest+0x278>)
 800290a:	224c      	movs	r2, #76	; 0x4c
 800290c:	fb00 f202 	mul.w	r2, r0, r2
 8002910:	440a      	add	r2, r1
 8002912:	3214      	adds	r2, #20
 8002914:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 8002916:	7a7b      	ldrb	r3, [r7, #9]
 8002918:	4618      	mov	r0, r3
 800291a:	f8d7 302a 	ldr.w	r3, [r7, #42]	; 0x2a
 800291e:	495b      	ldr	r1, [pc, #364]	; (8002a8c <ShoreConfigRequest+0x278>)
 8002920:	224c      	movs	r2, #76	; 0x4c
 8002922:	fb00 f202 	mul.w	r2, r0, r2
 8002926:	440a      	add	r2, r1
 8002928:	3218      	adds	r2, #24
 800292a:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 800292c:	7a7b      	ldrb	r3, [r7, #9]
 800292e:	4618      	mov	r0, r3
 8002930:	f8d7 302e 	ldr.w	r3, [r7, #46]	; 0x2e
 8002934:	4955      	ldr	r1, [pc, #340]	; (8002a8c <ShoreConfigRequest+0x278>)
 8002936:	224c      	movs	r2, #76	; 0x4c
 8002938:	fb00 f202 	mul.w	r2, r0, r2
 800293c:	440a      	add	r2, r1
 800293e:	321c      	adds	r2, #28
 8002940:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 8002942:	7a7b      	ldrb	r3, [r7, #9]
 8002944:	4618      	mov	r0, r3
 8002946:	f8d7 3032 	ldr.w	r3, [r7, #50]	; 0x32
 800294a:	4950      	ldr	r1, [pc, #320]	; (8002a8c <ShoreConfigRequest+0x278>)
 800294c:	224c      	movs	r2, #76	; 0x4c
 800294e:	fb00 f202 	mul.w	r2, r0, r2
 8002952:	440a      	add	r2, r1
 8002954:	3228      	adds	r2, #40	; 0x28
 8002956:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 8002958:	7a7b      	ldrb	r3, [r7, #9]
 800295a:	4618      	mov	r0, r3
 800295c:	f8d7 3036 	ldr.w	r3, [r7, #54]	; 0x36
 8002960:	494a      	ldr	r1, [pc, #296]	; (8002a8c <ShoreConfigRequest+0x278>)
 8002962:	224c      	movs	r2, #76	; 0x4c
 8002964:	fb00 f202 	mul.w	r2, r0, r2
 8002968:	440a      	add	r2, r1
 800296a:	322c      	adds	r2, #44	; 0x2c
 800296c:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 800296e:	7a7b      	ldrb	r3, [r7, #9]
 8002970:	4618      	mov	r0, r3
 8002972:	f8d7 303a 	ldr.w	r3, [r7, #58]	; 0x3a
 8002976:	4945      	ldr	r1, [pc, #276]	; (8002a8c <ShoreConfigRequest+0x278>)
 8002978:	224c      	movs	r2, #76	; 0x4c
 800297a:	fb00 f202 	mul.w	r2, r0, r2
 800297e:	440a      	add	r2, r1
 8002980:	3230      	adds	r2, #48	; 0x30
 8002982:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 8002984:	7a7b      	ldrb	r3, [r7, #9]
 8002986:	4618      	mov	r0, r3
 8002988:	f8d7 303e 	ldr.w	r3, [r7, #62]	; 0x3e
 800298c:	493f      	ldr	r1, [pc, #252]	; (8002a8c <ShoreConfigRequest+0x278>)
 800298e:	224c      	movs	r2, #76	; 0x4c
 8002990:	fb00 f202 	mul.w	r2, r0, r2
 8002994:	440a      	add	r2, r1
 8002996:	3234      	adds	r2, #52	; 0x34
 8002998:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 800299a:	7a7b      	ldrb	r3, [r7, #9]
 800299c:	4618      	mov	r0, r3
 800299e:	f8d7 3042 	ldr.w	r3, [r7, #66]	; 0x42
 80029a2:	493a      	ldr	r1, [pc, #232]	; (8002a8c <ShoreConfigRequest+0x278>)
 80029a4:	224c      	movs	r2, #76	; 0x4c
 80029a6:	fb00 f202 	mul.w	r2, r0, r2
 80029aa:	440a      	add	r2, r1
 80029ac:	3238      	adds	r2, #56	; 0x38
 80029ae:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 80029b0:	7a7b      	ldrb	r3, [r7, #9]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 80029b8:	4934      	ldr	r1, [pc, #208]	; (8002a8c <ShoreConfigRequest+0x278>)
 80029ba:	224c      	movs	r2, #76	; 0x4c
 80029bc:	fb00 f202 	mul.w	r2, r0, r2
 80029c0:	440a      	add	r2, r1
 80029c2:	323c      	adds	r2, #60	; 0x3c
 80029c4:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 80029c6:	7a7b      	ldrb	r3, [r7, #9]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f8d7 304a 	ldr.w	r3, [r7, #74]	; 0x4a
 80029ce:	492f      	ldr	r1, [pc, #188]	; (8002a8c <ShoreConfigRequest+0x278>)
 80029d0:	224c      	movs	r2, #76	; 0x4c
 80029d2:	fb00 f202 	mul.w	r2, r0, r2
 80029d6:	440a      	add	r2, r1
 80029d8:	3220      	adds	r2, #32
 80029da:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 80029dc:	7a7b      	ldrb	r3, [r7, #9]
 80029de:	4618      	mov	r0, r3
 80029e0:	f8d7 304e 	ldr.w	r3, [r7, #78]	; 0x4e
 80029e4:	4929      	ldr	r1, [pc, #164]	; (8002a8c <ShoreConfigRequest+0x278>)
 80029e6:	224c      	movs	r2, #76	; 0x4c
 80029e8:	fb00 f202 	mul.w	r2, r0, r2
 80029ec:	440a      	add	r2, r1
 80029ee:	3224      	adds	r2, #36	; 0x24
 80029f0:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 80029f2:	7a7b      	ldrb	r3, [r7, #9]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f8d7 3052 	ldr.w	r3, [r7, #82]	; 0x52
 80029fa:	4924      	ldr	r1, [pc, #144]	; (8002a8c <ShoreConfigRequest+0x278>)
 80029fc:	224c      	movs	r2, #76	; 0x4c
 80029fe:	fb00 f202 	mul.w	r2, r0, r2
 8002a02:	440a      	add	r2, r1
 8002a04:	3244      	adds	r2, #68	; 0x44
 8002a06:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 8002a08:	7a7b      	ldrb	r3, [r7, #9]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f8d7 3056 	ldr.w	r3, [r7, #86]	; 0x56
 8002a10:	491e      	ldr	r1, [pc, #120]	; (8002a8c <ShoreConfigRequest+0x278>)
 8002a12:	224c      	movs	r2, #76	; 0x4c
 8002a14:	fb00 f202 	mul.w	r2, r0, r2
 8002a18:	440a      	add	r2, r1
 8002a1a:	3248      	adds	r2, #72	; 0x48
 8002a1c:	6013      	str	r3, [r2, #0]

		if(rState.contourSelected != req.contour) {
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <ShoreConfigRequest+0x27c>)
 8002a20:	785a      	ldrb	r2, [r3, #1]
 8002a22:	7a7b      	ldrb	r3, [r7, #9]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d01c      	beq.n	8002a62 <ShoreConfigRequest+0x24e>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a2e:	e00d      	b.n	8002a4c <ShoreConfigRequest+0x238>
				rStabConstants[i].enable = false;
 8002a30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a34:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <ShoreConfigRequest+0x278>)
 8002a36:	214c      	movs	r1, #76	; 0x4c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a46:	3301      	adds	r3, #1
 8002a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d9ed      	bls.n	8002a30 <ShoreConfigRequest+0x21c>
			}
			rState.contourSelected = req.contour;
 8002a54:	7a7a      	ldrb	r2, [r7, #9]
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <ShoreConfigRequest+0x27c>)
 8002a58:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 8002a5a:	7a7b      	ldrb	r3, [r7, #9]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 f83d 	bl	8004adc <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 8002a62:	f002 fdff 	bl	8005664 <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <ShoreConfigRequest+0x280>)
 8002a68:	895b      	ldrh	r3, [r3, #10]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <ShoreConfigRequest+0x280>)
 8002a70:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002a72:	e004      	b.n	8002a7e <ShoreConfigRequest+0x26a>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <ShoreConfigRequest+0x280>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <ShoreConfigRequest+0x280>)
 8002a7c:	60d3      	str	r3, [r2, #12]
}
 8002a7e:	bf00      	nop
 8002a80:	3760      	adds	r7, #96	; 0x60
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20001b90 	.word	0x20001b90
 8002a8c:	20001be8 	.word	0x20001be8
 8002a90:	20001a78 	.word	0x20001a78
 8002a94:	2000018c 	.word	0x2000018c

08002a98 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 8002a98:	b5b0      	push	{r4, r5, r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 8002aa0:	2111      	movs	r1, #17
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe ff79 	bl	800199a <IsCrc16ChecksummCorrect>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 809a 	beq.w	8002be4 <ShoreDirectRequest+0x14c>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f107 040c 	add.w	r4, r7, #12
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	6828      	ldr	r0, [r5, #0]
 8002aba:	6869      	ldr	r1, [r5, #4]
 8002abc:	68aa      	ldr	r2, [r5, #8]
 8002abe:	68eb      	ldr	r3, [r5, #12]
 8002ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac2:	7c2b      	ldrb	r3, [r5, #16]
 8002ac4:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	e00a      	b.n	8002ae2 <ShoreDirectRequest+0x4a>
			rStabConstants[i].enable = false;
 8002acc:	7ffb      	ldrb	r3, [r7, #31]
 8002ace:	4a4a      	ldr	r2, [pc, #296]	; (8002bf8 <ShoreDirectRequest+0x160>)
 8002ad0:	214c      	movs	r1, #76	; 0x4c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	77fb      	strb	r3, [r7, #31]
 8002ae2:	7ffb      	ldrb	r3, [r7, #31]
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d9f1      	bls.n	8002acc <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002ae8:	2300      	movs	r3, #0
 8002aea:	77bb      	strb	r3, [r7, #30]
 8002aec:	e070      	b.n	8002bd0 <ShoreDirectRequest+0x138>
			if(i != req.number) {
 8002aee:	7b7b      	ldrb	r3, [r7, #13]
 8002af0:	7fba      	ldrb	r2, [r7, #30]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d00a      	beq.n	8002b0c <ShoreDirectRequest+0x74>
				rThrusters[i].desiredSpeed = 0;
 8002af6:	7fba      	ldrb	r2, [r7, #30]
 8002af8:	4940      	ldr	r1, [pc, #256]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	3302      	adds	r3, #2
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e05e      	b.n	8002bca <ShoreDirectRequest+0x132>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 8002b0c:	7b7b      	ldrb	r3, [r7, #13]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002b14:	4a39      	ldr	r2, [pc, #228]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b16:	460b      	mov	r3, r1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	440b      	add	r3, r1
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3302      	adds	r3, #2
 8002b22:	4602      	mov	r2, r0
 8002b24:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 8002b26:	7b7b      	ldrb	r3, [r7, #13]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	7bb8      	ldrb	r0, [r7, #14]
 8002b2c:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b2e:	460b      	mov	r3, r1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	440b      	add	r3, r1
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	4602      	mov	r2, r0
 8002b3a:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 8002b3c:	7b7b      	ldrb	r3, [r7, #13]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f8d7 2011 	ldr.w	r2, [r7, #17]
 8002b44:	4613      	mov	r3, r2
 8002b46:	461a      	mov	r2, r3
 8002b48:	492c      	ldr	r1, [pc, #176]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4403      	add	r3, r0
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	330c      	adds	r3, #12
 8002b56:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002b58:	7b7b      	ldrb	r3, [r7, #13]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f8d7 2015 	ldr.w	r2, [r7, #21]
 8002b60:	4613      	mov	r3, r2
 8002b62:	461a      	mov	r2, r3
 8002b64:	4925      	ldr	r1, [pc, #148]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b66:	4603      	mov	r3, r0
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4403      	add	r3, r0
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	3310      	adds	r3, #16
 8002b72:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 8002b74:	7b7b      	ldrb	r3, [r7, #13]
 8002b76:	4619      	mov	r1, r3
 8002b78:	f997 0019 	ldrsb.w	r0, [r7, #25]
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b7e:	460b      	mov	r3, r1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	440b      	add	r3, r1
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	3314      	adds	r3, #20
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 8002b8e:	7b7b      	ldrb	r3, [r7, #13]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f997 001a 	ldrsb.w	r0, [r7, #26]
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b98:	460b      	mov	r3, r1
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	440b      	add	r3, r1
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3315      	adds	r3, #21
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 8002ba8:	7c3b      	ldrb	r3, [r7, #16]
 8002baa:	7b7a      	ldrb	r2, [r7, #13]
 8002bac:	4611      	mov	r1, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2d8      	uxtb	r0, r3
 8002bb8:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002bba:	460b      	mov	r3, r1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	440b      	add	r3, r1
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3316      	adds	r3, #22
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002bca:	7fbb      	ldrb	r3, [r7, #30]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	77bb      	strb	r3, [r7, #30]
 8002bd0:	7fbb      	ldrb	r3, [r7, #30]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d98b      	bls.n	8002aee <ShoreDirectRequest+0x56>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <ShoreDirectRequest+0x168>)
 8002bd8:	895b      	ldrh	r3, [r3, #10]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <ShoreDirectRequest+0x168>)
 8002be0:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002be2:	e004      	b.n	8002bee <ShoreDirectRequest+0x156>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <ShoreDirectRequest+0x168>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	3301      	adds	r3, #1
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <ShoreDirectRequest+0x168>)
 8002bec:	60d3      	str	r3, [r2, #12]
}
 8002bee:	bf00      	nop
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20001be8 	.word	0x20001be8
 8002bfc:	20001a84 	.word	0x20001a84
 8002c00:	2000018c 	.word	0x2000018c

08002c04 <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <ShoreResponse+0x48>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
    res.pitch = rSensors.pitch;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <ShoreResponse+0x48>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	613b      	str	r3, [r7, #16]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <ShoreResponse+0x48>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	617b      	str	r3, [r7, #20]

    res.pressure = rSensors.pressure;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <ShoreResponse+0x48>)
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	61bb      	str	r3, [r7, #24]
    res.dropper = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	773b      	strb	r3, [r7, #28]
    res.grabber = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	777b      	strb	r3, [r7, #29]
   // res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // TODO do this properly pls
   // res.dev_errors = 0;//robot->device.errors;
  //  res.pc_errors = rComputer.errors;

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH-2);
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	2212      	movs	r2, #18
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f00d fcdb 	bl	80105f0 <memcpy>

    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8002c3a:	2114      	movs	r1, #20
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fe fecc 	bl	80019da <AddCrc16Checksumm>
}
 8002c42:	bf00      	nop
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20001b14 	.word	0x20001b14

08002c50 <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b09c      	sub	sp, #112	; 0x70
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 8002c58:	2355      	movs	r3, #85	; 0x55
 8002c5a:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 8002c5c:	4b74      	ldr	r3, [pc, #464]	; (8002e30 <ShoreConfigResponse+0x1e0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 8002c64:	4b72      	ldr	r3, [pc, #456]	; (8002e30 <ShoreConfigResponse+0x1e0>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 8002c6c:	4b70      	ldr	r3, [pc, #448]	; (8002e30 <ShoreConfigResponse+0x1e0>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 8002c74:	4b6e      	ldr	r3, [pc, #440]	; (8002e30 <ShoreConfigResponse+0x1e0>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 8002c7c:	4b6c      	ldr	r3, [pc, #432]	; (8002e30 <ShoreConfigResponse+0x1e0>)
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <ShoreConfigResponse+0x1e0>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 8002c8c:	4b68      	ldr	r3, [pc, #416]	; (8002e30 <ShoreConfigResponse+0x1e0>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 8002c94:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <ShoreConfigResponse+0x1e0>)
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 8002ca4:	4b63      	ldr	r3, [pc, #396]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4a63      	ldr	r2, [pc, #396]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002cac:	2358      	movs	r3, #88	; 0x58
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 8002cbc:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4a5d      	ldr	r2, [pc, #372]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002cc4:	2358      	movs	r3, #88	; 0x58
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3304      	adds	r3, #4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 8002cd6:	4b57      	ldr	r3, [pc, #348]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4a56      	ldr	r2, [pc, #344]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002cde:	2358      	movs	r3, #88	; 0x58
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 8002cf0:	4b50      	ldr	r3, [pc, #320]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002cf2:	785b      	ldrb	r3, [r3, #1]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4a50      	ldr	r2, [pc, #320]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002cf8:	2358      	movs	r3, #88	; 0x58
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	331c      	adds	r3, #28
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 8002d08:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4a4a      	ldr	r2, [pc, #296]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002d10:	2358      	movs	r3, #88	; 0x58
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3320      	adds	r3, #32
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 8002d20:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002d22:	785b      	ldrb	r3, [r3, #1]
 8002d24:	4619      	mov	r1, r3
 8002d26:	4a44      	ldr	r2, [pc, #272]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002d28:	2358      	movs	r3, #88	; 0x58
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3324      	adds	r3, #36	; 0x24
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 8002d38:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4a3e      	ldr	r2, [pc, #248]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002d40:	2358      	movs	r3, #88	; 0x58
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3328      	adds	r3, #40	; 0x28
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 8002d50:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	4619      	mov	r1, r3
 8002d56:	4a38      	ldr	r2, [pc, #224]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002d58:	2358      	movs	r3, #88	; 0x58
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	332c      	adds	r3, #44	; 0x2c
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 8002d68:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002d6a:	785b      	ldrb	r3, [r3, #1]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4a32      	ldr	r2, [pc, #200]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002d70:	2358      	movs	r3, #88	; 0x58
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3330      	adds	r3, #48	; 0x30
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 8002d80:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002d82:	785b      	ldrb	r3, [r3, #1]
 8002d84:	4619      	mov	r1, r3
 8002d86:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002d88:	2358      	movs	r3, #88	; 0x58
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3338      	adds	r3, #56	; 0x38
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 8002d98:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002da0:	2358      	movs	r3, #88	; 0x58
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	333c      	adds	r3, #60	; 0x3c
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	4619      	mov	r1, r3
 8002db6:	4a20      	ldr	r2, [pc, #128]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002db8:	2358      	movs	r3, #88	; 0x58
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3340      	adds	r3, #64	; 0x40
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002dd0:	2358      	movs	r3, #88	; 0x58
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3334      	adds	r3, #52	; 0x34
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	4619      	mov	r1, r3
 8002de6:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002de8:	2358      	movs	r3, #88	; 0x58
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	334c      	adds	r3, #76	; 0x4c
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <ShoreConfigResponse+0x1e4>)
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <ShoreConfigResponse+0x1e8>)
 8002e00:	2358      	movs	r3, #88	; 0x58
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3350      	adds	r3, #80	; 0x50
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	2263      	movs	r2, #99	; 0x63
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f00d fbe8 	bl	80105f0 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 8002e20:	2163      	movs	r1, #99	; 0x63
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fdd9 	bl	80019da <AddCrc16Checksumm>
}
 8002e28:	bf00      	nop
 8002e2a:	3770      	adds	r7, #112	; 0x70
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20001b14 	.word	0x20001b14
 8002e34:	20001a78 	.word	0x20001a78
 8002e38:	20001db0 	.word	0x20001db0

08002e3c <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 8002e44:	23ff      	movs	r3, #255	; 0xff
 8002e46:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 8002e48:	23aa      	movs	r3, #170	; 0xaa
 8002e4a:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 8002e4c:	23bb      	movs	r3, #187	; 0xbb
 8002e4e:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f107 0308 	add.w	r3, r7, #8
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	6010      	str	r0, [r2, #0]
 8002e5c:	889b      	ldrh	r3, [r3, #4]
 8002e5e:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e60:	2106      	movs	r1, #6
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe fdb9 	bl	80019da <AddCrc16Checksumm>
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <ImuReceive>:
	}
	return 0;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	 // Check sync byte
	 if ((ReceiveBuf[0] != 0xFA)||(ReceiveBuf[1] != 0x01)||(ReceiveBuf[2] != 0x28)||(ReceiveBuf[3] != 0x00))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2bfa      	cmp	r3, #250	; 0xfa
 8002e7e:	d10e      	bne.n	8002e9e <ImuReceive+0x2e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3301      	adds	r3, #1
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d109      	bne.n	8002e9e <ImuReceive+0x2e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b28      	cmp	r3, #40	; 0x28
 8002e92:	d104      	bne.n	8002e9e <ImuReceive+0x2e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3303      	adds	r3, #3
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <ImuReceive+0x3e>
	 {
		 ++uartBus[IMU_UART].brokenRxCounter;
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <ImuReceive+0xdc>)
 8002ea0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <ImuReceive+0xdc>)
 8002ea8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
		 return;
 8002eac:	e04b      	b.n	8002f46 <ImuReceive+0xd6>
	 }

	 rSensors.crc = (ReceiveBuf[28] << 8) | ReceiveBuf[29];
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	331c      	adds	r3, #28
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	b21a      	sxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	331d      	adds	r3, #29
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <ImuReceive+0xe0>)
 8002ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	 //crc length= IMU_RESPONSE_LENGTH - 1 sync byte - 2 bytes crc
	 uint16_t calculated_crc = calculateCRC(ReceiveBuf + 1, IMU_RESPONSE_LENGTH - 1 - 2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	211b      	movs	r1, #27
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f83e 	bl	8002f54 <calculateCRC>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	81fb      	strh	r3, [r7, #14]
//		 return;
//	 }



  	  memcpy(&rSensors.yaw, ReceiveBuf + 4, sizeof(rSensors.yaw));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <ImuReceive+0xe0>)
 8002ee6:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 8, sizeof(rSensors.pitch));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3308      	adds	r3, #8
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <ImuReceive+0xe0>)
 8002ef2:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 12, sizeof(rSensors.roll));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <ImuReceive+0xe0>)
 8002efe:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.rollSpeed, ReceiveBuf + 16, sizeof(rSensors.rollSpeed));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3310      	adds	r3, #16
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <ImuReceive+0xe0>)
 8002f0a:	61da      	str	r2, [r3, #28]
  	  memcpy(&rSensors.pitchSpeed, ReceiveBuf + 20, sizeof(rSensors.pitchSpeed));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3314      	adds	r3, #20
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <ImuReceive+0xe0>)
 8002f16:	621a      	str	r2, [r3, #32]
  	  memcpy(&rSensors.yawSpeed, ReceiveBuf + 24, sizeof(rSensors.yawSpeed));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3318      	adds	r3, #24
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <ImuReceive+0xe0>)
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24
//
//  	  memcpy(&rSensors.accelX, ReceiveBuf + 28, sizeof(rSensors.accelX));
//  	  memcpy(&rSensors.accelY, ReceiveBuf + 32, sizeof(rSensors.accelY));
//  	  memcpy(&rSensors.accelZ, ReceiveBuf + 36, sizeof(rSensors.accelZ));

    rSensors.LastTick = xTaskGetTickCount();
 8002f24:	f00b fc02 	bl	800e72c <xTaskGetTickCount>
 8002f28:	ee07 0a90 	vmov	s15, r0
 8002f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <ImuReceive+0xe0>)
 8002f32:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <ImuReceive+0xdc>)
 8002f38:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b02      	ldr	r3, [pc, #8]	; (8002f4c <ImuReceive+0xdc>)
 8002f42:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
}
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	2000018c 	.word	0x2000018c
 8002f50:	20001b14 	.word	0x20001b14

08002f54 <calculateCRC>:

unsigned short calculateCRC(unsigned char data[], unsigned int length) {
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
    unsigned int i;
    unsigned short crc = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	e030      	b.n	8002fca <calculateCRC+0x76>
        crc = (unsigned char)(crc >> 8) | (crc << 8);
 8002f68:	897b      	ldrh	r3, [r7, #10]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	897b      	ldrh	r3, [r7, #10]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	b21b      	sxth	r3, r3
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	b21b      	sxth	r3, r3
 8002f7c:	817b      	strh	r3, [r7, #10]
        crc ^= data[i];
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	4053      	eors	r3, r2
 8002f8c:	817b      	strh	r3, [r7, #10]
        crc ^= (unsigned char)(crc & 0xff) >> 4;
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	4053      	eors	r3, r2
 8002f9c:	817b      	strh	r3, [r7, #10]
        crc ^= crc << 12;
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	031b      	lsls	r3, r3, #12
 8002fa2:	b21a      	sxth	r2, r3
 8002fa4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fa8:	4053      	eors	r3, r2
 8002faa:	b21b      	sxth	r3, r3
 8002fac:	817b      	strh	r3, [r7, #10]
        crc ^= (crc & 0x00ff) << 5;
 8002fae:	897b      	ldrh	r3, [r7, #10]
 8002fb0:	015b      	lsls	r3, r3, #5
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
 8002fb8:	b21a      	sxth	r2, r3
 8002fba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fbe:	4053      	eors	r3, r2
 8002fc0:	b21b      	sxth	r3, r3
 8002fc2:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d3ca      	bcc.n	8002f68 <calculateCRC+0x14>
    }
    return crc;
 8002fd2:	897b      	ldrh	r3, [r7, #10]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <MX_DMA_Init+0x68>)
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <MX_DMA_Init+0x68>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6153      	str	r3, [r2, #20]
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <MX_DMA_Init+0x68>)
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2105      	movs	r1, #5
 8003002:	200e      	movs	r0, #14
 8003004:	f003 f868 	bl	80060d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003008:	200e      	movs	r0, #14
 800300a:	f003 f881 	bl	8006110 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2105      	movs	r1, #5
 8003012:	200f      	movs	r0, #15
 8003014:	f003 f860 	bl	80060d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003018:	200f      	movs	r0, #15
 800301a:	f003 f879 	bl	8006110 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	2105      	movs	r1, #5
 8003022:	2010      	movs	r0, #16
 8003024:	f003 f858 	bl	80060d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003028:	2010      	movs	r0, #16
 800302a:	f003 f871 	bl	8006110 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2105      	movs	r1, #5
 8003032:	2011      	movs	r0, #17
 8003034:	f003 f850 	bl	80060d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003038:	2011      	movs	r0, #17
 800303a:	f003 f869 	bl	8006110 <HAL_NVIC_EnableIRQ>

}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000

0800304c <flashReadSettings>:
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <flashReadSettings+0x44>)
 8003056:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 800305c:	2300      	movs	r3, #0
 800305e:	81fb      	strh	r3, [r7, #14]
 8003060:	e00c      	b.n	800307c <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	601a      	str	r2, [r3, #0]
		source_addr++;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3304      	adds	r3, #4
 800306e:	617b      	str	r3, [r7, #20]
		dest_addr++;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3304      	adds	r3, #4
 8003074:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003076:	89fb      	ldrh	r3, [r7, #14]
 8003078:	3301      	adds	r3, #1
 800307a:	81fb      	strh	r3, [r7, #14]
 800307c:	89fb      	ldrh	r3, [r7, #14]
 800307e:	2b80      	cmp	r3, #128	; 0x80
 8003080:	d9ef      	bls.n	8003062 <flashReadSettings+0x16>
	}
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	0803f800 	.word	0x0803f800

08003094 <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 8003094:	b5b0      	push	{r4, r5, r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 800309c:	f003 fafc 	bl	8006698 <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_PAGES; // erase only 1 page
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
	erase_conf.PageAddress = (uint32_t)CONFIG_PAGE_ADDR;
 80030a4:	4b17      	ldr	r3, [pc, #92]	; (8003104 <flashWriteSettings+0x70>)
 80030a6:	617b      	str	r3, [r7, #20]
	erase_conf.NbPages = 1;
 80030a8:	2301      	movs	r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 80030ac:	f107 020c 	add.w	r2, r7, #12
 80030b0:	f107 0310 	add.w	r3, r7, #16
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fbb2 	bl	8006820 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <flashWriteSettings+0x70>)
 80030c2:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030c4:	2300      	movs	r3, #0
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e013      	b.n	80030f2 <flashWriteSettings+0x5e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 80030ca:	6a39      	ldr	r1, [r7, #32]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2200      	movs	r2, #0
 80030d2:	461c      	mov	r4, r3
 80030d4:	4615      	mov	r5, r2
 80030d6:	4622      	mov	r2, r4
 80030d8:	462b      	mov	r3, r5
 80030da:	2002      	movs	r0, #2
 80030dc:	f003 fa6c 	bl	80065b8 <HAL_FLASH_Program>
		source_addr++;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	3304      	adds	r3, #4
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
		dest_addr++;
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	3304      	adds	r3, #4
 80030ea:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030ec:	7ffb      	ldrb	r3, [r7, #31]
 80030ee:	3301      	adds	r3, #1
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d9e8      	bls.n	80030ca <flashWriteSettings+0x36>
	}

	HAL_FLASH_Lock();
 80030f8:	f003 faf4 	bl	80066e4 <HAL_FLASH_Lock>
}
 80030fc:	bf00      	nop
 80030fe:	3728      	adds	r7, #40	; 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bdb0      	pop	{r4, r5, r7, pc}
 8003104:	0803f800 	.word	0x0803f800

08003108 <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	22aa      	movs	r2, #170	; 0xaa
 8003114:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	e143      	b.n	80033a4 <flashFillStructure+0x29c>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	49a6      	ldr	r1, [pc, #664]	; (80033bc <flashFillStructure+0x2b4>)
 8003122:	204c      	movs	r0, #76	; 0x4c
 8003124:	fb00 f303 	mul.w	r3, r0, r3
 8003128:	440b      	add	r3, r1
 800312a:	3304      	adds	r3, #4
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3301      	adds	r3, #1
 800313c:	4602      	mov	r2, r0
 800313e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	499d      	ldr	r1, [pc, #628]	; (80033bc <flashFillStructure+0x2b4>)
 8003146:	204c      	movs	r0, #76	; 0x4c
 8003148:	fb00 f303 	mul.w	r3, r0, r3
 800314c:	440b      	add	r3, r1
 800314e:	3308      	adds	r3, #8
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3305      	adds	r3, #5
 8003160:	4602      	mov	r2, r0
 8003162:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	4994      	ldr	r1, [pc, #592]	; (80033bc <flashFillStructure+0x2b4>)
 800316a:	204c      	movs	r0, #76	; 0x4c
 800316c:	fb00 f303 	mul.w	r3, r0, r3
 8003170:	440b      	add	r3, r1
 8003172:	330c      	adds	r3, #12
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3308      	adds	r3, #8
 8003184:	3301      	adds	r3, #1
 8003186:	4602      	mov	r2, r0
 8003188:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	498b      	ldr	r1, [pc, #556]	; (80033bc <flashFillStructure+0x2b4>)
 8003190:	204c      	movs	r0, #76	; 0x4c
 8003192:	fb00 f303 	mul.w	r3, r0, r3
 8003196:	440b      	add	r3, r1
 8003198:	3310      	adds	r3, #16
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3308      	adds	r3, #8
 80031aa:	3305      	adds	r3, #5
 80031ac:	4602      	mov	r2, r0
 80031ae:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	4981      	ldr	r1, [pc, #516]	; (80033bc <flashFillStructure+0x2b4>)
 80031b6:	204c      	movs	r0, #76	; 0x4c
 80031b8:	fb00 f303 	mul.w	r3, r0, r3
 80031bc:	440b      	add	r3, r1
 80031be:	3318      	adds	r3, #24
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	3310      	adds	r3, #16
 80031d0:	3301      	adds	r3, #1
 80031d2:	4602      	mov	r2, r0
 80031d4:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	4978      	ldr	r1, [pc, #480]	; (80033bc <flashFillStructure+0x2b4>)
 80031dc:	204c      	movs	r0, #76	; 0x4c
 80031de:	fb00 f303 	mul.w	r3, r0, r3
 80031e2:	440b      	add	r3, r1
 80031e4:	3314      	adds	r3, #20
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3310      	adds	r3, #16
 80031f6:	3305      	adds	r3, #5
 80031f8:	4602      	mov	r2, r0
 80031fa:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	496e      	ldr	r1, [pc, #440]	; (80033bc <flashFillStructure+0x2b4>)
 8003202:	204c      	movs	r0, #76	; 0x4c
 8003204:	fb00 f303 	mul.w	r3, r0, r3
 8003208:	440b      	add	r3, r1
 800320a:	331c      	adds	r3, #28
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3318      	adds	r3, #24
 800321c:	3301      	adds	r3, #1
 800321e:	4602      	mov	r2, r0
 8003220:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	4965      	ldr	r1, [pc, #404]	; (80033bc <flashFillStructure+0x2b4>)
 8003228:	204c      	movs	r0, #76	; 0x4c
 800322a:	fb00 f303 	mul.w	r3, r0, r3
 800322e:	440b      	add	r3, r1
 8003230:	3328      	adds	r3, #40	; 0x28
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3318      	adds	r3, #24
 8003242:	3305      	adds	r3, #5
 8003244:	4602      	mov	r2, r0
 8003246:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	495b      	ldr	r1, [pc, #364]	; (80033bc <flashFillStructure+0x2b4>)
 800324e:	204c      	movs	r0, #76	; 0x4c
 8003250:	fb00 f303 	mul.w	r3, r0, r3
 8003254:	440b      	add	r3, r1
 8003256:	332c      	adds	r3, #44	; 0x2c
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3320      	adds	r3, #32
 8003268:	3301      	adds	r3, #1
 800326a:	4602      	mov	r2, r0
 800326c:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	4952      	ldr	r1, [pc, #328]	; (80033bc <flashFillStructure+0x2b4>)
 8003274:	204c      	movs	r0, #76	; 0x4c
 8003276:	fb00 f303 	mul.w	r3, r0, r3
 800327a:	440b      	add	r3, r1
 800327c:	3330      	adds	r3, #48	; 0x30
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3320      	adds	r3, #32
 800328e:	3305      	adds	r3, #5
 8003290:	4602      	mov	r2, r0
 8003292:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	4948      	ldr	r1, [pc, #288]	; (80033bc <flashFillStructure+0x2b4>)
 800329a:	204c      	movs	r0, #76	; 0x4c
 800329c:	fb00 f303 	mul.w	r3, r0, r3
 80032a0:	440b      	add	r3, r1
 80032a2:	3334      	adds	r3, #52	; 0x34
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	3328      	adds	r3, #40	; 0x28
 80032b4:	3301      	adds	r3, #1
 80032b6:	4602      	mov	r2, r0
 80032b8:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	493f      	ldr	r1, [pc, #252]	; (80033bc <flashFillStructure+0x2b4>)
 80032c0:	204c      	movs	r0, #76	; 0x4c
 80032c2:	fb00 f303 	mul.w	r3, r0, r3
 80032c6:	440b      	add	r3, r1
 80032c8:	3338      	adds	r3, #56	; 0x38
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	3328      	adds	r3, #40	; 0x28
 80032da:	3305      	adds	r3, #5
 80032dc:	4602      	mov	r2, r0
 80032de:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	4935      	ldr	r1, [pc, #212]	; (80033bc <flashFillStructure+0x2b4>)
 80032e6:	204c      	movs	r0, #76	; 0x4c
 80032e8:	fb00 f303 	mul.w	r3, r0, r3
 80032ec:	440b      	add	r3, r1
 80032ee:	333c      	adds	r3, #60	; 0x3c
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	3330      	adds	r3, #48	; 0x30
 8003300:	3301      	adds	r3, #1
 8003302:	4602      	mov	r2, r0
 8003304:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	7bfa      	ldrb	r2, [r7, #15]
 800330a:	492c      	ldr	r1, [pc, #176]	; (80033bc <flashFillStructure+0x2b4>)
 800330c:	204c      	movs	r0, #76	; 0x4c
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	440b      	add	r3, r1
 8003314:	3320      	adds	r3, #32
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3330      	adds	r3, #48	; 0x30
 8003326:	3305      	adds	r3, #5
 8003328:	4602      	mov	r2, r0
 800332a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	4922      	ldr	r1, [pc, #136]	; (80033bc <flashFillStructure+0x2b4>)
 8003332:	204c      	movs	r0, #76	; 0x4c
 8003334:	fb00 f303 	mul.w	r3, r0, r3
 8003338:	440b      	add	r3, r1
 800333a:	3324      	adds	r3, #36	; 0x24
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3338      	adds	r3, #56	; 0x38
 800334c:	3301      	adds	r3, #1
 800334e:	4602      	mov	r2, r0
 8003350:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	4919      	ldr	r1, [pc, #100]	; (80033bc <flashFillStructure+0x2b4>)
 8003358:	204c      	movs	r0, #76	; 0x4c
 800335a:	fb00 f303 	mul.w	r3, r0, r3
 800335e:	440b      	add	r3, r1
 8003360:	3344      	adds	r3, #68	; 0x44
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	3338      	adds	r3, #56	; 0x38
 8003372:	3305      	adds	r3, #5
 8003374:	4602      	mov	r2, r0
 8003376:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	490f      	ldr	r1, [pc, #60]	; (80033bc <flashFillStructure+0x2b4>)
 800337e:	204c      	movs	r0, #76	; 0x4c
 8003380:	fb00 f303 	mul.w	r3, r0, r3
 8003384:	440b      	add	r3, r1
 8003386:	3348      	adds	r3, #72	; 0x48
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3340      	adds	r3, #64	; 0x40
 8003398:	3301      	adds	r3, #1
 800339a:	4602      	mov	r2, r0
 800339c:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	3301      	adds	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	f67f aeb8 	bls.w	800311c <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20001be8 	.word	0x20001be8

080033c0 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e132      	b.n	8003634 <flashReadStructure+0x274>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	7bf9      	ldrb	r1, [r7, #15]
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4403      	add	r3, r0
 80033de:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80033e2:	489f      	ldr	r0, [pc, #636]	; (8003660 <flashReadStructure+0x2a0>)
 80033e4:	224c      	movs	r2, #76	; 0x4c
 80033e6:	fb01 f202 	mul.w	r2, r1, r2
 80033ea:	4402      	add	r2, r0
 80033ec:	3204      	adds	r2, #4
 80033ee:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	7bf9      	ldrb	r1, [r7, #15]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4403      	add	r3, r0
 8003400:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003404:	4896      	ldr	r0, [pc, #600]	; (8003660 <flashReadStructure+0x2a0>)
 8003406:	224c      	movs	r2, #76	; 0x4c
 8003408:	fb01 f202 	mul.w	r2, r1, r2
 800340c:	4402      	add	r2, r0
 800340e:	3208      	adds	r2, #8
 8003410:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	7bf9      	ldrb	r1, [r7, #15]
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4403      	add	r3, r0
 8003422:	3308      	adds	r3, #8
 8003424:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003428:	488d      	ldr	r0, [pc, #564]	; (8003660 <flashReadStructure+0x2a0>)
 800342a:	224c      	movs	r2, #76	; 0x4c
 800342c:	fb01 f202 	mul.w	r2, r1, r2
 8003430:	4402      	add	r2, r0
 8003432:	320c      	adds	r2, #12
 8003434:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	7bf9      	ldrb	r1, [r7, #15]
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4403      	add	r3, r0
 8003446:	3308      	adds	r3, #8
 8003448:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800344c:	4884      	ldr	r0, [pc, #528]	; (8003660 <flashReadStructure+0x2a0>)
 800344e:	224c      	movs	r2, #76	; 0x4c
 8003450:	fb01 f202 	mul.w	r2, r1, r2
 8003454:	4402      	add	r2, r0
 8003456:	3210      	adds	r2, #16
 8003458:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	7bf9      	ldrb	r1, [r7, #15]
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4403      	add	r3, r0
 800346a:	3310      	adds	r3, #16
 800346c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003470:	487b      	ldr	r0, [pc, #492]	; (8003660 <flashReadStructure+0x2a0>)
 8003472:	224c      	movs	r2, #76	; 0x4c
 8003474:	fb01 f202 	mul.w	r2, r1, r2
 8003478:	4402      	add	r2, r0
 800347a:	3218      	adds	r2, #24
 800347c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	7bf9      	ldrb	r1, [r7, #15]
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4403      	add	r3, r0
 800348e:	3310      	adds	r3, #16
 8003490:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003494:	4872      	ldr	r0, [pc, #456]	; (8003660 <flashReadStructure+0x2a0>)
 8003496:	224c      	movs	r2, #76	; 0x4c
 8003498:	fb01 f202 	mul.w	r2, r1, r2
 800349c:	4402      	add	r2, r0
 800349e:	3214      	adds	r2, #20
 80034a0:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	7bf9      	ldrb	r1, [r7, #15]
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4403      	add	r3, r0
 80034b2:	3318      	adds	r3, #24
 80034b4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80034b8:	4869      	ldr	r0, [pc, #420]	; (8003660 <flashReadStructure+0x2a0>)
 80034ba:	224c      	movs	r2, #76	; 0x4c
 80034bc:	fb01 f202 	mul.w	r2, r1, r2
 80034c0:	4402      	add	r2, r0
 80034c2:	321c      	adds	r2, #28
 80034c4:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	7bf9      	ldrb	r1, [r7, #15]
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4403      	add	r3, r0
 80034d6:	3318      	adds	r3, #24
 80034d8:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80034dc:	4860      	ldr	r0, [pc, #384]	; (8003660 <flashReadStructure+0x2a0>)
 80034de:	224c      	movs	r2, #76	; 0x4c
 80034e0:	fb01 f202 	mul.w	r2, r1, r2
 80034e4:	4402      	add	r2, r0
 80034e6:	3228      	adds	r2, #40	; 0x28
 80034e8:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	7bf9      	ldrb	r1, [r7, #15]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4403      	add	r3, r0
 80034fa:	3320      	adds	r3, #32
 80034fc:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003500:	4857      	ldr	r0, [pc, #348]	; (8003660 <flashReadStructure+0x2a0>)
 8003502:	224c      	movs	r2, #76	; 0x4c
 8003504:	fb01 f202 	mul.w	r2, r1, r2
 8003508:	4402      	add	r2, r0
 800350a:	322c      	adds	r2, #44	; 0x2c
 800350c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	7bf9      	ldrb	r1, [r7, #15]
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4403      	add	r3, r0
 800351e:	3320      	adds	r3, #32
 8003520:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003524:	484e      	ldr	r0, [pc, #312]	; (8003660 <flashReadStructure+0x2a0>)
 8003526:	224c      	movs	r2, #76	; 0x4c
 8003528:	fb01 f202 	mul.w	r2, r1, r2
 800352c:	4402      	add	r2, r0
 800352e:	3230      	adds	r2, #48	; 0x30
 8003530:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	7bf9      	ldrb	r1, [r7, #15]
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4403      	add	r3, r0
 8003542:	3328      	adds	r3, #40	; 0x28
 8003544:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003548:	4845      	ldr	r0, [pc, #276]	; (8003660 <flashReadStructure+0x2a0>)
 800354a:	224c      	movs	r2, #76	; 0x4c
 800354c:	fb01 f202 	mul.w	r2, r1, r2
 8003550:	4402      	add	r2, r0
 8003552:	3234      	adds	r2, #52	; 0x34
 8003554:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	7bf9      	ldrb	r1, [r7, #15]
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4403      	add	r3, r0
 8003566:	3328      	adds	r3, #40	; 0x28
 8003568:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800356c:	483c      	ldr	r0, [pc, #240]	; (8003660 <flashReadStructure+0x2a0>)
 800356e:	224c      	movs	r2, #76	; 0x4c
 8003570:	fb01 f202 	mul.w	r2, r1, r2
 8003574:	4402      	add	r2, r0
 8003576:	3238      	adds	r2, #56	; 0x38
 8003578:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	7bf9      	ldrb	r1, [r7, #15]
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4403      	add	r3, r0
 800358a:	3330      	adds	r3, #48	; 0x30
 800358c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003590:	4833      	ldr	r0, [pc, #204]	; (8003660 <flashReadStructure+0x2a0>)
 8003592:	224c      	movs	r2, #76	; 0x4c
 8003594:	fb01 f202 	mul.w	r2, r1, r2
 8003598:	4402      	add	r2, r0
 800359a:	323c      	adds	r2, #60	; 0x3c
 800359c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	7bf9      	ldrb	r1, [r7, #15]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4403      	add	r3, r0
 80035ae:	3330      	adds	r3, #48	; 0x30
 80035b0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80035b4:	482a      	ldr	r0, [pc, #168]	; (8003660 <flashReadStructure+0x2a0>)
 80035b6:	224c      	movs	r2, #76	; 0x4c
 80035b8:	fb01 f202 	mul.w	r2, r1, r2
 80035bc:	4402      	add	r2, r0
 80035be:	3220      	adds	r2, #32
 80035c0:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	7bf9      	ldrb	r1, [r7, #15]
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4403      	add	r3, r0
 80035d2:	3338      	adds	r3, #56	; 0x38
 80035d4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80035d8:	4821      	ldr	r0, [pc, #132]	; (8003660 <flashReadStructure+0x2a0>)
 80035da:	224c      	movs	r2, #76	; 0x4c
 80035dc:	fb01 f202 	mul.w	r2, r1, r2
 80035e0:	4402      	add	r2, r0
 80035e2:	3224      	adds	r2, #36	; 0x24
 80035e4:	6013      	str	r3, [r2, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	7bf9      	ldrb	r1, [r7, #15]
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4403      	add	r3, r0
 80035f6:	3338      	adds	r3, #56	; 0x38
 80035f8:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80035fc:	4818      	ldr	r0, [pc, #96]	; (8003660 <flashReadStructure+0x2a0>)
 80035fe:	224c      	movs	r2, #76	; 0x4c
 8003600:	fb01 f202 	mul.w	r2, r1, r2
 8003604:	4402      	add	r2, r0
 8003606:	3244      	adds	r2, #68	; 0x44
 8003608:	6013      	str	r3, [r2, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	7bf9      	ldrb	r1, [r7, #15]
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4403      	add	r3, r0
 800361a:	3340      	adds	r3, #64	; 0x40
 800361c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003620:	480f      	ldr	r0, [pc, #60]	; (8003660 <flashReadStructure+0x2a0>)
 8003622:	224c      	movs	r2, #76	; 0x4c
 8003624:	fb01 f202 	mul.w	r2, r1, r2
 8003628:	4402      	add	r2, r0
 800362a:	3248      	adds	r2, #72	; 0x48
 800362c:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	3301      	adds	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b05      	cmp	r3, #5
 8003638:	f67f aec9 	bls.w	80033ce <flashReadStructure+0xe>
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2baa      	cmp	r3, #170	; 0xaa
 8003642:	d103      	bne.n	800364c <flashReadStructure+0x28c>
		rState.flash = true;
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <flashReadStructure+0x2a4>)
 8003646:	2201      	movs	r2, #1
 8003648:	709a      	strb	r2, [r3, #2]
	}
	else {
		rState.flash = false;
	}
}
 800364a:	e002      	b.n	8003652 <flashReadStructure+0x292>
		rState.flash = false;
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <flashReadStructure+0x2a4>)
 800364e:	2200      	movs	r2, #0
 8003650:	709a      	strb	r2, [r3, #2]
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20001be8 	.word	0x20001be8
 8003664:	20001a78 	.word	0x20001a78

08003668 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a07      	ldr	r2, [pc, #28]	; (8003694 <vApplicationGetIdleTaskMemory+0x2c>)
 8003678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4a06      	ldr	r2, [pc, #24]	; (8003698 <vApplicationGetIdleTaskMemory+0x30>)
 800367e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20001318 	.word	0x20001318
 8003698:	200013c8 	.word	0x200013c8

0800369c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80036ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <vApplicationGetTimerTaskMemory+0x30>)
 80036b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ba:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	200015c8 	.word	0x200015c8
 80036cc:	20001678 	.word	0x20001678

080036d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80036d0:	b5b0      	push	{r4, r5, r7, lr}
 80036d2:	b0b4      	sub	sp, #208	; 0xd0
 80036d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 80036d6:	f7fe fb55 	bl	8001d84 <uartBusesInit>
    i2cBusesInit();
 80036da:	f7fe fc51 	bl	8001f80 <i2cBusesInit>
    variableInit();
 80036de:	f7fe faa7 	bl	8001c30 <variableInit>
    stabilizationInit();
 80036e2:	f000 fefb 	bl	80044dc <stabilizationInit>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ec:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <MX_FREERTOS_Init+0x1d0>)
 80036ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  mutDataHandle = osMutexCreate(osMutex(mutData));
 80036f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f009 fd36 	bl	800d168 <osMutexCreate>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4a69      	ldr	r2, [pc, #420]	; (80038a4 <MX_FREERTOS_Init+0x1d4>)
 8003700:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of tUartTimer */
  osTimerDef(tUartTimer, func_tUartTimer);
 8003702:	4b69      	ldr	r3, [pc, #420]	; (80038a8 <MX_FREERTOS_Init+0x1d8>)
 8003704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 800370e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f009 fcf2 	bl	800d100 <osTimerCreate>
 800371c:	4603      	mov	r3, r0
 800371e:	4a63      	ldr	r2, [pc, #396]	; (80038ac <MX_FREERTOS_Init+0x1dc>)
 8003720:	6013      	str	r3, [r2, #0]

  /* definition and creation of tTechCommTimer */
  osTimerDef(tTechCommTimer, tTechCommTimer_callback);
 8003722:	4b63      	ldr	r3, [pc, #396]	; (80038b0 <MX_FREERTOS_Init+0x1e0>)
 8003724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  tTechCommTimerHandle = osTimerCreate(osTimer(tTechCommTimer), osTimerOnce, NULL);
 800372e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003732:	2200      	movs	r2, #0
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f009 fce2 	bl	800d100 <osTimerCreate>
 800373c:	4603      	mov	r3, r0
 800373e:	4a5d      	ldr	r2, [pc, #372]	; (80038b4 <MX_FREERTOS_Init+0x1e4>)
 8003740:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 8003742:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <MX_FREERTOS_Init+0x1e8>)
 8003744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 800374e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f009 fcd2 	bl	800d100 <osTimerCreate>
 800375c:	4603      	mov	r3, r0
 800375e:	4a57      	ldr	r2, [pc, #348]	; (80038bc <MX_FREERTOS_Init+0x1ec>)
 8003760:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 8003762:	4b55      	ldr	r3, [pc, #340]	; (80038b8 <MX_FREERTOS_Init+0x1e8>)
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	2300      	movs	r3, #0
 8003768:	2200      	movs	r2, #0
 800376a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800376e:	4854      	ldr	r0, [pc, #336]	; (80038c0 <MX_FREERTOS_Init+0x1f0>)
 8003770:	f00b fdc0 	bl	800f2f4 <xTimerCreate>
 8003774:	4603      	mov	r3, r0
 8003776:	4a53      	ldr	r2, [pc, #332]	; (80038c4 <MX_FREERTOS_Init+0x1f4>)
 8003778:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 800377a:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <MX_FREERTOS_Init+0x1d8>)
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	2200      	movs	r2, #0
 8003782:	211e      	movs	r1, #30
 8003784:	4850      	ldr	r0, [pc, #320]	; (80038c8 <MX_FREERTOS_Init+0x1f8>)
 8003786:	f00b fdb5 	bl	800f2f4 <xTimerCreate>
 800378a:	4603      	mov	r3, r0
 800378c:	4a4f      	ldr	r2, [pc, #316]	; (80038cc <MX_FREERTOS_Init+0x1fc>)
 800378e:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 8003790:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <MX_FREERTOS_Init+0x1f4>)
 8003792:	681c      	ldr	r4, [r3, #0]
 8003794:	f00a ffca 	bl	800e72c <xTaskGetTickCount>
 8003798:	4602      	mov	r2, r0
 800379a:	230a      	movs	r3, #10
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2300      	movs	r3, #0
 80037a0:	2101      	movs	r1, #1
 80037a2:	4620      	mov	r0, r4
 80037a4:	f00b fe36 	bl	800f414 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityIdle, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
 80037a8:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <MX_FREERTOS_Init+0x200>)
 80037aa:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80037ae:	461d      	mov	r5, r3
 80037b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 80037bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f009 fc3c 	bl	800d040 <osThreadCreate>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4a42      	ldr	r2, [pc, #264]	; (80038d4 <MX_FREERTOS_Init+0x204>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 80037ce:	4b42      	ldr	r3, [pc, #264]	; (80038d8 <MX_FREERTOS_Init+0x208>)
 80037d0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80037d4:	461d      	mov	r5, r3
 80037d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 80037e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f009 fc29 	bl	800d040 <osThreadCreate>
 80037ee:	4603      	mov	r3, r0
 80037f0:	4a3a      	ldr	r2, [pc, #232]	; (80038dc <MX_FREERTOS_Init+0x20c>)
 80037f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 80037f4:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <MX_FREERTOS_Init+0x210>)
 80037f6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80037fa:	461d      	mov	r5, r3
 80037fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 8003808:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f009 fc16 	bl	800d040 <osThreadCreate>
 8003814:	4603      	mov	r3, r0
 8003816:	4a33      	ldr	r2, [pc, #204]	; (80038e4 <MX_FREERTOS_Init+0x214>)
 8003818:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityLow, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 800381a:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <MX_FREERTOS_Init+0x218>)
 800381c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003820:	461d      	mov	r5, r3
 8003822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003826:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800382a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 800382e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f009 fc03 	bl	800d040 <osThreadCreate>
 800383a:	4603      	mov	r3, r0
 800383c:	4a2b      	ldr	r2, [pc, #172]	; (80038ec <MX_FREERTOS_Init+0x21c>)
 800383e:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityIdle, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 8003840:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <MX_FREERTOS_Init+0x220>)
 8003842:	f107 041c 	add.w	r4, r7, #28
 8003846:	461d      	mov	r5, r3
 8003848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800384a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800384c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003850:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 8003854:	f107 031c 	add.w	r3, r7, #28
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f009 fbf0 	bl	800d040 <osThreadCreate>
 8003860:	4603      	mov	r3, r0
 8003862:	4a24      	ldr	r2, [pc, #144]	; (80038f4 <MX_FREERTOS_Init+0x224>)
 8003864:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSensCommTask */
  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityBelowNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <MX_FREERTOS_Init+0x228>)
 8003868:	463c      	mov	r4, r7
 800386a:	461d      	mov	r5, r3
 800386c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800386e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003870:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);
 8003878:	463b      	mov	r3, r7
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f009 fbdf 	bl	800d040 <osThreadCreate>
 8003882:	4603      	mov	r3, r0
 8003884:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <MX_FREERTOS_Init+0x22c>)
 8003886:	6013      	str	r3, [r2, #0]
  /* definition and creation of tPcCommTask */
//  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityHigh, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
//  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <MX_FREERTOS_Init+0x230>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <MX_FREERTOS_Init+0x230>)
 800388e:	6811      	ldr	r1, [r2, #0]
 8003890:	2201      	movs	r2, #1
 8003892:	4618      	mov	r0, r3
 8003894:	f007 fc96 	bl	800b1c4 <HAL_UART_Receive_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003898:	bf00      	nop
 800389a:	37c8      	adds	r7, #200	; 0xc8
 800389c:	46bd      	mov	sp, r7
 800389e:	bdb0      	pop	{r4, r5, r7, pc}
 80038a0:	200012d0 	.word	0x200012d0
 80038a4:	200012cc 	.word	0x200012cc
 80038a8:	08003e15 	.word	0x08003e15
 80038ac:	200012c0 	.word	0x200012c0
 80038b0:	08003f21 	.word	0x08003f21
 80038b4:	200012c4 	.word	0x200012c4
 80038b8:	08003f35 	.word	0x08003f35
 80038bc:	200012c8 	.word	0x200012c8
 80038c0:	08010ae8 	.word	0x08010ae8
 80038c4:	20000284 	.word	0x20000284
 80038c8:	08010af0 	.word	0x08010af0
 80038cc:	20000280 	.word	0x20000280
 80038d0:	08010b0c 	.word	0x08010b0c
 80038d4:	20000288 	.word	0x20000288
 80038d8:	08010b38 	.word	0x08010b38
 80038dc:	2000053c 	.word	0x2000053c
 80038e0:	08010b64 	.word	0x08010b64
 80038e4:	200007f0 	.word	0x200007f0
 80038e8:	08010b94 	.word	0x08010b94
 80038ec:	20000aa4 	.word	0x20000aa4
 80038f0:	08010bc0 	.word	0x08010bc0
 80038f4:	20000d58 	.word	0x20000d58
 80038f8:	08010bec 	.word	0x08010bec
 80038fc:	2000100c 	.word	0x2000100c
 8003900:	2000018c 	.word	0x2000018c

08003904 <func_tLedBlinkingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 800390c:	f009 fb88 	bl	800d020 <osKernelSysTick>
 8003910:	4603      	mov	r3, r0
 8003912:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  toggle_counter++;
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <func_tLedBlinkingTask+0x60>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3301      	adds	r3, #1
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <func_tLedBlinkingTask+0x60>)
 800391c:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 800391e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003922:	4811      	ldr	r0, [pc, #68]	; (8003968 <func_tLedBlinkingTask+0x64>)
 8003924:	f003 fa8e 	bl	8006e44 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003928:	f107 030c 	add.w	r3, r7, #12
 800392c:	2164      	movs	r1, #100	; 0x64
 800392e:	4618      	mov	r0, r3
 8003930:	f009 fc32 	bl	800d198 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8003934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003938:	480b      	ldr	r0, [pc, #44]	; (8003968 <func_tLedBlinkingTask+0x64>)
 800393a:	f003 fa83 	bl	8006e44 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 800393e:	f107 030c 	add.w	r3, r7, #12
 8003942:	2164      	movs	r1, #100	; 0x64
 8003944:	4618      	mov	r0, r3
 8003946:	f009 fc27 	bl	800d198 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 800394a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800394e:	4806      	ldr	r0, [pc, #24]	; (8003968 <func_tLedBlinkingTask+0x64>)
 8003950:	f003 fa78 	bl	8006e44 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003954:	f107 030c 	add.w	r3, r7, #12
 8003958:	2164      	movs	r1, #100	; 0x64
 800395a:	4618      	mov	r0, r3
 800395c:	f009 fc1c 	bl	800d198 <osDelayUntil>
	  toggle_counter++;
 8003960:	e7d8      	b.n	8003914 <func_tLedBlinkingTask+0x10>
 8003962:	bf00      	nop
 8003964:	2000027c 	.word	0x2000027c
 8003968:	48000400 	.word	0x48000400

0800396c <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003974:	f009 fb54 	bl	800d020 <osKernelSysTick>
 8003978:	4603      	mov	r3, r0
 800397a:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 8003980:	2201      	movs	r2, #1
 8003982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398a:	f003 fa43 	bl	8006e14 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 800398e:	4b2e      	ldr	r3, [pc, #184]	; (8003a48 <func_tVmaCommTask+0xdc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2114      	movs	r1, #20
 8003994:	4618      	mov	r0, r3
 8003996:	f00a f8c9 	bl	800db2c <xQueueSemaphoreTake>
 800399a:	4603      	mov	r3, r0
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10b      	bne.n	80039b8 <func_tVmaCommTask+0x4c>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	4619      	mov	r1, r3
 80039a4:	4829      	ldr	r0, [pc, #164]	; (8003a4c <func_tVmaCommTask+0xe0>)
 80039a6:	f001 fde1 	bl	800556c <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 80039aa:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <func_tVmaCommTask+0xdc>)
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	2200      	movs	r2, #0
 80039b2:	2100      	movs	r1, #0
 80039b4:	f009 fe44 	bl	800d640 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <func_tVmaCommTask+0xe4>)
 80039ba:	4a24      	ldr	r2, [pc, #144]	; (8003a4c <func_tVmaCommTask+0xe0>)
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <func_tVmaCommTask+0xe4>)
 80039c0:	220b      	movs	r2, #11
 80039c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 80039c6:	7bfa      	ldrb	r2, [r7, #15]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	4a21      	ldr	r2, [pc, #132]	; (8003a54 <func_tVmaCommTask+0xe8>)
 80039d0:	4413      	add	r3, r2
 80039d2:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <func_tVmaCommTask+0xe4>)
 80039d4:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <func_tVmaCommTask+0xe4>)
 80039d8:	2209      	movs	r2, #9
 80039da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 80039de:	2100      	movs	r1, #0
 80039e0:	481d      	ldr	r0, [pc, #116]	; (8003a58 <func_tVmaCommTask+0xec>)
 80039e2:	f7fe fb45 	bl	8002070 <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 80039e6:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <func_tVmaCommTask+0xdc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2114      	movs	r1, #20
 80039ec:	4618      	mov	r0, r3
 80039ee:	f00a f89d 	bl	800db2c <xQueueSemaphoreTake>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d111      	bne.n	8003a1c <func_tVmaCommTask+0xb0>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <func_tVmaCommTask+0xe8>)
 8003a02:	4413      	add	r3, r2
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 fdef 	bl	80055ec <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <func_tVmaCommTask+0xdc>)
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	2200      	movs	r2, #0
 8003a16:	2100      	movs	r1, #0
 8003a18:	f009 fe12 	bl	800d640 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <func_tVmaCommTask+0xf0>)
 8003a22:	fb83 3102 	smull	r3, r1, r3, r2
 8003a26:	17d3      	asrs	r3, r2, #31
 8003a28:	1ac9      	subs	r1, r1, r3
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	440b      	add	r3, r1
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	1ad1      	subs	r1, r2, r3
 8003a34:	460b      	mov	r3, r1
 8003a36:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 8003a38:	f107 0308 	add.w	r3, r7, #8
 8003a3c:	2114      	movs	r1, #20
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f009 fbaa 	bl	800d198 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003a44:	e7a3      	b.n	800398e <func_tVmaCommTask+0x22>
 8003a46:	bf00      	nop
 8003a48:	200012cc 	.word	0x200012cc
 8003a4c:	20002098 	.word	0x20002098
 8003a50:	2000018c 	.word	0x2000018c
 8003a54:	200020a4 	.word	0x200020a4
 8003a58:	200001c4 	.word	0x200001c4
 8003a5c:	2aaaaaab 	.word	0x2aaaaaab

08003a60 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003a68:	f009 fada 	bl	800d020 <osKernelSysTick>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.startIMU) {
 8003a70:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <func_tImuCommTask+0xf8>)
 8003a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d039      	beq.n	8003aee <func_tImuCommTask+0x8e>
			uartBus[IMU_UART].txBuffer = ImuStartRequestBuffer;
 8003a7a:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <func_tImuCommTask+0xfc>)
 8003a7c:	4a38      	ldr	r2, [pc, #224]	; (8003b60 <func_tImuCommTask+0x100>)
 8003a7e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 8003a82:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <func_tImuCommTask+0xfc>)
 8003a84:	2214      	movs	r2, #20
 8003a86:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4835      	ldr	r0, [pc, #212]	; (8003b64 <func_tImuCommTask+0x104>)
 8003a8e:	f7fe fa85 	bl	8001f9c <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 8003a92:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <func_tImuCommTask+0xfc>)
 8003a94:	4a34      	ldr	r2, [pc, #208]	; (8003b68 <func_tImuCommTask+0x108>)
 8003a96:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <func_tImuCommTask+0xfc>)
 8003a9c:	221b      	movs	r2, #27
 8003a9e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	482f      	ldr	r0, [pc, #188]	; (8003b64 <func_tImuCommTask+0x104>)
 8003aa6:	f7fe fa79 	bl	8001f9c <transmitPackage>

			if(rSensors.pressure > 2000 || rSensors.pressure < -2000)
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <func_tImuCommTask+0xf8>)
 8003aac:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003ab0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003b6c <func_tImuCommTask+0x10c>
 8003ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abc:	dc09      	bgt.n	8003ad2 <func_tImuCommTask+0x72>
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <func_tImuCommTask+0xf8>)
 8003ac0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003ac4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003b70 <func_tImuCommTask+0x110>
 8003ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad0:	d504      	bpl.n	8003adc <func_tImuCommTask+0x7c>
			{
				rSensors.pressure_null = 0;
 8003ad2:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <func_tImuCommTask+0xf8>)
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	661a      	str	r2, [r3, #96]	; 0x60
 8003ada:	e003      	b.n	8003ae4 <func_tImuCommTask+0x84>
			}
			else
			{
				rSensors.pressure_null = rSensors.pressure;
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <func_tImuCommTask+0xf8>)
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <func_tImuCommTask+0xf8>)
 8003ae2:	6613      	str	r3, [r2, #96]	; 0x60
			}

	  		rSensors.startIMU = false;
 8003ae4:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <func_tImuCommTask+0xf8>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003aec:	e02d      	b.n	8003b4a <func_tImuCommTask+0xea>
	  	}
	  	else {

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <func_tImuCommTask+0xfc>)
 8003af0:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <func_tImuCommTask+0x114>)
 8003af2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 8003af6:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <func_tImuCommTask+0xfc>)
 8003af8:	221e      	movs	r2, #30
 8003afa:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <func_tImuCommTask+0xfc>)
 8003b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b04:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <func_tImuCommTask+0xfc>)
 8003b06:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003b0a:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <func_tImuCommTask+0xfc>)
 8003b0c:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 8003b10:	b292      	uxth	r2, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f007 fb56 	bl	800b1c4 <HAL_UART_Receive_IT>

	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f009 fb3a 	bl	800d198 <osDelayUntil>

	  		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 8003b24:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <func_tImuCommTask+0x118>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f009 fffe 	bl	800db2c <xQueueSemaphoreTake>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d109      	bne.n	8003b4a <func_tImuCommTask+0xea>
	  			ImuReceive(ImuResponseBuffer);
 8003b36:	480f      	ldr	r0, [pc, #60]	; (8003b74 <func_tImuCommTask+0x114>)
 8003b38:	f7ff f99a 	bl	8002e70 <ImuReceive>
	  			xSemaphoreGive(mutDataHandle);
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <func_tImuCommTask+0x118>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	2200      	movs	r2, #0
 8003b44:	2100      	movs	r1, #0
 8003b46:	f009 fd7b 	bl	800d640 <xQueueGenericSend>
	  		}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003b4a:	f107 030c 	add.w	r3, r7, #12
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f009 fb21 	bl	800d198 <osDelayUntil>
	  	if(rSensors.startIMU) {
 8003b56:	e78b      	b.n	8003a70 <func_tImuCommTask+0x10>
 8003b58:	20001b14 	.word	0x20001b14
 8003b5c:	2000018c 	.word	0x2000018c
 8003b60:	20000024 	.word	0x20000024
 8003b64:	20000234 	.word	0x20000234
 8003b68:	20000008 	.word	0x20000008
 8003b6c:	44fa0000 	.word	0x44fa0000
 8003b70:	c4fa0000 	.word	0xc4fa0000
 8003b74:	20002078 	.word	0x20002078
 8003b78:	200012cc 	.word	0x200012cc

08003b7c <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 8003b84:	f009 fa4c 	bl	800d020 <osKernelSysTick>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <func_tStabilizationTask+0x70>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	210a      	movs	r1, #10
 8003b92:	4618      	mov	r0, r3
 8003b94:	f009 ffca 	bl	800db2c <xQueueSemaphoreTake>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d11e      	bne.n	8003bdc <func_tStabilizationTask+0x60>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	e00f      	b.n	8003bc4 <func_tStabilizationTask+0x48>
				if (rStabConstants[i].enable) {
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <func_tStabilizationTask+0x74>)
 8003ba8:	214c      	movs	r1, #76	; 0x4c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <func_tStabilizationTask+0x42>
					stabilizationUpdate(i);
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 f87b 	bl	8004cb4 <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d9ec      	bls.n	8003ba4 <func_tStabilizationTask+0x28>
				}
			}
			formThrustVectors();
 8003bca:	f001 fd4b 	bl	8005664 <formThrustVectors>
			xSemaphoreGive(mutDataHandle);
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <func_tStabilizationTask+0x70>)
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	f009 fd32 	bl	800d640 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	210a      	movs	r1, #10
 8003be2:	4618      	mov	r0, r3
 8003be4:	f009 fad8 	bl	800d198 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003be8:	e7d0      	b.n	8003b8c <func_tStabilizationTask+0x10>
 8003bea:	bf00      	nop
 8003bec:	200012cc 	.word	0x200012cc
 8003bf0:	20001be8 	.word	0x20001be8

08003bf4 <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void const * argument)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 8003bfc:	f009 fa10 	bl	800d020 <osKernelSysTick>
 8003c00:	4603      	mov	r3, r0
 8003c02:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003c08:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <func_tDevCommTask+0xd8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c10:	4618      	mov	r0, r3
 8003c12:	f009 ff8b 	bl	800db2c <xQueueSemaphoreTake>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10b      	bne.n	8003c34 <func_tDevCommTask+0x40>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	482b      	ldr	r0, [pc, #172]	; (8003cd0 <func_tDevCommTask+0xdc>)
 8003c22:	f7fe fbd7 	bl	80023d4 <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 8003c26:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <func_tDevCommTask+0xd8>)
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f009 fd06 	bl	800d640 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <func_tDevCommTask+0xe0>)
 8003c36:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <func_tDevCommTask+0xdc>)
 8003c38:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 8003c3a:	4b26      	ldr	r3, [pc, #152]	; (8003cd4 <func_tDevCommTask+0xe0>)
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4a22      	ldr	r2, [pc, #136]	; (8003cd8 <func_tDevCommTask+0xe4>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	4a20      	ldr	r2, [pc, #128]	; (8003cd4 <func_tDevCommTask+0xe0>)
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8003c54:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <func_tDevCommTask+0xe0>)
 8003c56:	220a      	movs	r2, #10
 8003c58:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	481f      	ldr	r0, [pc, #124]	; (8003cdc <func_tDevCommTask+0xe8>)
 8003c60:	f7fe fa06 	bl	8002070 <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <func_tDevCommTask+0xd8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f009 ff5d 	bl	800db2c <xQueueSemaphoreTake>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d112      	bne.n	8003c9e <func_tDevCommTask+0xaa>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <func_tDevCommTask+0xe4>)
 8003c84:	4413      	add	r3, r2
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fbdc 	bl	8002448 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <func_tDevCommTask+0xd8>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	2200      	movs	r2, #0
 8003c98:	2100      	movs	r1, #0
 8003c9a:	f009 fcd1 	bl	800d640 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <func_tDevCommTask+0xec>)
 8003ca4:	fb83 3102 	smull	r3, r1, r3, r2
 8003ca8:	17d3      	asrs	r3, r2, #31
 8003caa:	1ac9      	subs	r1, r1, r3
 8003cac:	460b      	mov	r3, r1
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	440b      	add	r3, r1
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	1ad1      	subs	r1, r2, r3
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 8003cba:	f107 0308 	add.w	r3, r7, #8
 8003cbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f009 fa68 	bl	800d198 <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003cc8:	e79e      	b.n	8003c08 <func_tDevCommTask+0x14>
 8003cca:	bf00      	nop
 8003ccc:	200012cc 	.word	0x200012cc
 8003cd0:	200020dc 	.word	0x200020dc
 8003cd4:	2000018c 	.word	0x2000018c
 8003cd8:	200020e4 	.word	0x200020e4
 8003cdc:	200001fc 	.word	0x200001fc
 8003ce0:	2aaaaaab 	.word	0x2aaaaaab

08003ce4 <func_tSensCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void const * argument)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003cec:	f009 f998 	bl	800d020 <osKernelSysTick>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003cf4:	4b40      	ldr	r3, [pc, #256]	; (8003df8 <func_tSensCommTask+0x114>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	210a      	movs	r1, #10
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f009 ff16 	bl	800db2c <xQueueSemaphoreTake>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d165      	bne.n	8003dd2 <func_tSensCommTask+0xee>
//      MS5837_read(i2cBus[DEV_I2C].hi2c);
    	rSensors.pressure_raw = MS5837_02BA_get_actual_pressure();
 8003d06:	f7fd fa2f 	bl	8001168 <MS5837_02BA_get_actual_pressure>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4a3b      	ldr	r2, [pc, #236]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d0e:	6593      	str	r3, [r2, #88]	; 0x58
    	float pressure = movingAverageIterate(&pressure_filter, rSensors.pressure_raw);
 8003d10:	4b3a      	ldr	r3, [pc, #232]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d20:	4837      	ldr	r0, [pc, #220]	; (8003e00 <func_tSensCommTask+0x11c>)
 8003d22:	f000 fb81 	bl	8004428 <movingAverageIterate>
 8003d26:	ed87 0a03 	vstr	s0, [r7, #12]
    	rSensors.last_pressure = rSensors.pressure;
 8003d2a:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	4a33      	ldr	r2, [pc, #204]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d30:	6653      	str	r3, [r2, #100]	; 0x64
		rSensors.pressure = pressure;
 8003d32:	4a32      	ldr	r2, [pc, #200]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	65d3      	str	r3, [r2, #92]	; 0x5c
		if(rSensors.last_pressure == rSensors.pressure || rSensors.pressure > 2000 || rSensors.pressure < -2000)
 8003d38:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d3a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d40:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003d44:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4c:	d013      	beq.n	8003d76 <func_tSensCommTask+0x92>
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d50:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003d54:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003e04 <func_tSensCommTask+0x120>
 8003d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d60:	dc09      	bgt.n	8003d76 <func_tSensCommTask+0x92>
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d64:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003d68:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003e08 <func_tSensCommTask+0x124>
 8003d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d74:	d508      	bpl.n	8003d88 <func_tSensCommTask+0xa4>
			rSensors.pressure_watchdog_counter++;
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d78:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d82:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003d86:	e003      	b.n	8003d90 <func_tSensCommTask+0xac>
		else
			rSensors.pressure_watchdog_counter = 0;
 8003d88:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		rSensors.velocity_pressure = movingAverageIterate(&velocity_pressure_filter,
				(rSensors.pressure - rSensors.last_pressure)*1000/DELAY_SENSOR_TASK);
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d92:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003d96:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <func_tSensCommTask+0x118>)
 8003d98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003e0c <func_tSensCommTask+0x128>
 8003da4:	ee67 7a87 	vmul.f32	s15, s15, s14
		rSensors.velocity_pressure = movingAverageIterate(&velocity_pressure_filter,
 8003da8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003dac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003db0:	eeb0 0a47 	vmov.f32	s0, s14
 8003db4:	4816      	ldr	r0, [pc, #88]	; (8003e10 <func_tSensCommTask+0x12c>)
 8003db6:	f000 fb37 	bl	8004428 <movingAverageIterate>
 8003dba:	eef0 7a40 	vmov.f32	s15, s0
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <func_tSensCommTask+0x118>)
 8003dc0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		xSemaphoreGive(mutDataHandle);
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <func_tSensCommTask+0x114>)
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2100      	movs	r1, #0
 8003dce:	f009 fc37 	bl	800d640 <xQueueGenericSend>
    }
    if(rSensors.pressure_watchdog_counter >= 150)
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <func_tSensCommTask+0x118>)
 8003dd4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003dd8:	2b95      	cmp	r3, #149	; 0x95
 8003dda:	d905      	bls.n	8003de8 <func_tSensCommTask+0x104>
    {
    	MS5837_02BA_reinit();
 8003ddc:	f7fd f96a 	bl	80010b4 <MS5837_02BA_reinit>
    	rSensors.pressure_watchdog_counter = 0;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <func_tSensCommTask+0x118>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
    osDelayUntil(&sysTime, DELAY_SENSOR_TASK); // �?справленная задержка
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	210a      	movs	r1, #10
 8003dee:	4618      	mov	r0, r3
 8003df0:	f009 f9d2 	bl	800d198 <osDelayUntil>
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003df4:	e77e      	b.n	8003cf4 <func_tSensCommTask+0x10>
 8003df6:	bf00      	nop
 8003df8:	200012cc 	.word	0x200012cc
 8003dfc:	20001b14 	.word	0x20001b14
 8003e00:	20002174 	.word	0x20002174
 8003e04:	44fa0000 	.word	0x44fa0000
 8003e08:	c4fa0000 	.word	0xc4fa0000
 8003e0c:	447a0000 	.word	0x447a0000
 8003e10:	20002244 	.word	0x20002244

08003e14 <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void const * argument)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8003e1c:	4b3d      	ldr	r3, [pc, #244]	; (8003f14 <func_tUartTimer+0x100>)
 8003e1e:	7a1b      	ldrb	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05a      	beq.n	8003eda <func_tUartTimer+0xc6>
		bool package = true;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003e28:	4b3b      	ldr	r3, [pc, #236]	; (8003f18 <func_tUartTimer+0x104>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2105      	movs	r1, #5
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f009 fe7c 	bl	800db2c <xQueueSemaphoreTake>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d140      	bne.n	8003ebc <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003e3a:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <func_tUartTimer+0x100>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2baa      	cmp	r3, #170	; 0xaa
 8003e42:	d023      	beq.n	8003e8c <func_tUartTimer+0x78>
 8003e44:	2baa      	cmp	r3, #170	; 0xaa
 8003e46:	dc30      	bgt.n	8003eaa <func_tUartTimer+0x96>
 8003e48:	2b55      	cmp	r3, #85	; 0x55
 8003e4a:	d010      	beq.n	8003e6e <func_tUartTimer+0x5a>
 8003e4c:	2ba5      	cmp	r3, #165	; 0xa5
 8003e4e:	d12c      	bne.n	8003eaa <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8003e50:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <func_tUartTimer+0x100>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fb5f 	bl	8002518 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003e5a:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <func_tUartTimer+0x100>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fed0 	bl	8002c04 <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <func_tUartTimer+0x100>)
 8003e66:	2214      	movs	r2, #20
 8003e68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e6c:	e01f      	b.n	8003eae <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8003e6e:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <func_tUartTimer+0x100>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fcce 	bl	8002814 <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003e78:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <func_tUartTimer+0x100>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fee7 	bl	8002c50 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 8003e82:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <func_tUartTimer+0x100>)
 8003e84:	2263      	movs	r2, #99	; 0x63
 8003e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e8a:	e010      	b.n	8003eae <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003e8c:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <func_tUartTimer+0x100>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe fe01 	bl	8002a98 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 8003e96:	4b1f      	ldr	r3, [pc, #124]	; (8003f14 <func_tUartTimer+0x100>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe ffce 	bl	8002e3c <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8003ea0:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <func_tUartTimer+0x100>)
 8003ea2:	2206      	movs	r2, #6
 8003ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003ea8:	e001      	b.n	8003eae <func_tUartTimer+0x9a>
				default:
					package = false;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <func_tUartTimer+0x104>)
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	f009 fbc2 	bl	800d640 <xQueueGenericSend>
		}
		if(package) {
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d010      	beq.n	8003ee4 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 8003ec2:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <func_tUartTimer+0x100>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <func_tUartTimer+0x100>)
 8003ec8:	6851      	ldr	r1, [r2, #4]
 8003eca:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <func_tUartTimer+0x100>)
 8003ecc:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003ed0:	b292      	uxth	r2, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f007 f918 	bl	800b108 <HAL_UART_Transmit_IT>
 8003ed8:	e004      	b.n	8003ee4 <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <func_tUartTimer+0x100>)
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	; (8003f14 <func_tUartTimer+0x100>)
 8003ee2:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <func_tUartTimer+0x108>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 8003eea:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <func_tUartTimer+0x100>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <func_tUartTimer+0x100>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f007 fae1 	bl	800b4bc <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <func_tUartTimer+0x100>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <func_tUartTimer+0x100>)
 8003f00:	6811      	ldr	r1, [r2, #0]
 8003f02:	2201      	movs	r2, #1
 8003f04:	4618      	mov	r0, r3
 8003f06:	f007 f95d 	bl	800b1c4 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000018c 	.word	0x2000018c
 8003f18:	200012cc 	.word	0x200012cc
 8003f1c:	20000274 	.word	0x20000274

08003f20 <tTechCommTimer_callback>:

/* tTechCommTimer_callback function */
void tTechCommTimer_callback(void const * argument)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tTechCommTimer_callback */

  /* USER CODE END tTechCommTimer_callback */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void const * argument)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 8003f3c:	f00a fbf6 	bl	800e72c <xTaskGetTickCount>
 8003f40:	4603      	mov	r3, r0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd f836 	bl	8000fb4 <fromTickToMs>
 8003f48:	eeb0 7a40 	vmov.f32	s14, s0
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <tSilence_func+0xb8>)
 8003f4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f56:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003ff0 <tSilence_func+0xbc>
 8003f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f62:	dd33      	ble.n	8003fcc <tSilence_func+0x98>
 8003f64:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <tSilence_func+0xc0>)
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d12f      	bne.n	8003fcc <tSilence_func+0x98>
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	; (8003fec <tSilence_func+0xb8>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	4618      	mov	r0, r3
 8003f72:	f007 faa3 	bl	800b4bc <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <tSilence_func+0xb8>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <tSilence_func+0xb8>)
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f007 f91f 	bl	800b1c4 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <tSilence_func+0xc4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2105      	movs	r1, #5
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f009 fdcd 	bl	800db2c <xQueueSemaphoreTake>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d119      	bne.n	8003fcc <tSilence_func+0x98>
			resetThrusters();
 8003f98:	f001 faae 	bl	80054f8 <resetThrusters>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	73fb      	strb	r3, [r7, #15]
 8003fa0:	e00a      	b.n	8003fb8 <tSilence_func+0x84>
				rStabConstants[i].enable = false;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <tSilence_func+0xc8>)
 8003fa6:	214c      	movs	r1, #76	; 0x4c
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	2b05      	cmp	r3, #5
 8003fbc:	d9f1      	bls.n	8003fa2 <tSilence_func+0x6e>
			}

			xSemaphoreGive(mutDataHandle);
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <tSilence_func+0xc4>)
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f009 fb3a 	bl	800d640 <xQueueGenericSend>
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF

	xTimerStart(SilenceTimer, 50);
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <tSilence_func+0xcc>)
 8003fce:	681c      	ldr	r4, [r3, #0]
 8003fd0:	f00a fbac 	bl	800e72c <xTaskGetTickCount>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	2332      	movs	r3, #50	; 0x32
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f00b fa18 	bl	800f414 <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}
 8003fec:	2000018c 	.word	0x2000018c
 8003ff0:	447a0000 	.word	0x447a0000
 8003ff4:	20000274 	.word	0x20000274
 8003ff8:	200012cc 	.word	0x200012cc
 8003ffc:	20001be8 	.word	0x20001be8
 8004000:	20000284 	.word	0x20000284

08004004 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
 8004014:	609a      	str	r2, [r3, #8]
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800401a:	4b40      	ldr	r3, [pc, #256]	; (800411c <MX_GPIO_Init+0x118>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4a3f      	ldr	r2, [pc, #252]	; (800411c <MX_GPIO_Init+0x118>)
 8004020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004024:	6153      	str	r3, [r2, #20]
 8004026:	4b3d      	ldr	r3, [pc, #244]	; (800411c <MX_GPIO_Init+0x118>)
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004032:	4b3a      	ldr	r3, [pc, #232]	; (800411c <MX_GPIO_Init+0x118>)
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4a39      	ldr	r2, [pc, #228]	; (800411c <MX_GPIO_Init+0x118>)
 8004038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403c:	6153      	str	r3, [r2, #20]
 800403e:	4b37      	ldr	r3, [pc, #220]	; (800411c <MX_GPIO_Init+0x118>)
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <MX_GPIO_Init+0x118>)
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4a33      	ldr	r2, [pc, #204]	; (800411c <MX_GPIO_Init+0x118>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004054:	6153      	str	r3, [r2, #20]
 8004056:	4b31      	ldr	r3, [pc, #196]	; (800411c <MX_GPIO_Init+0x118>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004062:	4b2e      	ldr	r3, [pc, #184]	; (800411c <MX_GPIO_Init+0x118>)
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	4a2d      	ldr	r2, [pc, #180]	; (800411c <MX_GPIO_Init+0x118>)
 8004068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406c:	6153      	str	r3, [r2, #20]
 800406e:	4b2b      	ldr	r3, [pc, #172]	; (800411c <MX_GPIO_Init+0x118>)
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <MX_GPIO_Init+0x118>)
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	4a27      	ldr	r2, [pc, #156]	; (800411c <MX_GPIO_Init+0x118>)
 8004080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004084:	6153      	str	r3, [r2, #20]
 8004086:	4b25      	ldr	r3, [pc, #148]	; (800411c <MX_GPIO_Init+0x118>)
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_RESET);
 8004092:	2200      	movs	r2, #0
 8004094:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8004098:	4821      	ldr	r0, [pc, #132]	; (8004120 <MX_GPIO_Init+0x11c>)
 800409a:	f002 febb 	bl	8006e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);
 800409e:	2200      	movs	r2, #0
 80040a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040a4:	481f      	ldr	r0, [pc, #124]	; (8004124 <MX_GPIO_Init+0x120>)
 80040a6:	f002 feb5 	bl	8006e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 80040aa:	2200      	movs	r2, #0
 80040ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b4:	f002 feae 	bl	8006e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 80040b8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80040bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040be:	2301      	movs	r3, #1
 80040c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c6:	2300      	movs	r3, #0
 80040c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	4619      	mov	r1, r3
 80040d0:	4813      	ldr	r0, [pc, #76]	; (8004120 <MX_GPIO_Init+0x11c>)
 80040d2:	f002 fc49 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART3_DE_Pin;
 80040d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040dc:	2301      	movs	r3, #1
 80040de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e4:	2300      	movs	r3, #0
 80040e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USART3_DE_GPIO_Port, &GPIO_InitStruct);
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	4619      	mov	r1, r3
 80040ee:	480d      	ldr	r0, [pc, #52]	; (8004124 <MX_GPIO_Init+0x120>)
 80040f0:	f002 fc3a 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 80040f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040fa:	2301      	movs	r3, #1
 80040fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004102:	2300      	movs	r3, #0
 8004104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8004106:	f107 0314 	add.w	r3, r7, #20
 800410a:	4619      	mov	r1, r3
 800410c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004110:	f002 fc2a 	bl	8006968 <HAL_GPIO_Init>

}
 8004114:	bf00      	nop
 8004116:	3728      	adds	r7, #40	; 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	48000400 	.word	0x48000400
 8004124:	48000c00 	.word	0x48000c00

08004128 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <MX_I2C1_Init+0x74>)
 800412e:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <MX_I2C1_Init+0x78>)
 8004130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <MX_I2C1_Init+0x74>)
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <MX_I2C1_Init+0x7c>)
 8004136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <MX_I2C1_Init+0x74>)
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <MX_I2C1_Init+0x74>)
 8004140:	2201      	movs	r2, #1
 8004142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <MX_I2C1_Init+0x74>)
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <MX_I2C1_Init+0x74>)
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <MX_I2C1_Init+0x74>)
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <MX_I2C1_Init+0x74>)
 8004158:	2200      	movs	r2, #0
 800415a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <MX_I2C1_Init+0x74>)
 800415e:	2200      	movs	r2, #0
 8004160:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004162:	480e      	ldr	r0, [pc, #56]	; (800419c <MX_I2C1_Init+0x74>)
 8004164:	f002 fe88 	bl	8006e78 <HAL_I2C_Init>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800416e:	f000 f92d 	bl	80043cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004172:	2100      	movs	r1, #0
 8004174:	4809      	ldr	r0, [pc, #36]	; (800419c <MX_I2C1_Init+0x74>)
 8004176:	f004 ff51 	bl	800901c <HAL_I2CEx_ConfigAnalogFilter>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004180:	f000 f924 	bl	80043cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004184:	2100      	movs	r1, #0
 8004186:	4805      	ldr	r0, [pc, #20]	; (800419c <MX_I2C1_Init+0x74>)
 8004188:	f004 ff93 	bl	80090b2 <HAL_I2CEx_ConfigDigitalFilter>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004192:	f000 f91b 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20002120 	.word	0x20002120
 80041a0:	40005400 	.word	0x40005400
 80041a4:	2000090e 	.word	0x2000090e

080041a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_I2C_MspInit+0x8c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d12f      	bne.n	800422a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_I2C_MspInit+0x90>)
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_I2C_MspInit+0x90>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d4:	6153      	str	r3, [r2, #20]
 80041d6:	4b18      	ldr	r3, [pc, #96]	; (8004238 <HAL_I2C_MspInit+0x90>)
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041e2:	23c0      	movs	r3, #192	; 0xc0
 80041e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041e6:	2312      	movs	r3, #18
 80041e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ee:	2303      	movs	r3, #3
 80041f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041f2:	2304      	movs	r3, #4
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f6:	f107 0314 	add.w	r3, r7, #20
 80041fa:	4619      	mov	r1, r3
 80041fc:	480f      	ldr	r0, [pc, #60]	; (800423c <HAL_I2C_MspInit+0x94>)
 80041fe:	f002 fbb3 	bl	8006968 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_I2C_MspInit+0x90>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <HAL_I2C_MspInit+0x90>)
 8004208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800420c:	61d3      	str	r3, [r2, #28]
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <HAL_I2C_MspInit+0x90>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800421a:	2200      	movs	r2, #0
 800421c:	2105      	movs	r1, #5
 800421e:	201f      	movs	r0, #31
 8004220:	f001 ff5a 	bl	80060d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004224:	201f      	movs	r0, #31
 8004226:	f001 ff73 	bl	8006110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800422a:	bf00      	nop
 800422c:	3728      	adds	r7, #40	; 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40005400 	.word	0x40005400
 8004238:	40021000 	.word	0x40021000
 800423c:	48000400 	.word	0x48000400

08004240 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a0b      	ldr	r2, [pc, #44]	; (800427c <HAL_I2C_MspDeInit+0x3c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d110      	bne.n	8004274 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_I2C_MspDeInit+0x40>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <HAL_I2C_MspDeInit+0x40>)
 8004258:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800425c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800425e:	2140      	movs	r1, #64	; 0x40
 8004260:	4808      	ldr	r0, [pc, #32]	; (8004284 <HAL_I2C_MspDeInit+0x44>)
 8004262:	f002 fcfb 	bl	8006c5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	4806      	ldr	r0, [pc, #24]	; (8004284 <HAL_I2C_MspDeInit+0x44>)
 800426a:	f002 fcf7 	bl	8006c5c <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800426e:	201f      	movs	r0, #31
 8004270:	f001 ff5c 	bl	800612c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40005400 	.word	0x40005400
 8004280:	40021000 	.word	0x40021000
 8004284:	48000400 	.word	0x48000400

08004288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800428c:	f001 fdee 	bl	8005e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004290:	f000 f82c 	bl	80042ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004294:	f7ff feb6 	bl	8004004 <MX_GPIO_Init>
  MX_DMA_Init();
 8004298:	f7fe fea2 	bl	8002fe0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800429c:	f001 fb7e 	bl	800599c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80042a0:	f7ff ff42 	bl	8004128 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80042a4:	f001 fbaa 	bl	80059fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80042a8:	f001 fbdc 	bl	8005a64 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80042ac:	f001 fb46 	bl	800593c <MX_UART4_Init>
  MX_TIM7_Init();
 80042b0:	f001 faee 	bl	8005890 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(30000); //30 seconds delay to start PC
 80042b4:	f247 5030 	movw	r0, #30000	; 0x7530
 80042b8:	f001 fe0e 	bl	8005ed8 <HAL_Delay>
  MS5837_02BA_init(&hi2c1);
 80042bc:	4808      	ldr	r0, [pc, #32]	; (80042e0 <main+0x58>)
 80042be:	f7fc fea5 	bl	800100c <MS5837_02BA_init>
  MS5837_02BA_reset_pressure();
 80042c2:	f7fd f8cd 	bl	8001460 <MS5837_02BA_reset_pressure>

  movingAverageInit(&pressure_filter, 50);
 80042c6:	2132      	movs	r1, #50	; 0x32
 80042c8:	4806      	ldr	r0, [pc, #24]	; (80042e4 <main+0x5c>)
 80042ca:	f000 f884 	bl	80043d6 <movingAverageInit>
  movingAverageInit(&velocity_pressure_filter, 50);
 80042ce:	2132      	movs	r1, #50	; 0x32
 80042d0:	4805      	ldr	r0, [pc, #20]	; (80042e8 <main+0x60>)
 80042d2:	f000 f880 	bl	80043d6 <movingAverageInit>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80042d6:	f7ff f9fb 	bl	80036d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80042da:	f008 fe9a 	bl	800d012 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80042de:	e7fe      	b.n	80042de <main+0x56>
 80042e0:	20002120 	.word	0x20002120
 80042e4:	20002174 	.word	0x20002174
 80042e8:	20002244 	.word	0x20002244

080042ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b09e      	sub	sp, #120	; 0x78
 80042f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042f6:	2228      	movs	r2, #40	; 0x28
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f00c f8ee 	bl	80104dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004300:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	60da      	str	r2, [r3, #12]
 800430e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004310:	463b      	mov	r3, r7
 8004312:	223c      	movs	r2, #60	; 0x3c
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f00c f8e0 	bl	80104dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800431c:	2302      	movs	r3, #2
 800431e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004320:	2301      	movs	r3, #1
 8004322:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004324:	2310      	movs	r3, #16
 8004326:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004328:	2302      	movs	r3, #2
 800432a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800432c:	2300      	movs	r3, #0
 800432e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004330:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8004334:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800433a:	4618      	mov	r0, r3
 800433c:	f004 ff06 	bl	800914c <HAL_RCC_OscConfig>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8004346:	f000 f841 	bl	80043cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800434a:	230f      	movs	r3, #15
 800434c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800434e:	2302      	movs	r3, #2
 8004350:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004352:	2300      	movs	r3, #0
 8004354:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800435c:	2300      	movs	r3, #0
 800435e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f005 ff2e 	bl	800a1c8 <HAL_RCC_ClockConfig>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004372:	f000 f82b 	bl	80043cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004376:	232f      	movs	r3, #47	; 0x2f
 8004378:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800438e:	463b      	mov	r3, r7
 8004390:	4618      	mov	r0, r3
 8004392:	f006 f983 	bl	800a69c <HAL_RCCEx_PeriphCLKConfig>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800439c:	f000 f816 	bl	80043cc <Error_Handler>
  }
}
 80043a0:	bf00      	nop
 80043a2:	3778      	adds	r7, #120	; 0x78
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80043ba:	f001 fd6d 	bl	8005e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40012c00 	.word	0x40012c00

080043cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043d0:	b672      	cpsid	i
}
 80043d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043d4:	e7fe      	b.n	80043d4 <Error_Handler+0x8>

080043d6 <movingAverageInit>:
#include "moving_average.h"

void movingAverageInit(Moving_Average_filter* filter, uint8_t order)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	70fb      	strb	r3, [r7, #3]
	filter->order = order;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	for(uint8_t i = 0; i<MOVING_AVERAGE_MAX_ORDER; i++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e009      	b.n	8004404 <movingAverageInit+0x2e>
		filter->data[i] = 0;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i<MOVING_AVERAGE_MAX_ORDER; i++)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	3301      	adds	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b31      	cmp	r3, #49	; 0x31
 8004408:	d9f2      	bls.n	80043f0 <movingAverageInit+0x1a>
	filter->current_element = 0;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	filter->average = 0;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <movingAverageIterate>:

float movingAverageIterate(Moving_Average_filter* filter, float value)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	ed87 0a00 	vstr	s0, [r7]
	int32_t last_value = filter->data[filter->current_element];
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	edd3 7a00 	vldr	s15, [r3]
 8004444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004448:	ee17 3a90 	vmov	r3, s15
 800444c:	60fb      	str	r3, [r7, #12]
	filter->data[filter->current_element] = value;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	601a      	str	r2, [r3, #0]
	filter->average = (filter->average * filter->order - last_value + value) / (float)filter->order;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004484:	edd7 7a00 	vldr	s15, [r7]
 8004488:	ee77 6a27 	vadd.f32	s13, s14, s15
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800449a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
	filter->current_element = (filter->current_element+1)%filter->order;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80044aa:	3301      	adds	r3, #1
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 80044b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80044b6:	fb01 f202 	mul.w	r2, r1, r2
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	return filter->average;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80044ca:	ee07 3a90 	vmov	s15, r3
}
 80044ce:	eeb0 0a67 	vmov.f32	s0, s15
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80044e2:	2300      	movs	r3, #0
 80044e4:	71fb      	strb	r3, [r7, #7]
 80044e6:	e15d      	b.n	80047a4 <stabilizationInit+0x2c8>
		rStabConstants[i].enable = false;
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	4abf      	ldr	r2, [pc, #764]	; (80047e8 <stabilizationInit+0x30c>)
 80044ec:	214c      	movs	r1, #76	; 0x4c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	4abc      	ldr	r2, [pc, #752]	; (80047ec <stabilizationInit+0x310>)
 80044fc:	2158      	movs	r1, #88	; 0x58
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	330c      	adds	r3, #12
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	4ab7      	ldr	r2, [pc, #732]	; (80047ec <stabilizationInit+0x310>)
 8004510:	2158      	movs	r1, #88	; 0x58
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	3310      	adds	r3, #16
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	4ab2      	ldr	r2, [pc, #712]	; (80047ec <stabilizationInit+0x310>)
 8004524:	2158      	movs	r1, #88	; 0x58
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	3314      	adds	r3, #20
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	4aad      	ldr	r2, [pc, #692]	; (80047ec <stabilizationInit+0x310>)
 8004538:	2158      	movs	r1, #88	; 0x58
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	4413      	add	r3, r2
 8004540:	3318      	adds	r3, #24
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	4aa8      	ldr	r2, [pc, #672]	; (80047ec <stabilizationInit+0x310>)
 800454c:	2158      	movs	r1, #88	; 0x58
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	4413      	add	r3, r2
 8004554:	331c      	adds	r3, #28
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	4aa3      	ldr	r2, [pc, #652]	; (80047ec <stabilizationInit+0x310>)
 8004560:	2158      	movs	r1, #88	; 0x58
 8004562:	fb01 f303 	mul.w	r3, r1, r3
 8004566:	4413      	add	r3, r2
 8004568:	3320      	adds	r3, #32
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	4a9e      	ldr	r2, [pc, #632]	; (80047ec <stabilizationInit+0x310>)
 8004574:	2158      	movs	r1, #88	; 0x58
 8004576:	fb01 f303 	mul.w	r3, r1, r3
 800457a:	4413      	add	r3, r2
 800457c:	3324      	adds	r3, #36	; 0x24
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	4a99      	ldr	r2, [pc, #612]	; (80047ec <stabilizationInit+0x310>)
 8004588:	2158      	movs	r1, #88	; 0x58
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	3328      	adds	r3, #40	; 0x28
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	4a94      	ldr	r2, [pc, #592]	; (80047ec <stabilizationInit+0x310>)
 800459c:	2158      	movs	r1, #88	; 0x58
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	332c      	adds	r3, #44	; 0x2c
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	4a8f      	ldr	r2, [pc, #572]	; (80047ec <stabilizationInit+0x310>)
 80045b0:	2158      	movs	r1, #88	; 0x58
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	3330      	adds	r3, #48	; 0x30
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	4a8a      	ldr	r2, [pc, #552]	; (80047ec <stabilizationInit+0x310>)
 80045c4:	2158      	movs	r1, #88	; 0x58
 80045c6:	fb01 f303 	mul.w	r3, r1, r3
 80045ca:	4413      	add	r3, r2
 80045cc:	3334      	adds	r3, #52	; 0x34
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 80045d4:	79fb      	ldrb	r3, [r7, #7]
 80045d6:	4a85      	ldr	r2, [pc, #532]	; (80047ec <stabilizationInit+0x310>)
 80045d8:	2158      	movs	r1, #88	; 0x58
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	4413      	add	r3, r2
 80045e0:	3338      	adds	r3, #56	; 0x38
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	4a80      	ldr	r2, [pc, #512]	; (80047ec <stabilizationInit+0x310>)
 80045ec:	2158      	movs	r1, #88	; 0x58
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	4413      	add	r3, r2
 80045f4:	333c      	adds	r3, #60	; 0x3c
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	4a7b      	ldr	r2, [pc, #492]	; (80047ec <stabilizationInit+0x310>)
 8004600:	2158      	movs	r1, #88	; 0x58
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	4413      	add	r3, r2
 8004608:	3340      	adds	r3, #64	; 0x40
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	4a76      	ldr	r2, [pc, #472]	; (80047ec <stabilizationInit+0x310>)
 8004614:	2158      	movs	r1, #88	; 0x58
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	4413      	add	r3, r2
 800461c:	3344      	adds	r3, #68	; 0x44
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	4a71      	ldr	r2, [pc, #452]	; (80047ec <stabilizationInit+0x310>)
 8004628:	2158      	movs	r1, #88	; 0x58
 800462a:	fb01 f303 	mul.w	r3, r1, r3
 800462e:	4413      	add	r3, r2
 8004630:	3348      	adds	r3, #72	; 0x48
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	4a6c      	ldr	r2, [pc, #432]	; (80047ec <stabilizationInit+0x310>)
 800463c:	2158      	movs	r1, #88	; 0x58
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	334c      	adds	r3, #76	; 0x4c
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	4a67      	ldr	r2, [pc, #412]	; (80047ec <stabilizationInit+0x310>)
 8004650:	2158      	movs	r1, #88	; 0x58
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	3350      	adds	r3, #80	; 0x50
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	4a62      	ldr	r2, [pc, #392]	; (80047ec <stabilizationInit+0x310>)
 8004664:	2158      	movs	r1, #88	; 0x58
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	4413      	add	r3, r2
 800466c:	3354      	adds	r3, #84	; 0x54
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 8004674:	4b5e      	ldr	r3, [pc, #376]	; (80047f0 <stabilizationInit+0x314>)
 8004676:	789b      	ldrb	r3, [r3, #2]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 8090 	bne.w	800479e <stabilizationInit+0x2c2>
			rStabConstants[i].pJoyUnitCast = 1;
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	4a59      	ldr	r2, [pc, #356]	; (80047e8 <stabilizationInit+0x30c>)
 8004682:	214c      	movs	r1, #76	; 0x4c
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	3304      	adds	r3, #4
 800468c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004690:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	4a54      	ldr	r2, [pc, #336]	; (80047e8 <stabilizationInit+0x30c>)
 8004696:	214c      	movs	r1, #76	; 0x4c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	3308      	adds	r3, #8
 80046a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046a4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	4a4f      	ldr	r2, [pc, #316]	; (80047e8 <stabilizationInit+0x30c>)
 80046aa:	214c      	movs	r1, #76	; 0x4c
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	330c      	adds	r3, #12
 80046b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046b8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	4a4a      	ldr	r2, [pc, #296]	; (80047e8 <stabilizationInit+0x30c>)
 80046be:	214c      	movs	r1, #76	; 0x4c
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	3318      	adds	r3, #24
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	4a45      	ldr	r2, [pc, #276]	; (80047e8 <stabilizationInit+0x30c>)
 80046d2:	214c      	movs	r1, #76	; 0x4c
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	4413      	add	r3, r2
 80046da:	331c      	adds	r3, #28
 80046dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046e0:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	4a40      	ldr	r2, [pc, #256]	; (80047e8 <stabilizationInit+0x30c>)
 80046e6:	214c      	movs	r1, #76	; 0x4c
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	4413      	add	r3, r2
 80046ee:	3310      	adds	r3, #16
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	4a3b      	ldr	r2, [pc, #236]	; (80047e8 <stabilizationInit+0x30c>)
 80046fa:	214c      	movs	r1, #76	; 0x4c
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	4413      	add	r3, r2
 8004702:	3314      	adds	r3, #20
 8004704:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004708:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	4a36      	ldr	r2, [pc, #216]	; (80047e8 <stabilizationInit+0x30c>)
 800470e:	214c      	movs	r1, #76	; 0x4c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	3328      	adds	r3, #40	; 0x28
 8004718:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800471c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <stabilizationInit+0x30c>)
 8004722:	214c      	movs	r1, #76	; 0x4c
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	4413      	add	r3, r2
 800472a:	332c      	adds	r3, #44	; 0x2c
 800472c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004730:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	4a2c      	ldr	r2, [pc, #176]	; (80047e8 <stabilizationInit+0x30c>)
 8004736:	214c      	movs	r1, #76	; 0x4c
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	4413      	add	r3, r2
 800473e:	3330      	adds	r3, #48	; 0x30
 8004740:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <stabilizationInit+0x318>)
 8004742:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <stabilizationInit+0x30c>)
 8004748:	214c      	movs	r1, #76	; 0x4c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	3334      	adds	r3, #52	; 0x34
 8004752:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <stabilizationInit+0x31c>)
 8004754:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <stabilizationInit+0x30c>)
 800475a:	214c      	movs	r1, #76	; 0x4c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	333c      	adds	r3, #60	; 0x3c
 8004764:	4a25      	ldr	r2, [pc, #148]	; (80047fc <stabilizationInit+0x320>)
 8004766:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <stabilizationInit+0x30c>)
 800476c:	214c      	movs	r1, #76	; 0x4c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	3338      	adds	r3, #56	; 0x38
 8004776:	4a22      	ldr	r2, [pc, #136]	; (8004800 <stabilizationInit+0x324>)
 8004778:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	4a1a      	ldr	r2, [pc, #104]	; (80047e8 <stabilizationInit+0x30c>)
 800477e:	214c      	movs	r1, #76	; 0x4c
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	3344      	adds	r3, #68	; 0x44
 8004788:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <stabilizationInit+0x328>)
 800478a:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <stabilizationInit+0x30c>)
 8004790:	214c      	movs	r1, #76	; 0x4c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3348      	adds	r3, #72	; 0x48
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <stabilizationInit+0x32c>)
 800479c:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	3301      	adds	r3, #1
 80047a2:	71fb      	strb	r3, [r7, #7]
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	f67f ae9e 	bls.w	80044e8 <stabilizationInit+0xc>
		}
	}

	/////////DEBUG!!!!////////////////////////////////////////////
	rStabConstants[STAB_YAW].enable = false;
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <stabilizationInit+0x30c>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_ROLL].enable = false;
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <stabilizationInit+0x30c>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	rStabConstants[STAB_DEPTH].enable = false;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <stabilizationInit+0x30c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
	rStabConstants[STAB_MARCH].enable = false;
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <stabilizationInit+0x30c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rStabConstants[STAB_LAG].enable = false;
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <stabilizationInit+0x30c>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rStabConstants[STAB_PITCH].enable = false;
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <stabilizationInit+0x30c>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
	//////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rJoySpeed.roll;
 80047da:	4b04      	ldr	r3, [pc, #16]	; (80047ec <stabilizationInit+0x310>)
 80047dc:	4a0b      	ldr	r2, [pc, #44]	; (800480c <stabilizationInit+0x330>)
 80047de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 80047e2:	4b02      	ldr	r3, [pc, #8]	; (80047ec <stabilizationInit+0x310>)
 80047e4:	e014      	b.n	8004810 <stabilizationInit+0x334>
 80047e6:	bf00      	nop
 80047e8:	20001be8 	.word	0x20001be8
 80047ec:	20001db0 	.word	0x20001db0
 80047f0:	20001a78 	.word	0x20001a78
 80047f4:	c47a0000 	.word	0xc47a0000
 80047f8:	447a0000 	.word	0x447a0000
 80047fc:	459c4000 	.word	0x459c4000
 8004800:	c59c4000 	.word	0xc59c4000
 8004804:	46fa0000 	.word	0x46fa0000
 8004808:	c6fa0000 	.word	0xc6fa0000
 800480c:	20001b9c 	.word	0x20001b9c
 8004810:	4a96      	ldr	r2, [pc, #600]	; (8004a6c <stabilizationInit+0x590>)
 8004812:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 8004816:	4b96      	ldr	r3, [pc, #600]	; (8004a70 <stabilizationInit+0x594>)
 8004818:	4a96      	ldr	r2, [pc, #600]	; (8004a74 <stabilizationInit+0x598>)
 800481a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 800481e:	4b96      	ldr	r3, [pc, #600]	; (8004a78 <stabilizationInit+0x59c>)
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rJoySpeed.pitch;
 8004826:	4b92      	ldr	r3, [pc, #584]	; (8004a70 <stabilizationInit+0x594>)
 8004828:	4a94      	ldr	r2, [pc, #592]	; (8004a7c <stabilizationInit+0x5a0>)
 800482a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 800482e:	4b90      	ldr	r3, [pc, #576]	; (8004a70 <stabilizationInit+0x594>)
 8004830:	4a93      	ldr	r2, [pc, #588]	; (8004a80 <stabilizationInit+0x5a4>)
 8004832:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 8004836:	4b8e      	ldr	r3, [pc, #568]	; (8004a70 <stabilizationInit+0x594>)
 8004838:	4a92      	ldr	r2, [pc, #584]	; (8004a84 <stabilizationInit+0x5a8>)
 800483a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 800483e:	4b8e      	ldr	r3, [pc, #568]	; (8004a78 <stabilizationInit+0x59c>)
 8004840:	2201      	movs	r2, #1
 8004842:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rJoySpeed.yaw;
 8004846:	4b8a      	ldr	r3, [pc, #552]	; (8004a70 <stabilizationInit+0x594>)
 8004848:	4a8f      	ldr	r2, [pc, #572]	; (8004a88 <stabilizationInit+0x5ac>)
 800484a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 800484e:	4b88      	ldr	r3, [pc, #544]	; (8004a70 <stabilizationInit+0x594>)
 8004850:	4a8e      	ldr	r2, [pc, #568]	; (8004a8c <stabilizationInit+0x5b0>)
 8004852:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 8004856:	4b86      	ldr	r3, [pc, #536]	; (8004a70 <stabilizationInit+0x594>)
 8004858:	4a8d      	ldr	r2, [pc, #564]	; (8004a90 <stabilizationInit+0x5b4>)
 800485a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 800485e:	4b86      	ldr	r3, [pc, #536]	; (8004a78 <stabilizationInit+0x59c>)
 8004860:	2201      	movs	r2, #1
 8004862:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rJoySpeed.depth;
 8004866:	4b82      	ldr	r3, [pc, #520]	; (8004a70 <stabilizationInit+0x594>)
 8004868:	4a8a      	ldr	r2, [pc, #552]	; (8004a94 <stabilizationInit+0x5b8>)
 800486a:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 800486c:	4b80      	ldr	r3, [pc, #512]	; (8004a70 <stabilizationInit+0x594>)
 800486e:	4a8a      	ldr	r2, [pc, #552]	; (8004a98 <stabilizationInit+0x5bc>)
 8004870:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 8004872:	4b7f      	ldr	r3, [pc, #508]	; (8004a70 <stabilizationInit+0x594>)
 8004874:	4a89      	ldr	r2, [pc, #548]	; (8004a9c <stabilizationInit+0x5c0>)
 8004876:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8004878:	4b7f      	ldr	r3, [pc, #508]	; (8004a78 <stabilizationInit+0x59c>)
 800487a:	2200      	movs	r2, #0
 800487c:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rJoySpeed.lag;
 800487e:	4b7c      	ldr	r3, [pc, #496]	; (8004a70 <stabilizationInit+0x594>)
 8004880:	4a87      	ldr	r2, [pc, #540]	; (8004aa0 <stabilizationInit+0x5c4>)
 8004882:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 8004886:	4b7a      	ldr	r3, [pc, #488]	; (8004a70 <stabilizationInit+0x594>)
 8004888:	4a86      	ldr	r2, [pc, #536]	; (8004aa4 <stabilizationInit+0x5c8>)
 800488a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 800488e:	4b78      	ldr	r3, [pc, #480]	; (8004a70 <stabilizationInit+0x594>)
 8004890:	4a85      	ldr	r2, [pc, #532]	; (8004aa8 <stabilizationInit+0x5cc>)
 8004892:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 8004896:	4b78      	ldr	r3, [pc, #480]	; (8004a78 <stabilizationInit+0x59c>)
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rJoySpeed.march;
 800489e:	4b74      	ldr	r3, [pc, #464]	; (8004a70 <stabilizationInit+0x594>)
 80048a0:	4a82      	ldr	r2, [pc, #520]	; (8004aac <stabilizationInit+0x5d0>)
 80048a2:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 80048a4:	4b72      	ldr	r3, [pc, #456]	; (8004a70 <stabilizationInit+0x594>)
 80048a6:	4a82      	ldr	r2, [pc, #520]	; (8004ab0 <stabilizationInit+0x5d4>)
 80048a8:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 80048aa:	4b71      	ldr	r3, [pc, #452]	; (8004a70 <stabilizationInit+0x594>)
 80048ac:	4a7f      	ldr	r2, [pc, #508]	; (8004aac <stabilizationInit+0x5d0>)
 80048ae:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 80048b0:	4b71      	ldr	r3, [pc, #452]	; (8004a78 <stabilizationInit+0x59c>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


    //upload coef

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
 80048b8:	4b6f      	ldr	r3, [pc, #444]	; (8004a78 <stabilizationInit+0x59c>)
 80048ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048be:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 80048c2:	4b6d      	ldr	r3, [pc, #436]	; (8004a78 <stabilizationInit+0x59c>)
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pErrGain = 1;
 80048cc:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <stabilizationInit+0x59c>)
 80048ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048d2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 80048d6:	4b68      	ldr	r3, [pc, #416]	; (8004a78 <stabilizationInit+0x59c>)
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 1;
 80048e0:	4b65      	ldr	r3, [pc, #404]	; (8004a78 <stabilizationInit+0x59c>)
 80048e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 80048ea:	4b63      	ldr	r3, [pc, #396]	; (8004a78 <stabilizationInit+0x59c>)
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 80048f4:	4b60      	ldr	r3, [pc, #384]	; (8004a78 <stabilizationInit+0x59c>)
 80048f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048fa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	rStabConstants[STAB_YAW].pid.pGain = 0.1;
 80048fe:	4b5e      	ldr	r3, [pc, #376]	; (8004a78 <stabilizationInit+0x59c>)
 8004900:	4a6c      	ldr	r2, [pc, #432]	; (8004ab4 <stabilizationInit+0x5d8>)
 8004902:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pid.iGain = 0;
 8004906:	4b5c      	ldr	r3, [pc, #368]	; (8004a78 <stabilizationInit+0x59c>)
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].pid.iMax = 90;
 8004910:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <stabilizationInit+0x59c>)
 8004912:	4a69      	ldr	r2, [pc, #420]	; (8004ab8 <stabilizationInit+0x5dc>)
 8004914:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pid.iMin = -90;
 8004918:	4b57      	ldr	r3, [pc, #348]	; (8004a78 <stabilizationInit+0x59c>)
 800491a:	4a68      	ldr	r2, [pc, #416]	; (8004abc <stabilizationInit+0x5e0>)
 800491c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].pThrustersCast = 45;
 8004920:	4b55      	ldr	r3, [pc, #340]	; (8004a78 <stabilizationInit+0x59c>)
 8004922:	4a67      	ldr	r2, [pc, #412]	; (8004ac0 <stabilizationInit+0x5e4>)
 8004924:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	rStabConstants[STAB_YAW].pThrustersMax = 90;
 8004928:	4b53      	ldr	r3, [pc, #332]	; (8004a78 <stabilizationInit+0x59c>)
 800492a:	4a63      	ldr	r2, [pc, #396]	; (8004ab8 <stabilizationInit+0x5dc>)
 800492c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	rStabConstants[STAB_YAW].pThrustersMin = -90;
 8004930:	4b51      	ldr	r3, [pc, #324]	; (8004a78 <stabilizationInit+0x59c>)
 8004932:	4a62      	ldr	r2, [pc, #392]	; (8004abc <stabilizationInit+0x5e0>)
 8004934:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 8004938:	4b4f      	ldr	r3, [pc, #316]	; (8004a78 <stabilizationInit+0x59c>)
 800493a:	4a62      	ldr	r2, [pc, #392]	; (8004ac4 <stabilizationInit+0x5e8>)
 800493c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 8004940:	4b4d      	ldr	r3, [pc, #308]	; (8004a78 <stabilizationInit+0x59c>)
 8004942:	4a61      	ldr	r2, [pc, #388]	; (8004ac8 <stabilizationInit+0x5ec>)
 8004944:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    rStabConstants[STAB_YAW].joyIntegration = false;
 8004948:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <stabilizationInit+0x59c>)
 800494a:	2200      	movs	r2, #0
 800494c:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5


	rStabConstants[STAB_DEPTH].pJoyUnitCast = 1;
 8004950:	4b49      	ldr	r3, [pc, #292]	; (8004a78 <stabilizationInit+0x59c>)
 8004952:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004956:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 8004958:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <stabilizationInit+0x59c>)
 800495a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800495e:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 8004960:	4b45      	ldr	r3, [pc, #276]	; (8004a78 <stabilizationInit+0x59c>)
 8004962:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004966:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 0;//0.02;
 8004968:	4b43      	ldr	r3, [pc, #268]	; (8004a78 <stabilizationInit+0x59c>)
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = 1;//25;
 8004970:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <stabilizationInit+0x59c>)
 8004972:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004976:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 8004978:	4b3f      	ldr	r3, [pc, #252]	; (8004a78 <stabilizationInit+0x59c>)
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = 1;
 8004980:	4b3d      	ldr	r3, [pc, #244]	; (8004a78 <stabilizationInit+0x59c>)
 8004982:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004986:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 2;
 8004988:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <stabilizationInit+0x59c>)
 800498a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 0;
 8004990:	4b39      	ldr	r3, [pc, #228]	; (8004a78 <stabilizationInit+0x59c>)
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 90;
 8004998:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <stabilizationInit+0x59c>)
 800499a:	4a47      	ldr	r2, [pc, #284]	; (8004ab8 <stabilizationInit+0x5dc>)
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -90;
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <stabilizationInit+0x59c>)
 80049a0:	4a46      	ldr	r2, [pc, #280]	; (8004abc <stabilizationInit+0x5e0>)
 80049a2:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersCast = 0.3;
 80049a4:	4b34      	ldr	r3, [pc, #208]	; (8004a78 <stabilizationInit+0x59c>)
 80049a6:	4a49      	ldr	r2, [pc, #292]	; (8004acc <stabilizationInit+0x5f0>)
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].pThrustersMax = 90;
 80049aa:	4b33      	ldr	r3, [pc, #204]	; (8004a78 <stabilizationInit+0x59c>)
 80049ac:	4a42      	ldr	r2, [pc, #264]	; (8004ab8 <stabilizationInit+0x5dc>)
 80049ae:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -90;
 80049b0:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <stabilizationInit+0x59c>)
 80049b2:	4a42      	ldr	r2, [pc, #264]	; (8004abc <stabilizationInit+0x5e0>)
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 80049b6:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <stabilizationInit+0x59c>)
 80049b8:	4a42      	ldr	r2, [pc, #264]	; (8004ac4 <stabilizationInit+0x5e8>)
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 80049bc:	4b2e      	ldr	r3, [pc, #184]	; (8004a78 <stabilizationInit+0x59c>)
 80049be:	4a42      	ldr	r2, [pc, #264]	; (8004ac8 <stabilizationInit+0x5ec>)
 80049c0:	649a      	str	r2, [r3, #72]	; 0x48
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 80049c2:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <stabilizationInit+0x59c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_ROLL].pJoyUnitCast = 1;
 80049c8:	4b2b      	ldr	r3, [pc, #172]	; (8004a78 <stabilizationInit+0x59c>)
 80049ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049ce:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	rStabConstants[STAB_ROLL].pSpeedDyn = 0;
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <stabilizationInit+0x59c>)
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	rStabConstants[STAB_ROLL].pErrGain = 1;
 80049dc:	4b26      	ldr	r3, [pc, #152]	; (8004a78 <stabilizationInit+0x59c>)
 80049de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049e2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	rStabConstants[STAB_ROLL].aFilter[SPEED_FILTER].T = 0;
 80049e6:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <stabilizationInit+0x59c>)
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	rStabConstants[STAB_ROLL].aFilter[SPEED_FILTER].K = 1;
 80049f0:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <stabilizationInit+0x59c>)
 80049f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049f6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	rStabConstants[STAB_ROLL].aFilter[POS_FILTER].T = 0;
 80049fa:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <stabilizationInit+0x59c>)
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	rStabConstants[STAB_ROLL].aFilter[POS_FILTER].K = 1;
 8004a04:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <stabilizationInit+0x59c>)
 8004a06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a0a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	rStabConstants[STAB_ROLL].pid.pGain = 0.1;
 8004a0e:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <stabilizationInit+0x59c>)
 8004a10:	4a28      	ldr	r2, [pc, #160]	; (8004ab4 <stabilizationInit+0x5d8>)
 8004a12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	rStabConstants[STAB_ROLL].pid.iGain = 0;
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <stabilizationInit+0x59c>)
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	rStabConstants[STAB_ROLL].pid.iMax = 50;
 8004a20:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <stabilizationInit+0x59c>)
 8004a22:	4a2b      	ldr	r2, [pc, #172]	; (8004ad0 <stabilizationInit+0x5f4>)
 8004a24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	rStabConstants[STAB_ROLL].pid.iMin = -50;
 8004a28:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <stabilizationInit+0x59c>)
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <stabilizationInit+0x5f8>)
 8004a2c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	rStabConstants[STAB_ROLL].pThrustersCast = 40;
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <stabilizationInit+0x59c>)
 8004a32:	4a29      	ldr	r2, [pc, #164]	; (8004ad8 <stabilizationInit+0x5fc>)
 8004a34:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_ROLL].pThrustersMax = 90;
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <stabilizationInit+0x59c>)
 8004a3a:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <stabilizationInit+0x5dc>)
 8004a3c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_ROLL].pThrustersMin = -90;
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <stabilizationInit+0x59c>)
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <stabilizationInit+0x5e0>)
 8004a44:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	rStabConstants[STAB_ROLL].sOutSummatorMax = 32000;
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <stabilizationInit+0x59c>)
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <stabilizationInit+0x5e8>)
 8004a4c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_ROLL].sOutSummatorMin = -32000;
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <stabilizationInit+0x59c>)
 8004a52:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <stabilizationInit+0x5ec>)
 8004a54:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    rStabConstants[STAB_ROLL].joyIntegration = false;
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <stabilizationInit+0x59c>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131


}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	20001b30 	.word	0x20001b30
 8004a70:	20001db0 	.word	0x20001db0
 8004a74:	20001b14 	.word	0x20001b14
 8004a78:	20001be8 	.word	0x20001be8
 8004a7c:	20001ba0 	.word	0x20001ba0
 8004a80:	20001b34 	.word	0x20001b34
 8004a84:	20001b18 	.word	0x20001b18
 8004a88:	20001ba4 	.word	0x20001ba4
 8004a8c:	20001b38 	.word	0x20001b38
 8004a90:	20001b1c 	.word	0x20001b1c
 8004a94:	20001b98 	.word	0x20001b98
 8004a98:	20001b7c 	.word	0x20001b7c
 8004a9c:	20001b70 	.word	0x20001b70
 8004aa0:	20001b94 	.word	0x20001b94
 8004aa4:	20001e70 	.word	0x20001e70
 8004aa8:	20001a80 	.word	0x20001a80
 8004aac:	20001b90 	.word	0x20001b90
 8004ab0:	20001e18 	.word	0x20001e18
 8004ab4:	3dcccccd 	.word	0x3dcccccd
 8004ab8:	42b40000 	.word	0x42b40000
 8004abc:	c2b40000 	.word	0xc2b40000
 8004ac0:	42340000 	.word	0x42340000
 8004ac4:	46fa0000 	.word	0x46fa0000
 8004ac8:	c6fa0000 	.word	0xc6fa0000
 8004acc:	3e99999a 	.word	0x3e99999a
 8004ad0:	42480000 	.word	0x42480000
 8004ad4:	c2480000 	.word	0xc2480000
 8004ad8:	42200000 	.word	0x42200000

08004adc <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	4a6f      	ldr	r2, [pc, #444]	; (8004ca8 <stabilizationStart+0x1cc>)
 8004aea:	214c      	movs	r1, #76	; 0x4c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	4a6c      	ldr	r2, [pc, #432]	; (8004cac <stabilizationStart+0x1d0>)
 8004afa:	2158      	movs	r1, #88	; 0x58
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	3304      	adds	r3, #4
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	4968      	ldr	r1, [pc, #416]	; (8004cac <stabilizationStart+0x1d0>)
 8004b0c:	2058      	movs	r0, #88	; 0x58
 8004b0e:	fb00 f303 	mul.w	r3, r0, r3
 8004b12:	440b      	add	r3, r1
 8004b14:	3314      	adds	r3, #20
 8004b16:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	4a64      	ldr	r2, [pc, #400]	; (8004cac <stabilizationStart+0x1d0>)
 8004b1c:	2158      	movs	r1, #88	; 0x58
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	3308      	adds	r3, #8
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	495f      	ldr	r1, [pc, #380]	; (8004cac <stabilizationStart+0x1d0>)
 8004b2e:	2058      	movs	r0, #88	; 0x58
 8004b30:	fb00 f303 	mul.w	r3, r0, r3
 8004b34:	440b      	add	r3, r1
 8004b36:	3318      	adds	r3, #24
 8004b38:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	4a5b      	ldr	r2, [pc, #364]	; (8004cac <stabilizationStart+0x1d0>)
 8004b3e:	2158      	movs	r1, #88	; 0x58
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	3310      	adds	r3, #16
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d103      	bne.n	8004b5c <stabilizationStart+0x80>
{
	rSensors.yaw =0;
 8004b54:	4b56      	ldr	r3, [pc, #344]	; (8004cb0 <stabilizationStart+0x1d4>)
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	4a53      	ldr	r2, [pc, #332]	; (8004cac <stabilizationStart+0x1d0>)
 8004b60:	2158      	movs	r1, #88	; 0x58
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	331c      	adds	r3, #28
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	4a4e      	ldr	r2, [pc, #312]	; (8004cac <stabilizationStart+0x1d0>)
 8004b74:	2158      	movs	r1, #88	; 0x58
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	4949      	ldr	r1, [pc, #292]	; (8004cac <stabilizationStart+0x1d0>)
 8004b86:	2058      	movs	r0, #88	; 0x58
 8004b88:	fb00 f303 	mul.w	r3, r0, r3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3320      	adds	r3, #32
 8004b90:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	4a45      	ldr	r2, [pc, #276]	; (8004cac <stabilizationStart+0x1d0>)
 8004b96:	2158      	movs	r1, #88	; 0x58
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3324      	adds	r3, #36	; 0x24
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	4a40      	ldr	r2, [pc, #256]	; (8004cac <stabilizationStart+0x1d0>)
 8004baa:	2158      	movs	r1, #88	; 0x58
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3328      	adds	r3, #40	; 0x28
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	4a3b      	ldr	r2, [pc, #236]	; (8004cac <stabilizationStart+0x1d0>)
 8004bbe:	2158      	movs	r1, #88	; 0x58
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	332c      	adds	r3, #44	; 0x2c
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	4a36      	ldr	r2, [pc, #216]	; (8004cac <stabilizationStart+0x1d0>)
 8004bd2:	2158      	movs	r1, #88	; 0x58
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3330      	adds	r3, #48	; 0x30
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	4a31      	ldr	r2, [pc, #196]	; (8004cac <stabilizationStart+0x1d0>)
 8004be6:	2158      	movs	r1, #88	; 0x58
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	3334      	adds	r3, #52	; 0x34
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <stabilizationStart+0x1d0>)
 8004bfa:	2158      	movs	r1, #88	; 0x58
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	3338      	adds	r3, #56	; 0x38
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	4a27      	ldr	r2, [pc, #156]	; (8004cac <stabilizationStart+0x1d0>)
 8004c0e:	2158      	movs	r1, #88	; 0x58
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	4413      	add	r3, r2
 8004c16:	333c      	adds	r3, #60	; 0x3c
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	4a22      	ldr	r2, [pc, #136]	; (8004cac <stabilizationStart+0x1d0>)
 8004c22:	2158      	movs	r1, #88	; 0x58
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	3340      	adds	r3, #64	; 0x40
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <stabilizationStart+0x1d0>)
 8004c36:	2158      	movs	r1, #88	; 0x58
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3344      	adds	r3, #68	; 0x44
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	4a18      	ldr	r2, [pc, #96]	; (8004cac <stabilizationStart+0x1d0>)
 8004c4a:	2158      	movs	r1, #88	; 0x58
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	3348      	adds	r3, #72	; 0x48
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	; (8004cac <stabilizationStart+0x1d0>)
 8004c5e:	2158      	movs	r1, #88	; 0x58
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	334c      	adds	r3, #76	; 0x4c
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	4a0e      	ldr	r2, [pc, #56]	; (8004cac <stabilizationStart+0x1d0>)
 8004c72:	2158      	movs	r1, #88	; 0x58
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	3350      	adds	r3, #80	; 0x50
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8004c82:	f009 fd53 	bl	800e72c <xTaskGetTickCount>
 8004c86:	ee07 0a90 	vmov	s15, r0
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c90:	4a06      	ldr	r2, [pc, #24]	; (8004cac <stabilizationStart+0x1d0>)
 8004c92:	2158      	movs	r1, #88	; 0x58
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	3354      	adds	r3, #84	; 0x54
 8004c9c:	edc3 7a00 	vstr	s15, [r3]
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20001be8 	.word	0x20001be8
 8004cac:	20001db0 	.word	0x20001db0
 8004cb0:	20001b14 	.word	0x20001b14

08004cb4 <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 8004cb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	224c      	movs	r2, #76	; 0x4c
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	4ac7      	ldr	r2, [pc, #796]	; (8004fe8 <stabilizationUpdate+0x334>)
 8004cca:	4413      	add	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	2258      	movs	r2, #88	; 0x58
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	4ac5      	ldr	r2, [pc, #788]	; (8004fec <stabilizationUpdate+0x338>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 8004cdc:	f009 fd26 	bl	800e72c <xTaskGetTickCount>
 8004ce0:	ee07 0a90 	vmov	s15, r0
 8004ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf6:	ee17 0a90 	vmov	r0, s15
 8004cfa:	f7fc f95b 	bl	8000fb4 <fromTickToMs>
 8004cfe:	eeb0 7a40 	vmov.f32	s14, s0
 8004d02:	eddf 6abb 	vldr	s13, [pc, #748]	; 8004ff0 <stabilizationUpdate+0x33c>
 8004d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d0a:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8004d0e:	f009 fd0d 	bl	800e72c <xTaskGetTickCount>
 8004d12:	ee07 0a90 	vmov	s15, r0
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3318      	adds	r3, #24
 8004d24:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	edd3 7a00 	vldr	s15, [r3]
 8004d2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d34:	d02b      	beq.n	8004d8e <stabilizationUpdate+0xda>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	ed93 7a05 	vldr	s14, [r3, #20]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	edd3 6a00 	vldr	s13, [r3]
 8004d42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004d46:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004d4a:	eddf 6aad 	vldr	s13, [pc, #692]	; 8005000 <stabilizationUpdate+0x34c>
 8004d4e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	ed93 6a00 	vldr	s12, [r3]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004d6c:	ed9f 6aa1 	vldr	s12, [pc, #644]	; 8004ff4 <stabilizationUpdate+0x340>
 8004d70:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d7a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004d8c:	e01f      	b.n	8004dce <stabilizationUpdate+0x11a>
	}
	else {
		if(contour==STAB_PITCH)
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d110      	bne.n	8004db6 <stabilizationUpdate+0x102>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	ed93 7a00 	vldr	s14, [r3]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da6:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004ff8 <stabilizationUpdate+0x344>
 8004daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004db4:	e00b      	b.n	8004dce <stabilizationUpdate+0x11a>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K;//*10;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	ed93 7a00 	vldr	s14, [r3]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	3310      	adds	r3, #16
 8004dda:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	edd3 7a00 	vldr	s15, [r3]
 8004de2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dea:	d061      	beq.n	8004eb0 <stabilizationUpdate+0x1fc>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fb fb51 	bl	8000498 <__aeabi_f2d>
 8004df6:	4604      	mov	r4, r0
 8004df8:	460d      	mov	r5, r1
 8004dfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dfe:	eeb1 7a67 	vneg.f32	s14, s15
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	edd3 7a00 	vldr	s15, [r3]
 8004e08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e0c:	ee16 0a90 	vmov	r0, s13
 8004e10:	f7fb fb42 	bl	8000498 <__aeabi_f2d>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	ec43 2b10 	vmov	d0, r2, r3
 8004e1c:	f00b fc50 	bl	80106c0 <exp>
 8004e20:	ec53 2b10 	vmov	r2, r3, d0
 8004e24:	4620      	mov	r0, r4
 8004e26:	4629      	mov	r1, r5
 8004e28:	f7fb fb8e 	bl	8000548 <__aeabi_dmul>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4690      	mov	r8, r2
 8004e32:	4699      	mov	r9, r3
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	ed93 7a06 	vldr	s14, [r3, #24]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e44:	ee17 0a90 	vmov	r0, s15
 8004e48:	f7fb fb26 	bl	8000498 <__aeabi_f2d>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	460d      	mov	r5, r1
 8004e50:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e54:	eeb1 7a67 	vneg.f32	s14, s15
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	edd3 7a00 	vldr	s15, [r3]
 8004e5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e62:	ee16 0a90 	vmov	r0, s13
 8004e66:	f7fb fb17 	bl	8000498 <__aeabi_f2d>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	ec43 2b10 	vmov	d0, r2, r3
 8004e72:	f00b fc25 	bl	80106c0 <exp>
 8004e76:	ec53 2b10 	vmov	r2, r3, d0
 8004e7a:	f04f 0000 	mov.w	r0, #0
 8004e7e:	495f      	ldr	r1, [pc, #380]	; (8004ffc <stabilizationUpdate+0x348>)
 8004e80:	f7fb f9aa 	bl	80001d8 <__aeabi_dsub>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4620      	mov	r0, r4
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	f7fb fb5c 	bl	8000548 <__aeabi_dmul>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4640      	mov	r0, r8
 8004e96:	4649      	mov	r1, r9
 8004e98:	f7fb f9a0 	bl	80001dc <__adddf3>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f7fb fe12 	bl	8000acc <__aeabi_d2f>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40
 8004eae:	e00b      	b.n	8004ec8 <stabilizationUpdate+0x214>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	ed93 7a00 	vldr	s14, [r3]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	edd3 6a00 	vldr	s13, [r3]
 8004ee0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004efe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004f02:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	edd3 7a00 	vldr	s15, [r3]
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00f      	beq.n	8004f58 <stabilizationUpdate+0x2a4>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	edd3 6a07 	vldr	s13, [r3, #28]
 8004f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	edc3 7a08 	vstr	s15, [r3, #32]
 8004f56:	e003      	b.n	8004f60 <stabilizationUpdate+0x2ac>
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004f98:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004fc0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005000 <stabilizationUpdate+0x34c>
 8004fc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd0:	dd18      	ble.n	8005004 <stabilizationUpdate+0x350>
    	state->pid_iValue = constants->pid.iMax*100;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004fd8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005000 <stabilizationUpdate+0x34c>
 8004fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8004fe6:	e026      	b.n	8005036 <stabilizationUpdate+0x382>
 8004fe8:	20001be8 	.word	0x20001be8
 8004fec:	20001db0 	.word	0x20001db0
 8004ff0:	447a0000 	.word	0x447a0000
 8004ff4:	428c0000 	.word	0x428c0000
 8004ff8:	437a0000 	.word	0x437a0000
 8004ffc:	3ff00000 	.word	0x3ff00000
 8005000:	42c80000 	.word	0x42c80000
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005010:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8005000 <stabilizationUpdate+0x34c>
 8005014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800501c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005020:	d509      	bpl.n	8005036 <stabilizationUpdate+0x382>
    	state->pid_iValue = constants->pid.iMin*100;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005028:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8005000 <stabilizationUpdate+0x34c>
 800502c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800504c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	edd3 6a00 	vldr	s13, [r3]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	edd3 7a02 	vldr	s15, [r3, #8]
 800506a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800506e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	3320      	adds	r3, #32
 8005092:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	edd3 7a00 	vldr	s15, [r3]
 800509a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	d061      	beq.n	8005168 <stabilizationUpdate+0x4b4>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fb f9f5 	bl	8000498 <__aeabi_f2d>
 80050ae:	4604      	mov	r4, r0
 80050b0:	460d      	mov	r5, r1
 80050b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80050b6:	eeb1 7a67 	vneg.f32	s14, s15
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	edd3 7a00 	vldr	s15, [r3]
 80050c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80050c4:	ee16 0a90 	vmov	r0, s13
 80050c8:	f7fb f9e6 	bl	8000498 <__aeabi_f2d>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	ec43 2b10 	vmov	d0, r2, r3
 80050d4:	f00b faf4 	bl	80106c0 <exp>
 80050d8:	ec53 2b10 	vmov	r2, r3, d0
 80050dc:	4620      	mov	r0, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	f7fb fa32 	bl	8000548 <__aeabi_dmul>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4690      	mov	r8, r2
 80050ea:	4699      	mov	r9, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80050f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fc:	ee17 0a90 	vmov	r0, s15
 8005100:	f7fb f9ca 	bl	8000498 <__aeabi_f2d>
 8005104:	4604      	mov	r4, r0
 8005106:	460d      	mov	r5, r1
 8005108:	edd7 7a03 	vldr	s15, [r7, #12]
 800510c:	eeb1 7a67 	vneg.f32	s14, s15
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	edd3 7a00 	vldr	s15, [r3]
 8005116:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800511a:	ee16 0a90 	vmov	r0, s13
 800511e:	f7fb f9bb 	bl	8000498 <__aeabi_f2d>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	ec43 2b10 	vmov	d0, r2, r3
 800512a:	f00b fac9 	bl	80106c0 <exp>
 800512e:	ec53 2b10 	vmov	r2, r3, d0
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	492d      	ldr	r1, [pc, #180]	; (80051ec <stabilizationUpdate+0x538>)
 8005138:	f7fb f84e 	bl	80001d8 <__aeabi_dsub>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4620      	mov	r0, r4
 8005142:	4629      	mov	r1, r5
 8005144:	f7fb fa00 	bl	8000548 <__aeabi_dmul>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4640      	mov	r0, r8
 800514e:	4649      	mov	r1, r9
 8005150:	f7fb f844 	bl	80001dc <__adddf3>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4610      	mov	r0, r2
 800515a:	4619      	mov	r1, r3
 800515c:	f7fb fcb6 	bl	8000acc <__aeabi_d2f>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	64da      	str	r2, [r3, #76]	; 0x4c
 8005166:	e00a      	b.n	800517e <stabilizationUpdate+0x4ca>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	edd3 7a01 	vldr	s15, [r3, #4]
 8005174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	649a      	str	r2, [r3, #72]	; 0x48

    state->thrustersFiltered = constants->pThrustersCast*state->speedError;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

    if(state->thrustersFiltered > constants->pThrustersMax) {
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80051a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b0:	dd04      	ble.n	80051bc <stabilizationUpdate+0x508>
    	state->thrustersFiltered = constants->pThrustersMax;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80051ba:	e00e      	b.n	80051da <stabilizationUpdate+0x526>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80051c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d0:	d503      	bpl.n	80051da <stabilizationUpdate+0x526>
    	state->thrustersFiltered = constants->pThrustersMin;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = state->thrustersFiltered;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051e2:	bf00      	nop
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051ec:	3ff00000 	.word	0x3ff00000

080051f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f6:	4b11      	ldr	r3, [pc, #68]	; (800523c <HAL_MspInit+0x4c>)
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	4a10      	ldr	r2, [pc, #64]	; (800523c <HAL_MspInit+0x4c>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	6193      	str	r3, [r2, #24]
 8005202:	4b0e      	ldr	r3, [pc, #56]	; (800523c <HAL_MspInit+0x4c>)
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_MspInit+0x4c>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	4a0a      	ldr	r2, [pc, #40]	; (800523c <HAL_MspInit+0x4c>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	61d3      	str	r3, [r2, #28]
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <HAL_MspInit+0x4c>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	210f      	movs	r1, #15
 800522a:	f06f 0001 	mvn.w	r0, #1
 800522e:	f000 ff53 	bl	80060d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000

08005240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08c      	sub	sp, #48	; 0x30
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005250:	4b2e      	ldr	r3, [pc, #184]	; (800530c <HAL_InitTick+0xcc>)
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	4a2d      	ldr	r2, [pc, #180]	; (800530c <HAL_InitTick+0xcc>)
 8005256:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800525a:	6193      	str	r3, [r2, #24]
 800525c:	4b2b      	ldr	r3, [pc, #172]	; (800530c <HAL_InitTick+0xcc>)
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005268:	f107 020c 	add.w	r2, r7, #12
 800526c:	f107 0310 	add.w	r3, r7, #16
 8005270:	4611      	mov	r1, r2
 8005272:	4618      	mov	r0, r3
 8005274:	f005 f9e0 	bl	800a638 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005278:	f005 f9bc 	bl	800a5f4 <HAL_RCC_GetPCLK2Freq>
 800527c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	4a23      	ldr	r2, [pc, #140]	; (8005310 <HAL_InitTick+0xd0>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	0c9b      	lsrs	r3, r3, #18
 8005288:	3b01      	subs	r3, #1
 800528a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800528c:	4b21      	ldr	r3, [pc, #132]	; (8005314 <HAL_InitTick+0xd4>)
 800528e:	4a22      	ldr	r2, [pc, #136]	; (8005318 <HAL_InitTick+0xd8>)
 8005290:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005292:	4b20      	ldr	r3, [pc, #128]	; (8005314 <HAL_InitTick+0xd4>)
 8005294:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005298:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800529a:	4a1e      	ldr	r2, [pc, #120]	; (8005314 <HAL_InitTick+0xd4>)
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80052a0:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <HAL_InitTick+0xd4>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052a6:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <HAL_InitTick+0xd4>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ac:	4b19      	ldr	r3, [pc, #100]	; (8005314 <HAL_InitTick+0xd4>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80052b2:	4818      	ldr	r0, [pc, #96]	; (8005314 <HAL_InitTick+0xd4>)
 80052b4:	f005 fba2 	bl	800a9fc <HAL_TIM_Base_Init>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80052be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d11b      	bne.n	80052fe <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80052c6:	4813      	ldr	r0, [pc, #76]	; (8005314 <HAL_InitTick+0xd4>)
 80052c8:	f005 fbf0 	bl	800aaac <HAL_TIM_Base_Start_IT>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80052d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d111      	bne.n	80052fe <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80052da:	2019      	movs	r0, #25
 80052dc:	f000 ff18 	bl	8006110 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	d808      	bhi.n	80052f8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80052e6:	2200      	movs	r2, #0
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	2019      	movs	r0, #25
 80052ec:	f000 fef4 	bl	80060d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052f0:	4a0a      	ldr	r2, [pc, #40]	; (800531c <HAL_InitTick+0xdc>)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e002      	b.n	80052fe <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80052fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005302:	4618      	mov	r0, r3
 8005304:	3730      	adds	r7, #48	; 0x30
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000
 8005310:	431bde83 	.word	0x431bde83
 8005314:	20002314 	.word	0x20002314
 8005318:	40012c00 	.word	0x40012c00
 800531c:	200000b4 	.word	0x200000b4

08005320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005324:	e7fe      	b.n	8005324 <NMI_Handler+0x4>

08005326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800532a:	e7fe      	b.n	800532a <HardFault_Handler+0x4>

0800532c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005330:	e7fe      	b.n	8005330 <MemManage_Handler+0x4>

08005332 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005336:	e7fe      	b.n	8005336 <BusFault_Handler+0x4>

08005338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800533c:	e7fe      	b.n	800533c <UsageFault_Handler+0x4>

0800533e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005342:	bf00      	nop
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005350:	4802      	ldr	r0, [pc, #8]	; (800535c <DMA1_Channel4_IRQHandler+0x10>)
 8005352:	f001 f816 	bl	8006382 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005356:	bf00      	nop
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	200025d0 	.word	0x200025d0

08005360 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005364:	4802      	ldr	r0, [pc, #8]	; (8005370 <DMA1_Channel5_IRQHandler+0x10>)
 8005366:	f001 f80c 	bl	8006382 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20002614 	.word	0x20002614

08005374 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005378:	4802      	ldr	r0, [pc, #8]	; (8005384 <DMA1_Channel6_IRQHandler+0x10>)
 800537a:	f001 f802 	bl	8006382 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20002658 	.word	0x20002658

08005388 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800538c:	4802      	ldr	r0, [pc, #8]	; (8005398 <DMA1_Channel7_IRQHandler+0x10>)
 800538e:	f000 fff8 	bl	8006382 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	2000269c 	.word	0x2000269c

0800539c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80053a0:	4802      	ldr	r0, [pc, #8]	; (80053ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80053a2:	f005 fbed 	bl	800ab80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20002314 	.word	0x20002314

080053b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80053b4:	4802      	ldr	r0, [pc, #8]	; (80053c0 <I2C1_EV_IRQHandler+0x10>)
 80053b6:	f002 f8e7 	bl	8007588 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80053ba:	bf00      	nop
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20002120 	.word	0x20002120

080053c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80053c8:	4802      	ldr	r0, [pc, #8]	; (80053d4 <USART1_IRQHandler+0x10>)
 80053ca:	f006 f93f 	bl	800b64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20002438 	.word	0x20002438

080053d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053dc:	4802      	ldr	r0, [pc, #8]	; (80053e8 <USART2_IRQHandler+0x10>)
 80053de:	f006 f935 	bl	800b64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200024c0 	.word	0x200024c0

080053ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80053f0:	4802      	ldr	r0, [pc, #8]	; (80053fc <USART3_IRQHandler+0x10>)
 80053f2:	f006 f92b 	bl	800b64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20002548 	.word	0x20002548

08005400 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005404:	4802      	ldr	r0, [pc, #8]	; (8005410 <UART4_IRQHandler+0x10>)
 8005406:	f006 f921 	bl	800b64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	200023b0 	.word	0x200023b0

08005414 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <SystemInit+0x20>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	4a05      	ldr	r2, [pc, #20]	; (8005434 <SystemInit+0x20>)
 8005420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005428:	bf00      	nop
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	e000ed00 	.word	0xe000ed00

08005438 <thrustersInit>:
    {0.0, 0.0, 1.0, 0.0, -1.0},
    {1.0, 1.0, 0.0, 1.0, 0.0}
};

void thrustersInit()
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
  rThrusters[FDR].address = 1; //Forward Left
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <thrustersInit+0xb8>)
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
  rThrusters[FDL].address = 2; //Forward Down Left
 8005444:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <thrustersInit+0xb8>)
 8005446:	2202      	movs	r2, #2
 8005448:	761a      	strb	r2, [r3, #24]
  rThrusters[BDR].address = 3; //Back Down Right
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <thrustersInit+0xb8>)
 800544c:	2203      	movs	r2, #3
 800544e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  rThrusters[BDL].address = 4; //Back Down Left
 8005452:	4b27      	ldr	r3, [pc, #156]	; (80054f0 <thrustersInit+0xb8>)
 8005454:	2204      	movs	r2, #4
 8005456:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  rThrusters[FUR].address = 5; //Forward Up Right
 800545a:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <thrustersInit+0xb8>)
 800545c:	2205      	movs	r2, #5
 800545e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  rThrusters[FUL].address = 6; //Forward Up Left
 8005462:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <thrustersInit+0xb8>)
 8005464:	2206      	movs	r2, #6
 8005466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
//  rThrusters[BUR].address = 7; //Back Up Right
//  rThrusters[BUL].address = 8; //Back Up Left

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800546a:	2300      	movs	r3, #0
 800546c:	71fb      	strb	r3, [r7, #7]
 800546e:	e034      	b.n	80054da <thrustersInit+0xa2>
    rThrusters[i].desiredSpeed = 0;
 8005470:	79fa      	ldrb	r2, [r7, #7]
 8005472:	491f      	ldr	r1, [pc, #124]	; (80054f0 <thrustersInit+0xb8>)
 8005474:	4613      	mov	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	4413      	add	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	440b      	add	r3, r1
 800547e:	3302      	adds	r3, #2
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
    rThrusters[i].kForward = 0.7;
 8005484:	79fa      	ldrb	r2, [r7, #7]
 8005486:	491a      	ldr	r1, [pc, #104]	; (80054f0 <thrustersInit+0xb8>)
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	440b      	add	r3, r1
 8005492:	330c      	adds	r3, #12
 8005494:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <thrustersInit+0xbc>)
 8005496:	601a      	str	r2, [r3, #0]
    rThrusters[i].kBackward = 0.7;
 8005498:	79fa      	ldrb	r2, [r7, #7]
 800549a:	4915      	ldr	r1, [pc, #84]	; (80054f0 <thrustersInit+0xb8>)
 800549c:	4613      	mov	r3, r2
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4413      	add	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	440b      	add	r3, r1
 80054a6:	3310      	adds	r3, #16
 80054a8:	4a12      	ldr	r2, [pc, #72]	; (80054f4 <thrustersInit+0xbc>)
 80054aa:	601a      	str	r2, [r3, #0]
    rThrusters[i].sForward = 127;
 80054ac:	79fa      	ldrb	r2, [r7, #7]
 80054ae:	4910      	ldr	r1, [pc, #64]	; (80054f0 <thrustersInit+0xb8>)
 80054b0:	4613      	mov	r3, r2
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	4413      	add	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	440b      	add	r3, r1
 80054ba:	3314      	adds	r3, #20
 80054bc:	227f      	movs	r2, #127	; 0x7f
 80054be:	701a      	strb	r2, [r3, #0]
    rThrusters[i].sBackward = 127;
 80054c0:	79fa      	ldrb	r2, [r7, #7]
 80054c2:	490b      	ldr	r1, [pc, #44]	; (80054f0 <thrustersInit+0xb8>)
 80054c4:	4613      	mov	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	440b      	add	r3, r1
 80054ce:	3315      	adds	r3, #21
 80054d0:	227f      	movs	r2, #127	; 0x7f
 80054d2:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	3301      	adds	r3, #1
 80054d8:	71fb      	strb	r3, [r7, #7]
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	2b05      	cmp	r3, #5
 80054de:	d9c7      	bls.n	8005470 <thrustersInit+0x38>
  }

}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20001a84 	.word	0x20001a84
 80054f4:	3f333333 	.word	0x3f333333

080054f8 <resetThrusters>:

void resetThrusters()
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
  rJoySpeed.depth = 0;
 80054fe:	4b19      	ldr	r3, [pc, #100]	; (8005564 <resetThrusters+0x6c>)
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	609a      	str	r2, [r3, #8]
  rJoySpeed.lag = 0;
 8005506:	4b17      	ldr	r3, [pc, #92]	; (8005564 <resetThrusters+0x6c>)
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	605a      	str	r2, [r3, #4]
  rJoySpeed.march = 0;
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <resetThrusters+0x6c>)
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
  rJoySpeed.pitch = 0;
 8005516:	4b13      	ldr	r3, [pc, #76]	; (8005564 <resetThrusters+0x6c>)
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	611a      	str	r2, [r3, #16]
  rJoySpeed.roll = 0;
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <resetThrusters+0x6c>)
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	60da      	str	r2, [r3, #12]
  rJoySpeed.yaw = 0;
 8005526:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <resetThrusters+0x6c>)
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	615a      	str	r2, [r3, #20]

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800552e:	2300      	movs	r3, #0
 8005530:	71fb      	strb	r3, [r7, #7]
 8005532:	e00c      	b.n	800554e <resetThrusters+0x56>
    rThrusters[i].desiredSpeed = 0;
 8005534:	79fa      	ldrb	r2, [r7, #7]
 8005536:	490c      	ldr	r1, [pc, #48]	; (8005568 <resetThrusters+0x70>)
 8005538:	4613      	mov	r3, r2
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	4413      	add	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	440b      	add	r3, r1
 8005542:	3302      	adds	r3, #2
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	3301      	adds	r3, #1
 800554c:	71fb      	strb	r3, [r7, #7]
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	2b05      	cmp	r3, #5
 8005552:	d9ef      	bls.n	8005534 <resetThrusters+0x3c>
  }

}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20001b90 	.word	0x20001b90
 8005568:	20001a84 	.word	0x20001a84

0800556c <fillThrustersRequest>:

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 8005578:	23aa      	movs	r3, #170	; 0xaa
 800557a:	723b      	strb	r3, [r7, #8]
    res.type = 0x01;
 800557c:	2301      	movs	r3, #1
 800557e:	727b      	strb	r3, [r7, #9]
    res.address = 0xAF;
 8005580:	23af      	movs	r3, #175	; 0xaf
 8005582:	72bb      	strb	r3, [r7, #10]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e012      	b.n	80055b0 <fillThrustersRequest+0x44>
//    	}
//    	else if(velocity < 0) {
//    		velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
//    	}

    	res.velocity[i] = rThrusters[i].desiredSpeed;
 800558a:	4916      	ldr	r1, [pc, #88]	; (80055e4 <fillThrustersRequest+0x78>)
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4613      	mov	r3, r2
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	4413      	add	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	440b      	add	r3, r1
 8005598:	3302      	adds	r3, #2
 800559a:	f993 1000 	ldrsb.w	r1, [r3]
 800559e:	f107 020b 	add.w	r2, r7, #11
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	4413      	add	r3, r2
 80055a6:	460a      	mov	r2, r1
 80055a8:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3301      	adds	r3, #1
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	dde9      	ble.n	800558a <fillThrustersRequest+0x1e>
    }
    res.pwm_servo = rDevice[GRAB].force;
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <fillThrustersRequest+0x7c>)
 80055b8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80055bc:	747b      	strb	r3, [r7, #17]
    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	461a      	mov	r2, r3
 80055c2:	f107 0308 	add.w	r3, r7, #8
 80055c6:	cb03      	ldmia	r3!, {r0, r1}
 80055c8:	6010      	str	r0, [r2, #0]
 80055ca:	6051      	str	r1, [r2, #4]
 80055cc:	8819      	ldrh	r1, [r3, #0]
 80055ce:	789b      	ldrb	r3, [r3, #2]
 80055d0:	8111      	strh	r1, [r2, #8]
 80055d2:	7293      	strb	r3, [r2, #10]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 80055d4:	210b      	movs	r1, #11
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fc fa9a 	bl	8001b10 <AddChecksumm8bVma>
}
 80055dc:	bf00      	nop
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20001a84 	.word	0x20001a84
 80055e8:	20001ba8 	.word	0x20001ba8

080055ec <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 80055f8:	2109      	movs	r1, #9
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fc fa5b 	bl	8001ab6 <IsChecksumm8bCorrectVma>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01f      	beq.n	8005646 <fillThrustersResponse+0x5a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01b      	beq.n	8005646 <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	f107 030c 	add.w	r3, r7, #12
 8005614:	6810      	ldr	r0, [r2, #0]
 8005616:	6851      	ldr	r1, [r2, #4]
 8005618:	c303      	stmia	r3!, {r0, r1}
 800561a:	7a12      	ldrb	r2, [r2, #8]
 800561c:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	8a38      	ldrh	r0, [r7, #16]
 8005622:	490e      	ldr	r1, [pc, #56]	; (800565c <fillThrustersResponse+0x70>)
 8005624:	4613      	mov	r3, r2
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4413      	add	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	440b      	add	r3, r1
 800562e:	3304      	adds	r3, #4
 8005630:	4602      	mov	r2, r0
 8005632:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 8005634:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <fillThrustersResponse+0x74>)
 8005636:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800563a:	3301      	adds	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <fillThrustersResponse+0x74>)
 8005640:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8005644:	e005      	b.n	8005652 <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <fillThrustersResponse+0x74>)
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	3301      	adds	r3, #1
 800564c:	4a04      	ldr	r2, [pc, #16]	; (8005660 <fillThrustersResponse+0x74>)
 800564e:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20001a84 	.word	0x20001a84
 8005660:	2000018c 	.word	0x2000018c

08005664 <formThrustVectors>:

void formThrustVectors()
{
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b08f      	sub	sp, #60	; 0x3c
 8005668:	af00      	add	r7, sp, #0
  float velocity[THRUSTERS_NUMBER];
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800566a:	2300      	movs	r3, #0
 800566c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005670:	e00d      	b.n	800568e <formThrustVectors+0x2a>
    velocity[i] = 0;
 8005672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	3338      	adds	r3, #56	; 0x38
 800567a:	443b      	add	r3, r7
 800567c:	3b1c      	subs	r3, #28
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005688:	3301      	adds	r3, #1
 800568a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800568e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005692:	2b05      	cmp	r3, #5
 8005694:	d9ed      	bls.n	8005672 <formThrustVectors+0xe>
//  Uz = rStabState[STAB_DEPTH].outputSignal;
//  Upsi = rStabState[STAB_YAW].outputSignal;
//  Ugamma = rStabState[STAB_ROLL].outputSignal;
//  Uteta = rJoySpeed.pitch;

  U[STAB_MARCH] = rJoySpeed.march;
 8005696:	4b67      	ldr	r3, [pc, #412]	; (8005834 <formThrustVectors+0x1d0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60bb      	str	r3, [r7, #8]
  U[STAB_LAG] = rJoySpeed.lag;
 800569c:	4b65      	ldr	r3, [pc, #404]	; (8005834 <formThrustVectors+0x1d0>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  U[STAB_DEPTH] = rJoySpeed.depth;
 80056a2:	4b64      	ldr	r3, [pc, #400]	; (8005834 <formThrustVectors+0x1d0>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	607b      	str	r3, [r7, #4]
  U[STAB_YAW] = rJoySpeed.yaw;
 80056a8:	4b62      	ldr	r3, [pc, #392]	; (8005834 <formThrustVectors+0x1d0>)
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	613b      	str	r3, [r7, #16]
  U[STAB_ROLL] = rJoySpeed.roll;
 80056ae:	4b61      	ldr	r3, [pc, #388]	; (8005834 <formThrustVectors+0x1d0>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	617b      	str	r3, [r7, #20]
  U[STAB_PITCH] = rJoySpeed.pitch;
 80056b4:	4b5f      	ldr	r3, [pc, #380]	; (8005834 <formThrustVectors+0x1d0>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	61bb      	str	r3, [r7, #24]

  for(uint8_t i = 0; i < 6; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80056c0:	e01e      	b.n	8005700 <formThrustVectors+0x9c>
  {
	if(rStabConstants[i].enable)
 80056c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056c6:	4a5c      	ldr	r2, [pc, #368]	; (8005838 <formThrustVectors+0x1d4>)
 80056c8:	214c      	movs	r1, #76	; 0x4c
 80056ca:	fb01 f303 	mul.w	r3, r1, r3
 80056ce:	4413      	add	r3, r2
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00f      	beq.n	80056f6 <formThrustVectors+0x92>
		U[i] = rStabState[i].outputSignal;
 80056d6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80056da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056de:	4957      	ldr	r1, [pc, #348]	; (800583c <formThrustVectors+0x1d8>)
 80056e0:	2058      	movs	r0, #88	; 0x58
 80056e2:	fb00 f202 	mul.w	r2, r0, r2
 80056e6:	440a      	add	r2, r1
 80056e8:	3250      	adds	r2, #80	; 0x50
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	3338      	adds	r3, #56	; 0x38
 80056f0:	443b      	add	r3, r7
 80056f2:	3b34      	subs	r3, #52	; 0x34
 80056f4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < 6; i++)
 80056f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056fa:	3301      	adds	r3, #1
 80056fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005700:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005704:	2b05      	cmp	r3, #5
 8005706:	d9dc      	bls.n	80056c2 <formThrustVectors+0x5e>
  }

  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800570e:	e087      	b.n	8005820 <formThrustVectors+0x1bc>
  {
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 8005710:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005714:	494a      	ldr	r1, [pc, #296]	; (8005840 <formThrustVectors+0x1dc>)
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	ed93 7a00 	vldr	s14, [r3]
 8005724:	edd7 7a02 	vldr	s15, [r7, #8]
 8005728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800572c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005730:	4943      	ldr	r1, [pc, #268]	; (8005840 <formThrustVectors+0x1dc>)
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3304      	adds	r3, #4
 800573e:	edd3 6a00 	vldr	s13, [r3]
 8005742:	edd7 7a03 	vldr	s15, [r7, #12]
 8005746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800574a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800574e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005752:	493b      	ldr	r1, [pc, #236]	; (8005840 <formThrustVectors+0x1dc>)
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3308      	adds	r3, #8
 8005760:	edd3 6a00 	vldr	s13, [r3]
 8005764:	edd7 7a01 	vldr	s15, [r7, #4]
 8005768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800576c:	ee37 7a27 	vadd.f32	s14, s14, s15
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 8005770:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005774:	4932      	ldr	r1, [pc, #200]	; (8005840 <formThrustVectors+0x1dc>)
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	330c      	adds	r3, #12
 8005782:	edd3 6a00 	vldr	s13, [r3]
 8005786:	edd7 7a04 	vldr	s15, [r7, #16]
 800578a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800578e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005792:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005796:	492a      	ldr	r1, [pc, #168]	; (8005840 <formThrustVectors+0x1dc>)
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	3310      	adds	r3, #16
 80057a4:	edd3 6a00 	vldr	s13, [r3]
 80057a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80057ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 80057b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 80057b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	3338      	adds	r3, #56	; 0x38
 80057bc:	443b      	add	r3, r7
 80057be:	3b1c      	subs	r3, #28
 80057c0:	edc3 7a00 	vstr	s15, [r3]
    if(!thruster_init)
 80057c4:	4b1f      	ldr	r3, [pc, #124]	; (8005844 <formThrustVectors+0x1e0>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d119      	bne.n	8005800 <formThrustVectors+0x19c>
    {
    	rThrusters[i].desiredSpeed = resizeFloatToInt8(velocity[i]);
 80057cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	3338      	adds	r3, #56	; 0x38
 80057d4:	443b      	add	r3, r7
 80057d6:	3b1c      	subs	r3, #28
 80057d8:	edd3 7a00 	vldr	s15, [r3]
 80057dc:	f897 4035 	ldrb.w	r4, [r7, #53]	; 0x35
 80057e0:	eeb0 0a67 	vmov.f32	s0, s15
 80057e4:	f000 f832 	bl	800584c <resizeFloatToInt8>
 80057e8:	4603      	mov	r3, r0
 80057ea:	4619      	mov	r1, r3
 80057ec:	4a16      	ldr	r2, [pc, #88]	; (8005848 <formThrustVectors+0x1e4>)
 80057ee:	4623      	mov	r3, r4
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4423      	add	r3, r4
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	3302      	adds	r3, #2
 80057fa:	460a      	mov	r2, r1
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e00a      	b.n	8005816 <formThrustVectors+0x1b2>
    }
    else
    	rThrusters[i].desiredSpeed = 0;
 8005800:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005804:	4910      	ldr	r1, [pc, #64]	; (8005848 <formThrustVectors+0x1e4>)
 8005806:	4613      	mov	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	4413      	add	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	440b      	add	r3, r1
 8005810:	3302      	adds	r3, #2
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 8005816:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800581a:	3301      	adds	r3, #1
 800581c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005820:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005824:	2b05      	cmp	r3, #5
 8005826:	f67f af73 	bls.w	8005710 <formThrustVectors+0xac>
  	}

}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	373c      	adds	r7, #60	; 0x3c
 8005830:	46bd      	mov	sp, r7
 8005832:	bd90      	pop	{r4, r7, pc}
 8005834:	20001b90 	.word	0x20001b90
 8005838:	20001be8 	.word	0x20001be8
 800583c:	20001db0 	.word	0x20001db0
 8005840:	2000003c 	.word	0x2000003c
 8005844:	20002360 	.word	0x20002360
 8005848:	20001a84 	.word	0x20001a84

0800584c <resizeFloatToInt8>:

int8_t resizeFloatToInt8(float input)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t cast = (int32_t) input;
 8005856:	edd7 7a01 	vldr	s15, [r7, #4]
 800585a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800585e:	ee17 3a90 	vmov	r3, s15
 8005862:	60fb      	str	r3, [r7, #12]
//  cast = cast / 0xFF;
  if (cast > 127) {
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b7f      	cmp	r3, #127	; 0x7f
 8005868:	dd02      	ble.n	8005870 <resizeFloatToInt8+0x24>
    cast = 127;
 800586a:	237f      	movs	r3, #127	; 0x7f
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	e006      	b.n	800587e <resizeFloatToInt8+0x32>
  }
  else if(cast < -127) {
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8005876:	da02      	bge.n	800587e <resizeFloatToInt8+0x32>
    cast = -127;
 8005878:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800587c:	60fb      	str	r3, [r7, #12]
  }
  return (int8_t) cast;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	b25b      	sxtb	r3, r3
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	605a      	str	r2, [r3, #4]
 800589e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80058a0:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <MX_TIM7_Init+0x64>)
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <MX_TIM7_Init+0x68>)
 80058a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80058a6:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <MX_TIM7_Init+0x64>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ac:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <MX_TIM7_Init+0x64>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <MX_TIM7_Init+0x64>)
 80058b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058ba:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <MX_TIM7_Init+0x64>)
 80058bc:	2200      	movs	r2, #0
 80058be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80058c0:	480c      	ldr	r0, [pc, #48]	; (80058f4 <MX_TIM7_Init+0x64>)
 80058c2:	f005 f89b 	bl	800a9fc <HAL_TIM_Base_Init>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80058cc:	f7fe fd7e 	bl	80043cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4805      	ldr	r0, [pc, #20]	; (80058f4 <MX_TIM7_Init+0x64>)
 80058de:	f005 fb27 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80058e8:	f7fe fd70 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20002364 	.word	0x20002364
 80058f8:	40001400 	.word	0x40001400

080058fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <HAL_TIM_Base_MspInit+0x38>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10b      	bne.n	8005926 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <HAL_TIM_Base_MspInit+0x3c>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4a09      	ldr	r2, [pc, #36]	; (8005938 <HAL_TIM_Base_MspInit+0x3c>)
 8005914:	f043 0320 	orr.w	r3, r3, #32
 8005918:	61d3      	str	r3, [r2, #28]
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <HAL_TIM_Base_MspInit+0x3c>)
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40001400 	.word	0x40001400
 8005938:	40021000 	.word	0x40021000

0800593c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005940:	4b14      	ldr	r3, [pc, #80]	; (8005994 <MX_UART4_Init+0x58>)
 8005942:	4a15      	ldr	r2, [pc, #84]	; (8005998 <MX_UART4_Init+0x5c>)
 8005944:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <MX_UART4_Init+0x58>)
 8005948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800594c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800594e:	4b11      	ldr	r3, [pc, #68]	; (8005994 <MX_UART4_Init+0x58>)
 8005950:	2200      	movs	r2, #0
 8005952:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <MX_UART4_Init+0x58>)
 8005956:	2200      	movs	r2, #0
 8005958:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800595a:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <MX_UART4_Init+0x58>)
 800595c:	2200      	movs	r2, #0
 800595e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <MX_UART4_Init+0x58>)
 8005962:	220c      	movs	r2, #12
 8005964:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <MX_UART4_Init+0x58>)
 8005968:	2200      	movs	r2, #0
 800596a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800596c:	4b09      	ldr	r3, [pc, #36]	; (8005994 <MX_UART4_Init+0x58>)
 800596e:	2200      	movs	r2, #0
 8005970:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <MX_UART4_Init+0x58>)
 8005974:	2200      	movs	r2, #0
 8005976:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <MX_UART4_Init+0x58>)
 800597a:	2200      	movs	r2, #0
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800597e:	4805      	ldr	r0, [pc, #20]	; (8005994 <MX_UART4_Init+0x58>)
 8005980:	f005 fb74 	bl	800b06c <HAL_UART_Init>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800598a:	f7fe fd1f 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200023b0 	.word	0x200023b0
 8005998:	40004c00 	.word	0x40004c00

0800599c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80059a0:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059a2:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <MX_USART1_UART_Init+0x5c>)
 80059a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80059a6:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059ae:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80059b4:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80059ba:	4b0e      	ldr	r3, [pc, #56]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059bc:	2200      	movs	r2, #0
 80059be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059c2:	220c      	movs	r2, #12
 80059c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059d2:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059da:	2200      	movs	r2, #0
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80059de:	4805      	ldr	r0, [pc, #20]	; (80059f4 <MX_USART1_UART_Init+0x58>)
 80059e0:	f005 fb44 	bl	800b06c <HAL_UART_Init>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80059ea:	f7fe fcef 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80059ee:	bf00      	nop
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20002438 	.word	0x20002438
 80059f8:	40013800 	.word	0x40013800

080059fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a00:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a02:	4a17      	ldr	r2, [pc, #92]	; (8005a60 <MX_USART2_UART_Init+0x64>)
 8005a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a14:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a20:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a22:	220c      	movs	r2, #12
 8005a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a26:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a32:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005a3e:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a44:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a46:	4805      	ldr	r0, [pc, #20]	; (8005a5c <MX_USART2_UART_Init+0x60>)
 8005a48:	f005 fb10 	bl	800b06c <HAL_UART_Init>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8005a52:	f7fe fcbb 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a56:	bf00      	nop
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	200024c0 	.word	0x200024c0
 8005a60:	40004400 	.word	0x40004400

08005a64 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005a6a:	4a15      	ldr	r2, [pc, #84]	; (8005ac0 <MX_USART3_UART_Init+0x5c>)
 8005a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a82:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005a8a:	220c      	movs	r2, #12
 8005a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a8e:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a94:	4b09      	ldr	r3, [pc, #36]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a9a:	4b08      	ldr	r3, [pc, #32]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005aa6:	4805      	ldr	r0, [pc, #20]	; (8005abc <MX_USART3_UART_Init+0x58>)
 8005aa8:	f005 fae0 	bl	800b06c <HAL_UART_Init>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005ab2:	f7fe fc8b 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005ab6:	bf00      	nop
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20002548 	.word	0x20002548
 8005ac0:	40004800 	.word	0x40004800

08005ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b090      	sub	sp, #64	; 0x40
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	605a      	str	r2, [r3, #4]
 8005ad6:	609a      	str	r2, [r3, #8]
 8005ad8:	60da      	str	r2, [r3, #12]
 8005ada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4aa0      	ldr	r2, [pc, #640]	; (8005d64 <HAL_UART_MspInit+0x2a0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d131      	bne.n	8005b4a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005ae6:	4ba0      	ldr	r3, [pc, #640]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	4a9f      	ldr	r2, [pc, #636]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005af0:	61d3      	str	r3, [r2, #28]
 8005af2:	4b9d      	ldr	r3, [pc, #628]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005afe:	4b9a      	ldr	r3, [pc, #616]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	4a99      	ldr	r2, [pc, #612]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b08:	6153      	str	r3, [r2, #20]
 8005b0a:	4b97      	ldr	r3, [pc, #604]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005b16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b24:	2303      	movs	r3, #3
 8005b26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8005b28:	2305      	movs	r3, #5
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b30:	4619      	mov	r1, r3
 8005b32:	488e      	ldr	r0, [pc, #568]	; (8005d6c <HAL_UART_MspInit+0x2a8>)
 8005b34:	f000 ff18 	bl	8006968 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2105      	movs	r1, #5
 8005b3c:	2034      	movs	r0, #52	; 0x34
 8005b3e:	f000 facb 	bl	80060d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005b42:	2034      	movs	r0, #52	; 0x34
 8005b44:	f000 fae4 	bl	8006110 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005b48:	e15c      	b.n	8005e04 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a88      	ldr	r2, [pc, #544]	; (8005d70 <HAL_UART_MspInit+0x2ac>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	f040 8081 	bne.w	8005c58 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b56:	4b84      	ldr	r3, [pc, #528]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	4a83      	ldr	r2, [pc, #524]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b60:	6193      	str	r3, [r2, #24]
 8005b62:	4b81      	ldr	r3, [pc, #516]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b6e:	4b7e      	ldr	r3, [pc, #504]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4a7d      	ldr	r2, [pc, #500]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b78:	6153      	str	r3, [r2, #20]
 8005b7a:	4b7b      	ldr	r3, [pc, #492]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005b86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b94:	2303      	movs	r3, #3
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b98:	2307      	movs	r3, #7
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ba6:	f000 fedf 	bl	8006968 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005baa:	4b72      	ldr	r3, [pc, #456]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bac:	4a72      	ldr	r2, [pc, #456]	; (8005d78 <HAL_UART_MspInit+0x2b4>)
 8005bae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bb0:	4b70      	ldr	r3, [pc, #448]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bb2:	2210      	movs	r2, #16
 8005bb4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bb6:	4b6f      	ldr	r3, [pc, #444]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bbc:	4b6d      	ldr	r3, [pc, #436]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bbe:	2280      	movs	r2, #128	; 0x80
 8005bc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bc2:	4b6c      	ldr	r3, [pc, #432]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bc8:	4b6a      	ldr	r3, [pc, #424]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005bce:	4b69      	ldr	r3, [pc, #420]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005bd4:	4b67      	ldr	r3, [pc, #412]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bd6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005bda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005bdc:	4865      	ldr	r0, [pc, #404]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bde:	f000 fab3 	bl	8006148 <HAL_DMA_Init>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005be8:	f7fe fbf0 	bl	80043cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a61      	ldr	r2, [pc, #388]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bf0:	671a      	str	r2, [r3, #112]	; 0x70
 8005bf2:	4a60      	ldr	r2, [pc, #384]	; (8005d74 <HAL_UART_MspInit+0x2b0>)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005bf8:	4b60      	ldr	r3, [pc, #384]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005bfa:	4a61      	ldr	r2, [pc, #388]	; (8005d80 <HAL_UART_MspInit+0x2bc>)
 8005bfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bfe:	4b5f      	ldr	r3, [pc, #380]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c04:	4b5d      	ldr	r3, [pc, #372]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c0a:	4b5c      	ldr	r3, [pc, #368]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c0c:	2280      	movs	r2, #128	; 0x80
 8005c0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c10:	4b5a      	ldr	r3, [pc, #360]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c16:	4b59      	ldr	r3, [pc, #356]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005c1c:	4b57      	ldr	r3, [pc, #348]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005c22:	4b56      	ldr	r3, [pc, #344]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c24:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005c28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005c2a:	4854      	ldr	r0, [pc, #336]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c2c:	f000 fa8c 	bl	8006148 <HAL_DMA_Init>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_UART_MspInit+0x176>
      Error_Handler();
 8005c36:	f7fe fbc9 	bl	80043cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a4f      	ldr	r2, [pc, #316]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c3e:	675a      	str	r2, [r3, #116]	; 0x74
 8005c40:	4a4e      	ldr	r2, [pc, #312]	; (8005d7c <HAL_UART_MspInit+0x2b8>)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005c46:	2200      	movs	r2, #0
 8005c48:	2105      	movs	r1, #5
 8005c4a:	2025      	movs	r0, #37	; 0x25
 8005c4c:	f000 fa44 	bl	80060d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c50:	2025      	movs	r0, #37	; 0x25
 8005c52:	f000 fa5d 	bl	8006110 <HAL_NVIC_EnableIRQ>
}
 8005c56:	e0d5      	b.n	8005e04 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART2)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a49      	ldr	r2, [pc, #292]	; (8005d84 <HAL_UART_MspInit+0x2c0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	f040 809a 	bne.w	8005d98 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c64:	4b40      	ldr	r3, [pc, #256]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6e:	61d3      	str	r3, [r2, #28]
 8005c70:	4b3d      	ldr	r3, [pc, #244]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c7c:	4b3a      	ldr	r3, [pc, #232]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	4a39      	ldr	r2, [pc, #228]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c86:	6153      	str	r3, [r2, #20]
 8005c88:	4b37      	ldr	r3, [pc, #220]	; (8005d68 <HAL_UART_MspInit+0x2a4>)
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c94:	230c      	movs	r3, #12
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ca4:	2307      	movs	r3, #7
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cac:	4619      	mov	r1, r3
 8005cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cb2:	f000 fe59 	bl	8006968 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005cb6:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005cb8:	4a34      	ldr	r2, [pc, #208]	; (8005d8c <HAL_UART_MspInit+0x2c8>)
 8005cba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cbc:	4b32      	ldr	r3, [pc, #200]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cc2:	4b31      	ldr	r3, [pc, #196]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cc8:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cce:	4b2e      	ldr	r3, [pc, #184]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cd4:	4b2c      	ldr	r3, [pc, #176]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005cda:	4b2b      	ldr	r3, [pc, #172]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005ce0:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005ce2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005ce6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005ce8:	4827      	ldr	r0, [pc, #156]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005cea:	f000 fa2d 	bl	8006148 <HAL_DMA_Init>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8005cf4:	f7fe fb6a 	bl	80043cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a23      	ldr	r2, [pc, #140]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005cfc:	675a      	str	r2, [r3, #116]	; 0x74
 8005cfe:	4a22      	ldr	r2, [pc, #136]	; (8005d88 <HAL_UART_MspInit+0x2c4>)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005d04:	4b22      	ldr	r3, [pc, #136]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d06:	4a23      	ldr	r2, [pc, #140]	; (8005d94 <HAL_UART_MspInit+0x2d0>)
 8005d08:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d0a:	4b21      	ldr	r3, [pc, #132]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d0c:	2210      	movs	r2, #16
 8005d0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d10:	4b1f      	ldr	r3, [pc, #124]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d16:	4b1e      	ldr	r3, [pc, #120]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d1c:	4b1c      	ldr	r3, [pc, #112]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d28:	4b19      	ldr	r3, [pc, #100]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005d2e:	4b18      	ldr	r3, [pc, #96]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d36:	4816      	ldr	r0, [pc, #88]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d38:	f000 fa06 	bl	8006148 <HAL_DMA_Init>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_UART_MspInit+0x282>
      Error_Handler();
 8005d42:	f7fe fb43 	bl	80043cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a11      	ldr	r2, [pc, #68]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d4a:	671a      	str	r2, [r3, #112]	; 0x70
 8005d4c:	4a10      	ldr	r2, [pc, #64]	; (8005d90 <HAL_UART_MspInit+0x2cc>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005d52:	2200      	movs	r2, #0
 8005d54:	2105      	movs	r1, #5
 8005d56:	2026      	movs	r0, #38	; 0x26
 8005d58:	f000 f9be 	bl	80060d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d5c:	2026      	movs	r0, #38	; 0x26
 8005d5e:	f000 f9d7 	bl	8006110 <HAL_NVIC_EnableIRQ>
}
 8005d62:	e04f      	b.n	8005e04 <HAL_UART_MspInit+0x340>
 8005d64:	40004c00 	.word	0x40004c00
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	48000800 	.word	0x48000800
 8005d70:	40013800 	.word	0x40013800
 8005d74:	200025d0 	.word	0x200025d0
 8005d78:	40020044 	.word	0x40020044
 8005d7c:	20002614 	.word	0x20002614
 8005d80:	40020058 	.word	0x40020058
 8005d84:	40004400 	.word	0x40004400
 8005d88:	20002658 	.word	0x20002658
 8005d8c:	4002006c 	.word	0x4002006c
 8005d90:	2000269c 	.word	0x2000269c
 8005d94:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <HAL_UART_MspInit+0x348>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d130      	bne.n	8005e04 <HAL_UART_MspInit+0x340>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005da2:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <HAL_UART_MspInit+0x34c>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <HAL_UART_MspInit+0x34c>)
 8005da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dac:	61d3      	str	r3, [r2, #28]
 8005dae:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <HAL_UART_MspInit+0x34c>)
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dba:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <HAL_UART_MspInit+0x34c>)
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	4a14      	ldr	r2, [pc, #80]	; (8005e10 <HAL_UART_MspInit+0x34c>)
 8005dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dc4:	6153      	str	r3, [r2, #20]
 8005dc6:	4b12      	ldr	r3, [pc, #72]	; (8005e10 <HAL_UART_MspInit+0x34c>)
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005dd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005de0:	2303      	movs	r3, #3
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005de4:	2307      	movs	r3, #7
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dec:	4619      	mov	r1, r3
 8005dee:	4809      	ldr	r0, [pc, #36]	; (8005e14 <HAL_UART_MspInit+0x350>)
 8005df0:	f000 fdba 	bl	8006968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005df4:	2200      	movs	r2, #0
 8005df6:	2105      	movs	r1, #5
 8005df8:	2027      	movs	r0, #39	; 0x27
 8005dfa:	f000 f96d 	bl	80060d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005dfe:	2027      	movs	r0, #39	; 0x27
 8005e00:	f000 f986 	bl	8006110 <HAL_NVIC_EnableIRQ>
}
 8005e04:	bf00      	nop
 8005e06:	3740      	adds	r7, #64	; 0x40
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40004800 	.word	0x40004800
 8005e10:	40021000 	.word	0x40021000
 8005e14:	48000400 	.word	0x48000400

08005e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e50 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e1c:	f7ff fafa 	bl	8005414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e20:	480c      	ldr	r0, [pc, #48]	; (8005e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e22:	490d      	ldr	r1, [pc, #52]	; (8005e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <LoopForever+0xe>)
  movs r3, #0
 8005e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e28:	e002      	b.n	8005e30 <LoopCopyDataInit>

08005e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e2e:	3304      	adds	r3, #4

08005e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e34:	d3f9      	bcc.n	8005e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e36:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e38:	4c0a      	ldr	r4, [pc, #40]	; (8005e64 <LoopForever+0x16>)
  movs r3, #0
 8005e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e3c:	e001      	b.n	8005e42 <LoopFillZerobss>

08005e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e40:	3204      	adds	r2, #4

08005e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e44:	d3fb      	bcc.n	8005e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e46:	f00a fbad 	bl	80105a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e4a:	f7fe fa1d 	bl	8004288 <main>

08005e4e <LoopForever>:

LoopForever:
    b LoopForever
 8005e4e:	e7fe      	b.n	8005e4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e50:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e58:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8005e5c:	08010ca8 	.word	0x08010ca8
  ldr r2, =_sbss
 8005e60:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8005e64:	20002ed0 	.word	0x20002ed0

08005e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e68:	e7fe      	b.n	8005e68 <ADC1_2_IRQHandler>
	...

08005e6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e70:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <HAL_Init+0x28>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a07      	ldr	r2, [pc, #28]	; (8005e94 <HAL_Init+0x28>)
 8005e76:	f043 0310 	orr.w	r3, r3, #16
 8005e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e7c:	2003      	movs	r0, #3
 8005e7e:	f000 f920 	bl	80060c2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e82:	200f      	movs	r0, #15
 8005e84:	f7ff f9dc 	bl	8005240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e88:	f7ff f9b2 	bl	80051f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40022000 	.word	0x40022000

08005e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <HAL_IncTick+0x20>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <HAL_IncTick+0x24>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	4a04      	ldr	r2, [pc, #16]	; (8005ebc <HAL_IncTick+0x24>)
 8005eaa:	6013      	str	r3, [r2, #0]
}
 8005eac:	bf00      	nop
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	200000b8 	.word	0x200000b8
 8005ebc:	200026e0 	.word	0x200026e0

08005ec0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  return uwTick;  
 8005ec4:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <HAL_GetTick+0x14>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	200026e0 	.word	0x200026e0

08005ed8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ee0:	f7ff ffee 	bl	8005ec0 <HAL_GetTick>
 8005ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d005      	beq.n	8005efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <HAL_Delay+0x44>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005efe:	bf00      	nop
 8005f00:	f7ff ffde 	bl	8005ec0 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d8f7      	bhi.n	8005f00 <HAL_Delay+0x28>
  {
  }
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	200000b8 	.word	0x200000b8

08005f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f30:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <__NVIC_SetPriorityGrouping+0x44>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f52:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <__NVIC_SetPriorityGrouping+0x44>)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	60d3      	str	r3, [r2, #12]
}
 8005f58:	bf00      	nop
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	e000ed00 	.word	0xe000ed00

08005f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f6c:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <__NVIC_GetPriorityGrouping+0x18>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	f003 0307 	and.w	r3, r3, #7
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	e000ed00 	.word	0xe000ed00

08005f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	db0b      	blt.n	8005fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	f003 021f 	and.w	r2, r3, #31
 8005f9c:	4907      	ldr	r1, [pc, #28]	; (8005fbc <__NVIC_EnableIRQ+0x38>)
 8005f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8005faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	e000e100 	.word	0xe000e100

08005fc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	db12      	blt.n	8005ff8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	f003 021f 	and.w	r2, r3, #31
 8005fd8:	490a      	ldr	r1, [pc, #40]	; (8006004 <__NVIC_DisableIRQ+0x44>)
 8005fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8005fe6:	3320      	adds	r3, #32
 8005fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005fec:	f3bf 8f4f 	dsb	sy
}
 8005ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ff2:	f3bf 8f6f 	isb	sy
}
 8005ff6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	e000e100 	.word	0xe000e100

08006008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	6039      	str	r1, [r7, #0]
 8006012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006018:	2b00      	cmp	r3, #0
 800601a:	db0a      	blt.n	8006032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	490c      	ldr	r1, [pc, #48]	; (8006054 <__NVIC_SetPriority+0x4c>)
 8006022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006026:	0112      	lsls	r2, r2, #4
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	440b      	add	r3, r1
 800602c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006030:	e00a      	b.n	8006048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	4908      	ldr	r1, [pc, #32]	; (8006058 <__NVIC_SetPriority+0x50>)
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	3b04      	subs	r3, #4
 8006040:	0112      	lsls	r2, r2, #4
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	440b      	add	r3, r1
 8006046:	761a      	strb	r2, [r3, #24]
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	e000e100 	.word	0xe000e100
 8006058:	e000ed00 	.word	0xe000ed00

0800605c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800605c:	b480      	push	{r7}
 800605e:	b089      	sub	sp, #36	; 0x24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f1c3 0307 	rsb	r3, r3, #7
 8006076:	2b04      	cmp	r3, #4
 8006078:	bf28      	it	cs
 800607a:	2304      	movcs	r3, #4
 800607c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3304      	adds	r3, #4
 8006082:	2b06      	cmp	r3, #6
 8006084:	d902      	bls.n	800608c <NVIC_EncodePriority+0x30>
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3b03      	subs	r3, #3
 800608a:	e000      	b.n	800608e <NVIC_EncodePriority+0x32>
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006090:	f04f 32ff 	mov.w	r2, #4294967295
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	43da      	mvns	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	401a      	ands	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060a4:	f04f 31ff 	mov.w	r1, #4294967295
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	fa01 f303 	lsl.w	r3, r1, r3
 80060ae:	43d9      	mvns	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b4:	4313      	orrs	r3, r2
         );
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3724      	adds	r7, #36	; 0x24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff ff28 	bl	8005f20 <__NVIC_SetPriorityGrouping>
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060ea:	f7ff ff3d 	bl	8005f68 <__NVIC_GetPriorityGrouping>
 80060ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	6978      	ldr	r0, [r7, #20]
 80060f6:	f7ff ffb1 	bl	800605c <NVIC_EncodePriority>
 80060fa:	4602      	mov	r2, r0
 80060fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff ff80 	bl	8006008 <__NVIC_SetPriority>
}
 8006108:	bf00      	nop
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800611a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ff30 	bl	8005f84 <__NVIC_EnableIRQ>
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff ff40 	bl	8005fc0 <__NVIC_DisableIRQ>
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e037      	b.n	80061ce <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006174:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006178:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800618e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800619a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f9c5 	bl	8006540 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}  
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b086      	sub	sp, #24
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_DMA_Start_IT+0x20>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e04a      	b.n	800628c <HAL_DMA_Start_IT+0xb6>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006204:	2b01      	cmp	r3, #1
 8006206:	d13a      	bne.n	800627e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0201 	bic.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f958 	bl	80064e2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 020e 	orr.w	r2, r2, #14
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e00f      	b.n	800626c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 020a 	orr.w	r2, r2, #10
 800625a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0204 	bic.w	r2, r2, #4
 800626a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e005      	b.n	800628a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006286:	2302      	movs	r3, #2
 8006288:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800628a:	7dfb      	ldrb	r3, [r7, #23]
} 
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d008      	beq.n	80062b8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2204      	movs	r2, #4
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e020      	b.n	80062fa <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 020e 	bic.w	r2, r2, #14
 80062c6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	2101      	movs	r1, #1
 80062e2:	fa01 f202 	lsl.w	r2, r1, r2
 80062e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006318:	2b02      	cmp	r3, #2
 800631a:	d005      	beq.n	8006328 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2204      	movs	r2, #4
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
 8006326:	e027      	b.n	8006378 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 020e 	bic.w	r2, r2, #14
 8006336:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006350:	2101      	movs	r1, #1
 8006352:	fa01 f202 	lsl.w	r2, r1, r2
 8006356:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
    } 
  }
  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	2204      	movs	r2, #4
 80063a0:	409a      	lsls	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d024      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x72>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01f      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d107      	bne.n	80063d2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0204 	bic.w	r2, r2, #4
 80063d0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063da:	2104      	movs	r1, #4
 80063dc:	fa01 f202 	lsl.w	r2, r1, r2
 80063e0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d06a      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80063f2:	e065      	b.n	80064c0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	2202      	movs	r2, #2
 80063fa:	409a      	lsls	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d02c      	beq.n	800645e <HAL_DMA_IRQHandler+0xdc>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d027      	beq.n	800645e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10b      	bne.n	8006434 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 020a 	bic.w	r2, r2, #10
 800642a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643c:	2102      	movs	r1, #2
 800643e:	fa01 f202 	lsl.w	r2, r1, r2
 8006442:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	2b00      	cmp	r3, #0
 8006452:	d035      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800645c:	e030      	b.n	80064c0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	2208      	movs	r2, #8
 8006464:	409a      	lsls	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d028      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x13e>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d023      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 020e 	bic.w	r2, r2, #14
 8006486:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006490:	2101      	movs	r1, #1
 8006492:	fa01 f202 	lsl.w	r2, r1, r2
 8006496:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	4798      	blx	r3
    }
  }
}  
 80064be:	e7ff      	b.n	80064c0 <HAL_DMA_IRQHandler+0x13e>
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	2101      	movs	r1, #1
 80064fa:	fa01 f202 	lsl.w	r2, r1, r2
 80064fe:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b10      	cmp	r3, #16
 800650e:	d108      	bne.n	8006522 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006520:	e007      	b.n	8006532 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	60da      	str	r2, [r3, #12]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <DMA_CalcBaseAndBitshift+0x60>)
 8006550:	429a      	cmp	r2, r3
 8006552:	d80f      	bhi.n	8006574 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <DMA_CalcBaseAndBitshift+0x64>)
 800655c:	4413      	add	r3, r2
 800655e:	4a12      	ldr	r2, [pc, #72]	; (80065a8 <DMA_CalcBaseAndBitshift+0x68>)
 8006560:	fba2 2303 	umull	r2, r3, r2, r3
 8006564:	091b      	lsrs	r3, r3, #4
 8006566:	009a      	lsls	r2, r3, #2
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a0f      	ldr	r2, [pc, #60]	; (80065ac <DMA_CalcBaseAndBitshift+0x6c>)
 8006570:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006572:	e00e      	b.n	8006592 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <DMA_CalcBaseAndBitshift+0x70>)
 800657c:	4413      	add	r3, r2
 800657e:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <DMA_CalcBaseAndBitshift+0x68>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	009a      	lsls	r2, r3, #2
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a09      	ldr	r2, [pc, #36]	; (80065b4 <DMA_CalcBaseAndBitshift+0x74>)
 8006590:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40020407 	.word	0x40020407
 80065a4:	bffdfff8 	.word	0xbffdfff8
 80065a8:	cccccccd 	.word	0xcccccccd
 80065ac:	40020000 	.word	0x40020000
 80065b0:	bffdfbf8 	.word	0xbffdfbf8
 80065b4:	40020400 	.word	0x40020400

080065b8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80065d2:	4b2f      	ldr	r3, [pc, #188]	; (8006690 <HAL_FLASH_Program+0xd8>)
 80065d4:	7e1b      	ldrb	r3, [r3, #24]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_FLASH_Program+0x26>
 80065da:	2302      	movs	r3, #2
 80065dc:	e054      	b.n	8006688 <HAL_FLASH_Program+0xd0>
 80065de:	4b2c      	ldr	r3, [pc, #176]	; (8006690 <HAL_FLASH_Program+0xd8>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80065e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80065e8:	f000 f8a8 	bl	800673c <FLASH_WaitForLastOperation>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d144      	bne.n	8006680 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d102      	bne.n	8006602 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80065fc:	2301      	movs	r3, #1
 80065fe:	757b      	strb	r3, [r7, #21]
 8006600:	e007      	b.n	8006612 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d102      	bne.n	800660e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006608:	2302      	movs	r3, #2
 800660a:	757b      	strb	r3, [r7, #21]
 800660c:	e001      	b.n	8006612 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800660e:	2304      	movs	r3, #4
 8006610:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8006612:	2300      	movs	r3, #0
 8006614:	75bb      	strb	r3, [r7, #22]
 8006616:	e02d      	b.n	8006674 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006618:	7dbb      	ldrb	r3, [r7, #22]
 800661a:	005a      	lsls	r2, r3, #1
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	eb02 0c03 	add.w	ip, r2, r3
 8006622:	7dbb      	ldrb	r3, [r7, #22]
 8006624:	0119      	lsls	r1, r3, #4
 8006626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800662a:	f1c1 0620 	rsb	r6, r1, #32
 800662e:	f1a1 0020 	sub.w	r0, r1, #32
 8006632:	fa22 f401 	lsr.w	r4, r2, r1
 8006636:	fa03 f606 	lsl.w	r6, r3, r6
 800663a:	4334      	orrs	r4, r6
 800663c:	fa23 f000 	lsr.w	r0, r3, r0
 8006640:	4304      	orrs	r4, r0
 8006642:	fa23 f501 	lsr.w	r5, r3, r1
 8006646:	b2a3      	uxth	r3, r4
 8006648:	4619      	mov	r1, r3
 800664a:	4660      	mov	r0, ip
 800664c:	f000 f85a 	bl	8006704 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006650:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006654:	f000 f872 	bl	800673c <FLASH_WaitForLastOperation>
 8006658:	4603      	mov	r3, r0
 800665a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800665c:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <HAL_FLASH_Program+0xdc>)
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	4a0c      	ldr	r2, [pc, #48]	; (8006694 <HAL_FLASH_Program+0xdc>)
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d107      	bne.n	800667e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800666e:	7dbb      	ldrb	r3, [r7, #22]
 8006670:	3301      	adds	r3, #1
 8006672:	75bb      	strb	r3, [r7, #22]
 8006674:	7dba      	ldrb	r2, [r7, #22]
 8006676:	7d7b      	ldrb	r3, [r7, #21]
 8006678:	429a      	cmp	r2, r3
 800667a:	d3cd      	bcc.n	8006618 <HAL_FLASH_Program+0x60>
 800667c:	e000      	b.n	8006680 <HAL_FLASH_Program+0xc8>
      {
        break;
 800667e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006680:	4b03      	ldr	r3, [pc, #12]	; (8006690 <HAL_FLASH_Program+0xd8>)
 8006682:	2200      	movs	r2, #0
 8006684:	761a      	strb	r2, [r3, #24]

  return status;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
}
 8006688:	4618      	mov	r0, r3
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006690:	200026e8 	.word	0x200026e8
 8006694:	40022000 	.word	0x40022000

08006698 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80066a2:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <HAL_FLASH_Unlock+0x40>)
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00d      	beq.n	80066ca <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80066ae:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <HAL_FLASH_Unlock+0x40>)
 80066b0:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <HAL_FLASH_Unlock+0x44>)
 80066b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80066b4:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <HAL_FLASH_Unlock+0x40>)
 80066b6:	4a0a      	ldr	r2, [pc, #40]	; (80066e0 <HAL_FLASH_Unlock+0x48>)
 80066b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <HAL_FLASH_Unlock+0x40>)
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80066ca:	79fb      	ldrb	r3, [r7, #7]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40022000 	.word	0x40022000
 80066dc:	45670123 	.word	0x45670123
 80066e0:	cdef89ab 	.word	0xcdef89ab

080066e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <HAL_FLASH_Lock+0x1c>)
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	4a04      	ldr	r2, [pc, #16]	; (8006700 <HAL_FLASH_Lock+0x1c>)
 80066ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	40022000 	.word	0x40022000

08006704 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006710:	4b08      	ldr	r3, [pc, #32]	; (8006734 <FLASH_Program_HalfWord+0x30>)
 8006712:	2200      	movs	r2, #0
 8006714:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <FLASH_Program_HalfWord+0x34>)
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	4a07      	ldr	r2, [pc, #28]	; (8006738 <FLASH_Program_HalfWord+0x34>)
 800671c:	f043 0301 	orr.w	r3, r3, #1
 8006720:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	887a      	ldrh	r2, [r7, #2]
 8006726:	801a      	strh	r2, [r3, #0]
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	200026e8 	.word	0x200026e8
 8006738:	40022000 	.word	0x40022000

0800673c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006744:	f7ff fbbc 	bl	8005ec0 <HAL_GetTick>
 8006748:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800674a:	e010      	b.n	800676e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d00c      	beq.n	800676e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <FLASH_WaitForLastOperation+0x2e>
 800675a:	f7ff fbb1 	bl	8005ec0 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d201      	bcs.n	800676e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e01f      	b.n	80067ae <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <FLASH_WaitForLastOperation+0x7c>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b01      	cmp	r3, #1
 8006778:	d0e8      	beq.n	800674c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <FLASH_WaitForLastOperation+0x7c>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b20      	cmp	r3, #32
 8006784:	d102      	bne.n	800678c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <FLASH_WaitForLastOperation+0x7c>)
 8006788:	2220      	movs	r2, #32
 800678a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800678c:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <FLASH_WaitForLastOperation+0x7c>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b10      	cmp	r3, #16
 8006796:	d005      	beq.n	80067a4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006798:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <FLASH_WaitForLastOperation+0x7c>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d103      	bne.n	80067ac <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80067a4:	f000 f80a 	bl	80067bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40022000 	.word	0x40022000

080067bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <FLASH_SetErrorCode+0x5c>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0310 	and.w	r3, r3, #16
 80067ce:	2b10      	cmp	r3, #16
 80067d0:	d109      	bne.n	80067e6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80067d2:	4b12      	ldr	r3, [pc, #72]	; (800681c <FLASH_SetErrorCode+0x60>)
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f043 0302 	orr.w	r3, r3, #2
 80067da:	4a10      	ldr	r2, [pc, #64]	; (800681c <FLASH_SetErrorCode+0x60>)
 80067dc:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f043 0310 	orr.w	r3, r3, #16
 80067e4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <FLASH_SetErrorCode+0x5c>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d109      	bne.n	8006806 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <FLASH_SetErrorCode+0x60>)
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	4a08      	ldr	r2, [pc, #32]	; (800681c <FLASH_SetErrorCode+0x60>)
 80067fc:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f043 0304 	orr.w	r3, r3, #4
 8006804:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006806:	4a04      	ldr	r2, [pc, #16]	; (8006818 <FLASH_SetErrorCode+0x5c>)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60d3      	str	r3, [r2, #12]
}  
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40022000 	.word	0x40022000
 800681c:	200026e8 	.word	0x200026e8

08006820 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006832:	4b2e      	ldr	r3, [pc, #184]	; (80068ec <HAL_FLASHEx_Erase+0xcc>)
 8006834:	7e1b      	ldrb	r3, [r3, #24]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_FLASHEx_Erase+0x1e>
 800683a:	2302      	movs	r3, #2
 800683c:	e052      	b.n	80068e4 <HAL_FLASHEx_Erase+0xc4>
 800683e:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <HAL_FLASHEx_Erase+0xcc>)
 8006840:	2201      	movs	r2, #1
 8006842:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d115      	bne.n	8006878 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800684c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006850:	f7ff ff74 	bl	800673c <FLASH_WaitForLastOperation>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d140      	bne.n	80068dc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800685a:	f000 f84b 	bl	80068f4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800685e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006862:	f7ff ff6b 	bl	800673c <FLASH_WaitForLastOperation>
 8006866:	4603      	mov	r3, r0
 8006868:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800686a:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <HAL_FLASHEx_Erase+0xd0>)
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	4a20      	ldr	r2, [pc, #128]	; (80068f0 <HAL_FLASHEx_Erase+0xd0>)
 8006870:	f023 0304 	bic.w	r3, r3, #4
 8006874:	6113      	str	r3, [r2, #16]
 8006876:	e031      	b.n	80068dc <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006878:	f24c 3050 	movw	r0, #50000	; 0xc350
 800687c:	f7ff ff5e 	bl	800673c <FLASH_WaitForLastOperation>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d12a      	bne.n	80068dc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	f04f 32ff 	mov.w	r2, #4294967295
 800688c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	60bb      	str	r3, [r7, #8]
 8006894:	e019      	b.n	80068ca <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006896:	68b8      	ldr	r0, [r7, #8]
 8006898:	f000 f846 	bl	8006928 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800689c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068a0:	f7ff ff4c 	bl	800673c <FLASH_WaitForLastOperation>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80068a8:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <HAL_FLASHEx_Erase+0xd0>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	4a10      	ldr	r2, [pc, #64]	; (80068f0 <HAL_FLASHEx_Erase+0xd0>)
 80068ae:	f023 0302 	bic.w	r3, r3, #2
 80068b2:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	601a      	str	r2, [r3, #0]
            break;
 80068c0:	e00c      	b.n	80068dc <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	02da      	lsls	r2, r3, #11
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4413      	add	r3, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d3dc      	bcc.n	8006896 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <HAL_FLASHEx_Erase+0xcc>)
 80068de:	2200      	movs	r2, #0
 80068e0:	761a      	strb	r2, [r3, #24]

  return status;
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200026e8 	.word	0x200026e8
 80068f0:	40022000 	.word	0x40022000

080068f4 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <FLASH_MassErase+0x2c>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <FLASH_MassErase+0x30>)
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	4a08      	ldr	r2, [pc, #32]	; (8006924 <FLASH_MassErase+0x30>)
 8006904:	f043 0304 	orr.w	r3, r3, #4
 8006908:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <FLASH_MassErase+0x30>)
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	4a05      	ldr	r2, [pc, #20]	; (8006924 <FLASH_MassErase+0x30>)
 8006910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006914:	6113      	str	r3, [r2, #16]
}
 8006916:	bf00      	nop
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	200026e8 	.word	0x200026e8
 8006924:	40022000 	.word	0x40022000

08006928 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <FLASH_PageErase+0x38>)
 8006932:	2200      	movs	r2, #0
 8006934:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006936:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <FLASH_PageErase+0x3c>)
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	4a0a      	ldr	r2, [pc, #40]	; (8006964 <FLASH_PageErase+0x3c>)
 800693c:	f043 0302 	orr.w	r3, r3, #2
 8006940:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006942:	4a08      	ldr	r2, [pc, #32]	; (8006964 <FLASH_PageErase+0x3c>)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <FLASH_PageErase+0x3c>)
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	4a05      	ldr	r2, [pc, #20]	; (8006964 <FLASH_PageErase+0x3c>)
 800694e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006952:	6113      	str	r3, [r2, #16]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	200026e8 	.word	0x200026e8
 8006964:	40022000 	.word	0x40022000

08006968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006976:	e154      	b.n	8006c22 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	2101      	movs	r1, #1
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	fa01 f303 	lsl.w	r3, r1, r3
 8006984:	4013      	ands	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8146 	beq.w	8006c1c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	2b01      	cmp	r3, #1
 800699a:	d005      	beq.n	80069a8 <HAL_GPIO_Init+0x40>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d130      	bne.n	8006a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	2203      	movs	r2, #3
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	43db      	mvns	r3, r3
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4013      	ands	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069de:	2201      	movs	r2, #1
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	43db      	mvns	r3, r3
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4013      	ands	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	091b      	lsrs	r3, r3, #4
 80069f4:	f003 0201 	and.w	r2, r3, #1
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d017      	beq.n	8006a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	2203      	movs	r2, #3
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	43db      	mvns	r3, r3
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d123      	bne.n	8006a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	08da      	lsrs	r2, r3, #3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3208      	adds	r2, #8
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	220f      	movs	r2, #15
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4013      	ands	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	08da      	lsrs	r2, r3, #3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3208      	adds	r2, #8
 8006a94:	6939      	ldr	r1, [r7, #16]
 8006a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f003 0203 	and.w	r2, r3, #3
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80a0 	beq.w	8006c1c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006adc:	4b58      	ldr	r3, [pc, #352]	; (8006c40 <HAL_GPIO_Init+0x2d8>)
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	4a57      	ldr	r2, [pc, #348]	; (8006c40 <HAL_GPIO_Init+0x2d8>)
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	6193      	str	r3, [r2, #24]
 8006ae8:	4b55      	ldr	r3, [pc, #340]	; (8006c40 <HAL_GPIO_Init+0x2d8>)
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	60bb      	str	r3, [r7, #8]
 8006af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006af4:	4a53      	ldr	r2, [pc, #332]	; (8006c44 <HAL_GPIO_Init+0x2dc>)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	089b      	lsrs	r3, r3, #2
 8006afa:	3302      	adds	r3, #2
 8006afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	220f      	movs	r2, #15
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	43db      	mvns	r3, r3
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4013      	ands	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b1e:	d019      	beq.n	8006b54 <HAL_GPIO_Init+0x1ec>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a49      	ldr	r2, [pc, #292]	; (8006c48 <HAL_GPIO_Init+0x2e0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d013      	beq.n	8006b50 <HAL_GPIO_Init+0x1e8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a48      	ldr	r2, [pc, #288]	; (8006c4c <HAL_GPIO_Init+0x2e4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00d      	beq.n	8006b4c <HAL_GPIO_Init+0x1e4>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a47      	ldr	r2, [pc, #284]	; (8006c50 <HAL_GPIO_Init+0x2e8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <HAL_GPIO_Init+0x1e0>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a46      	ldr	r2, [pc, #280]	; (8006c54 <HAL_GPIO_Init+0x2ec>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d101      	bne.n	8006b44 <HAL_GPIO_Init+0x1dc>
 8006b40:	2304      	movs	r3, #4
 8006b42:	e008      	b.n	8006b56 <HAL_GPIO_Init+0x1ee>
 8006b44:	2305      	movs	r3, #5
 8006b46:	e006      	b.n	8006b56 <HAL_GPIO_Init+0x1ee>
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e004      	b.n	8006b56 <HAL_GPIO_Init+0x1ee>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e002      	b.n	8006b56 <HAL_GPIO_Init+0x1ee>
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <HAL_GPIO_Init+0x1ee>
 8006b54:	2300      	movs	r3, #0
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	f002 0203 	and.w	r2, r2, #3
 8006b5c:	0092      	lsls	r2, r2, #2
 8006b5e:	4093      	lsls	r3, r2
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b66:	4937      	ldr	r1, [pc, #220]	; (8006c44 <HAL_GPIO_Init+0x2dc>)
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b74:	4b38      	ldr	r3, [pc, #224]	; (8006c58 <HAL_GPIO_Init+0x2f0>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4013      	ands	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006b98:	4a2f      	ldr	r2, [pc, #188]	; (8006c58 <HAL_GPIO_Init+0x2f0>)
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b9e:	4b2e      	ldr	r3, [pc, #184]	; (8006c58 <HAL_GPIO_Init+0x2f0>)
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4013      	ands	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006bc2:	4a25      	ldr	r2, [pc, #148]	; (8006c58 <HAL_GPIO_Init+0x2f0>)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bc8:	4b23      	ldr	r3, [pc, #140]	; (8006c58 <HAL_GPIO_Init+0x2f0>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006bec:	4a1a      	ldr	r2, [pc, #104]	; (8006c58 <HAL_GPIO_Init+0x2f0>)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <HAL_GPIO_Init+0x2f0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	43db      	mvns	r3, r3
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006c16:	4a10      	ldr	r2, [pc, #64]	; (8006c58 <HAL_GPIO_Init+0x2f0>)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f47f aea3 	bne.w	8006978 <HAL_GPIO_Init+0x10>
  }
}
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40021000 	.word	0x40021000
 8006c44:	40010000 	.word	0x40010000
 8006c48:	48000400 	.word	0x48000400
 8006c4c:	48000800 	.word	0x48000800
 8006c50:	48000c00 	.word	0x48000c00
 8006c54:	48001000 	.word	0x48001000
 8006c58:	40010400 	.word	0x40010400

08006c5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006c6a:	e0b8      	b.n	8006dde <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	fa02 f303 	lsl.w	r3, r2, r3
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	4013      	ands	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 80ab 	beq.w	8006dd8 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006c82:	4a5e      	ldr	r2, [pc, #376]	; (8006dfc <HAL_GPIO_DeInit+0x1a0>)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	089b      	lsrs	r3, r3, #2
 8006c88:	3302      	adds	r3, #2
 8006c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c8e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	220f      	movs	r2, #15
 8006c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006caa:	d019      	beq.n	8006ce0 <HAL_GPIO_DeInit+0x84>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a54      	ldr	r2, [pc, #336]	; (8006e00 <HAL_GPIO_DeInit+0x1a4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d013      	beq.n	8006cdc <HAL_GPIO_DeInit+0x80>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a53      	ldr	r2, [pc, #332]	; (8006e04 <HAL_GPIO_DeInit+0x1a8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00d      	beq.n	8006cd8 <HAL_GPIO_DeInit+0x7c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a52      	ldr	r2, [pc, #328]	; (8006e08 <HAL_GPIO_DeInit+0x1ac>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <HAL_GPIO_DeInit+0x78>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a51      	ldr	r2, [pc, #324]	; (8006e0c <HAL_GPIO_DeInit+0x1b0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d101      	bne.n	8006cd0 <HAL_GPIO_DeInit+0x74>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	e008      	b.n	8006ce2 <HAL_GPIO_DeInit+0x86>
 8006cd0:	2305      	movs	r3, #5
 8006cd2:	e006      	b.n	8006ce2 <HAL_GPIO_DeInit+0x86>
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e004      	b.n	8006ce2 <HAL_GPIO_DeInit+0x86>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e002      	b.n	8006ce2 <HAL_GPIO_DeInit+0x86>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e000      	b.n	8006ce2 <HAL_GPIO_DeInit+0x86>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	f002 0203 	and.w	r2, r2, #3
 8006ce8:	0092      	lsls	r2, r2, #2
 8006cea:	4093      	lsls	r3, r2
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d132      	bne.n	8006d58 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006cf2:	4b47      	ldr	r3, [pc, #284]	; (8006e10 <HAL_GPIO_DeInit+0x1b4>)
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	4945      	ldr	r1, [pc, #276]	; (8006e10 <HAL_GPIO_DeInit+0x1b4>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006d00:	4b43      	ldr	r3, [pc, #268]	; (8006e10 <HAL_GPIO_DeInit+0x1b4>)
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	43db      	mvns	r3, r3
 8006d08:	4941      	ldr	r1, [pc, #260]	; (8006e10 <HAL_GPIO_DeInit+0x1b4>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006d0e:	4b40      	ldr	r3, [pc, #256]	; (8006e10 <HAL_GPIO_DeInit+0x1b4>)
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	43db      	mvns	r3, r3
 8006d16:	493e      	ldr	r1, [pc, #248]	; (8006e10 <HAL_GPIO_DeInit+0x1b4>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d1c:	4b3c      	ldr	r3, [pc, #240]	; (8006e10 <HAL_GPIO_DeInit+0x1b4>)
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	43db      	mvns	r3, r3
 8006d24:	493a      	ldr	r1, [pc, #232]	; (8006e10 <HAL_GPIO_DeInit+0x1b4>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	220f      	movs	r2, #15
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006d3a:	4a30      	ldr	r2, [pc, #192]	; (8006dfc <HAL_GPIO_DeInit+0x1a0>)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	089b      	lsrs	r3, r3, #2
 8006d40:	3302      	adds	r3, #2
 8006d42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	43da      	mvns	r2, r3
 8006d4a:	482c      	ldr	r0, [pc, #176]	; (8006dfc <HAL_GPIO_DeInit+0x1a0>)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	089b      	lsrs	r3, r3, #2
 8006d50:	400a      	ands	r2, r1
 8006d52:	3302      	adds	r3, #2
 8006d54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	2103      	movs	r1, #3
 8006d62:	fa01 f303 	lsl.w	r3, r1, r3
 8006d66:	43db      	mvns	r3, r3
 8006d68:	401a      	ands	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	08da      	lsrs	r2, r3, #3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3208      	adds	r2, #8
 8006d76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	220f      	movs	r2, #15
 8006d84:	fa02 f303 	lsl.w	r3, r2, r3
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	08d2      	lsrs	r2, r2, #3
 8006d8e:	4019      	ands	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3208      	adds	r2, #8
 8006d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	2103      	movs	r1, #3
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	43db      	mvns	r3, r3
 8006da8:	401a      	ands	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	2101      	movs	r1, #1
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	401a      	ands	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	2103      	movs	r1, #3
 8006dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	fa22 f303 	lsr.w	r3, r2, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f47f af40 	bne.w	8006c6c <HAL_GPIO_DeInit+0x10>
  }
}
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	48000400 	.word	0x48000400
 8006e04:	48000800 	.word	0x48000800
 8006e08:	48000c00 	.word	0x48000c00
 8006e0c:	48001000 	.word	0x48001000
 8006e10:	40010400 	.word	0x40010400

08006e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	807b      	strh	r3, [r7, #2]
 8006e20:	4613      	mov	r3, r2
 8006e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e24:	787b      	ldrb	r3, [r7, #1]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e2a:	887a      	ldrh	r2, [r7, #2]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e30:	e002      	b.n	8006e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e32:	887a      	ldrh	r2, [r7, #2]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e56:	887a      	ldrh	r2, [r7, #2]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	041a      	lsls	r2, r3, #16
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	43d9      	mvns	r1, r3
 8006e62:	887b      	ldrh	r3, [r7, #2]
 8006e64:	400b      	ands	r3, r1
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	619a      	str	r2, [r3, #24]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e081      	b.n	8006f8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d106      	bne.n	8006ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fd f982 	bl	80041a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2224      	movs	r2, #36	; 0x24
 8006ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0201 	bic.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ec8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ed8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d107      	bne.n	8006ef2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eee:	609a      	str	r2, [r3, #8]
 8006ef0:	e006      	b.n	8006f00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006efe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d104      	bne.n	8006f12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6812      	ldr	r2, [r2, #0]
 8006f1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69d9      	ldr	r1, [r3, #28]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e021      	b.n	8006fec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2224      	movs	r2, #36	; 0x24
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0201 	bic.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7fd f93d 	bl	8004240 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	461a      	mov	r2, r3
 8007000:	460b      	mov	r3, r1
 8007002:	817b      	strh	r3, [r7, #10]
 8007004:	4613      	mov	r3, r2
 8007006:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b20      	cmp	r3, #32
 8007012:	f040 80da 	bne.w	80071ca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800701c:	2b01      	cmp	r3, #1
 800701e:	d101      	bne.n	8007024 <HAL_I2C_Master_Transmit+0x30>
 8007020:	2302      	movs	r3, #2
 8007022:	e0d3      	b.n	80071cc <HAL_I2C_Master_Transmit+0x1d8>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800702c:	f7fe ff48 	bl	8005ec0 <HAL_GetTick>
 8007030:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	2319      	movs	r3, #25
 8007038:	2201      	movs	r2, #1
 800703a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f001 fc99 	bl	8008976 <I2C_WaitOnFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e0be      	b.n	80071cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2221      	movs	r2, #33	; 0x21
 8007052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2210      	movs	r2, #16
 800705a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	893a      	ldrh	r2, [r7, #8]
 800706e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707a:	b29b      	uxth	r3, r3
 800707c:	2bff      	cmp	r3, #255	; 0xff
 800707e:	d90e      	bls.n	800709e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	22ff      	movs	r2, #255	; 0xff
 8007084:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708a:	b2da      	uxtb	r2, r3
 800708c:	8979      	ldrh	r1, [r7, #10]
 800708e:	4b51      	ldr	r3, [pc, #324]	; (80071d4 <HAL_I2C_Master_Transmit+0x1e0>)
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f001 fea8 	bl	8008dec <I2C_TransferConfig>
 800709c:	e06c      	b.n	8007178 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	8979      	ldrh	r1, [r7, #10]
 80070b0:	4b48      	ldr	r3, [pc, #288]	; (80071d4 <HAL_I2C_Master_Transmit+0x1e0>)
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f001 fe97 	bl	8008dec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80070be:	e05b      	b.n	8007178 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	6a39      	ldr	r1, [r7, #32]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f001 fca5 	bl	8008a14 <I2C_WaitOnTXISFlagUntilTimeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e07b      	b.n	80071cc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	781a      	ldrb	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d034      	beq.n	8007178 <HAL_I2C_Master_Transmit+0x184>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007112:	2b00      	cmp	r3, #0
 8007114:	d130      	bne.n	8007178 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	2200      	movs	r2, #0
 800711e:	2180      	movs	r1, #128	; 0x80
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f001 fc28 	bl	8008976 <I2C_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e04d      	b.n	80071cc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007134:	b29b      	uxth	r3, r3
 8007136:	2bff      	cmp	r3, #255	; 0xff
 8007138:	d90e      	bls.n	8007158 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007144:	b2da      	uxtb	r2, r3
 8007146:	8979      	ldrh	r1, [r7, #10]
 8007148:	2300      	movs	r3, #0
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f001 fe4b 	bl	8008dec <I2C_TransferConfig>
 8007156:	e00f      	b.n	8007178 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007166:	b2da      	uxtb	r2, r3
 8007168:	8979      	ldrh	r1, [r7, #10]
 800716a:	2300      	movs	r3, #0
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f001 fe3a 	bl	8008dec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d19e      	bne.n	80070c0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	6a39      	ldr	r1, [r7, #32]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f001 fc8b 	bl	8008aa2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e01a      	b.n	80071cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2220      	movs	r2, #32
 800719c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6859      	ldr	r1, [r3, #4]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <HAL_I2C_Master_Transmit+0x1e4>)
 80071aa:	400b      	ands	r3, r1
 80071ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e000      	b.n	80071cc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80071ca:	2302      	movs	r3, #2
  }
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	80002000 	.word	0x80002000
 80071d8:	fe00e800 	.word	0xfe00e800

080071dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	461a      	mov	r2, r3
 80071e8:	460b      	mov	r3, r1
 80071ea:	817b      	strh	r3, [r7, #10]
 80071ec:	4613      	mov	r3, r2
 80071ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	f040 80db 	bne.w	80073b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_I2C_Master_Receive+0x30>
 8007208:	2302      	movs	r3, #2
 800720a:	e0d4      	b.n	80073b6 <HAL_I2C_Master_Receive+0x1da>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007214:	f7fe fe54 	bl	8005ec0 <HAL_GetTick>
 8007218:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	2319      	movs	r3, #25
 8007220:	2201      	movs	r2, #1
 8007222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f001 fba5 	bl	8008976 <I2C_WaitOnFlagUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e0bf      	b.n	80073b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2222      	movs	r2, #34	; 0x22
 800723a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2210      	movs	r2, #16
 8007242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	893a      	ldrh	r2, [r7, #8]
 8007256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007262:	b29b      	uxth	r3, r3
 8007264:	2bff      	cmp	r3, #255	; 0xff
 8007266:	d90e      	bls.n	8007286 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	22ff      	movs	r2, #255	; 0xff
 800726c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007272:	b2da      	uxtb	r2, r3
 8007274:	8979      	ldrh	r1, [r7, #10]
 8007276:	4b52      	ldr	r3, [pc, #328]	; (80073c0 <HAL_I2C_Master_Receive+0x1e4>)
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f001 fdb4 	bl	8008dec <I2C_TransferConfig>
 8007284:	e06d      	b.n	8007362 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007294:	b2da      	uxtb	r2, r3
 8007296:	8979      	ldrh	r1, [r7, #10]
 8007298:	4b49      	ldr	r3, [pc, #292]	; (80073c0 <HAL_I2C_Master_Receive+0x1e4>)
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f001 fda3 	bl	8008dec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80072a6:	e05c      	b.n	8007362 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	6a39      	ldr	r1, [r7, #32]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f001 fc3b 	bl	8008b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e07c      	b.n	80073b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d034      	beq.n	8007362 <HAL_I2C_Master_Receive+0x186>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d130      	bne.n	8007362 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	2200      	movs	r2, #0
 8007308:	2180      	movs	r1, #128	; 0x80
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f001 fb33 	bl	8008976 <I2C_WaitOnFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e04d      	b.n	80073b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731e:	b29b      	uxth	r3, r3
 8007320:	2bff      	cmp	r3, #255	; 0xff
 8007322:	d90e      	bls.n	8007342 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	22ff      	movs	r2, #255	; 0xff
 8007328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732e:	b2da      	uxtb	r2, r3
 8007330:	8979      	ldrh	r1, [r7, #10]
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f001 fd56 	bl	8008dec <I2C_TransferConfig>
 8007340:	e00f      	b.n	8007362 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007350:	b2da      	uxtb	r2, r3
 8007352:	8979      	ldrh	r1, [r7, #10]
 8007354:	2300      	movs	r3, #0
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f001 fd45 	bl	8008dec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d19d      	bne.n	80072a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	6a39      	ldr	r1, [r7, #32]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f001 fb96 	bl	8008aa2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e01a      	b.n	80073b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2220      	movs	r2, #32
 8007386:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6859      	ldr	r1, [r3, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <HAL_I2C_Master_Receive+0x1e8>)
 8007394:	400b      	ands	r3, r1
 8007396:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e000      	b.n	80073b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	80002400 	.word	0x80002400
 80073c4:	fe00e800 	.word	0xfe00e800

080073c8 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	461a      	mov	r2, r3
 80073d4:	460b      	mov	r3, r1
 80073d6:	817b      	strh	r3, [r7, #10]
 80073d8:	4613      	mov	r3, r2
 80073da:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b20      	cmp	r3, #32
 80073e6:	d153      	bne.n	8007490 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f6:	d101      	bne.n	80073fc <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80073f8:	2302      	movs	r3, #2
 80073fa:	e04a      	b.n	8007492 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_I2C_Master_Transmit_IT+0x42>
 8007406:	2302      	movs	r3, #2
 8007408:	e043      	b.n	8007492 <HAL_I2C_Master_Transmit_IT+0xca>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2221      	movs	r2, #33	; 0x21
 8007416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2210      	movs	r2, #16
 800741e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	893a      	ldrh	r2, [r7, #8]
 8007432:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4a19      	ldr	r2, [pc, #100]	; (800749c <HAL_I2C_Master_Transmit_IT+0xd4>)
 8007438:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800743e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007444:	b29b      	uxth	r3, r3
 8007446:	2bff      	cmp	r3, #255	; 0xff
 8007448:	d906      	bls.n	8007458 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	22ff      	movs	r2, #255	; 0xff
 800744e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	e007      	b.n	8007468 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007466:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800746c:	b2da      	uxtb	r2, r3
 800746e:	8979      	ldrh	r1, [r7, #10]
 8007470:	4b0c      	ldr	r3, [pc, #48]	; (80074a4 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f001 fcb8 	bl	8008dec <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007484:	2101      	movs	r1, #1
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f001 fce2 	bl	8008e50 <I2C_Enable_IRQ>

    return HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	e000      	b.n	8007492 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007490:	2302      	movs	r3, #2
  }
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	ffff0000 	.word	0xffff0000
 80074a0:	08007665 	.word	0x08007665
 80074a4:	80002000 	.word	0x80002000

080074a8 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	461a      	mov	r2, r3
 80074b4:	460b      	mov	r3, r1
 80074b6:	817b      	strh	r3, [r7, #10]
 80074b8:	4613      	mov	r3, r2
 80074ba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d153      	bne.n	8007570 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d6:	d101      	bne.n	80074dc <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
 80074da:	e04a      	b.n	8007572 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d101      	bne.n	80074ea <HAL_I2C_Master_Receive_IT+0x42>
 80074e6:	2302      	movs	r3, #2
 80074e8:	e043      	b.n	8007572 <HAL_I2C_Master_Receive_IT+0xca>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2222      	movs	r2, #34	; 0x22
 80074f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2210      	movs	r2, #16
 80074fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	893a      	ldrh	r2, [r7, #8]
 8007512:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a19      	ldr	r2, [pc, #100]	; (800757c <HAL_I2C_Master_Receive_IT+0xd4>)
 8007518:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4a18      	ldr	r2, [pc, #96]	; (8007580 <HAL_I2C_Master_Receive_IT+0xd8>)
 800751e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	2bff      	cmp	r3, #255	; 0xff
 8007528:	d906      	bls.n	8007538 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	22ff      	movs	r2, #255	; 0xff
 800752e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	e007      	b.n	8007548 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007546:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754c:	b2da      	uxtb	r2, r3
 800754e:	8979      	ldrh	r1, [r7, #10]
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <HAL_I2C_Master_Receive_IT+0xdc>)
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f001 fc48 	bl	8008dec <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007564:	2102      	movs	r1, #2
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f001 fc72 	bl	8008e50 <I2C_Enable_IRQ>

    return HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	e000      	b.n	8007572 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007570:	2302      	movs	r3, #2
  }
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	ffff0000 	.word	0xffff0000
 8007580:	08007665 	.word	0x08007665
 8007584:	80002400 	.word	0x80002400

08007588 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	68f9      	ldr	r1, [r7, #12]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
  }
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
 80075f0:	4613      	mov	r3, r2
 80075f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <I2C_Master_ISR_IT+0x1e>
 800767e:	2302      	movs	r3, #2
 8007680:	e108      	b.n	8007894 <I2C_Master_ISR_IT+0x230>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	d012      	beq.n	80076ba <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2210      	movs	r2, #16
 80076a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076aa:	f043 0204 	orr.w	r2, r3, #4
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f001 f91d 	bl	80088f2 <I2C_Flush_TXDR>
 80076b8:	e0d9      	b.n	800786e <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d022      	beq.n	800770a <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01d      	beq.n	800770a <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f023 0304 	bic.w	r3, r3, #4
 80076d4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007708:	e0b1      	b.n	800786e <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01d      	beq.n	8007750 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800771a:	2b00      	cmp	r3, #0
 800771c:	d018      	beq.n	8007750 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800774e:	e08e      	b.n	800786e <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007756:	2b00      	cmp	r3, #0
 8007758:	d05c      	beq.n	8007814 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007760:	2b00      	cmp	r3, #0
 8007762:	d057      	beq.n	8007814 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d040      	beq.n	80077f0 <I2C_Master_ISR_IT+0x18c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007772:	2b00      	cmp	r3, #0
 8007774:	d13c      	bne.n	80077f0 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	b29b      	uxth	r3, r3
 800777e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007782:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007788:	b29b      	uxth	r3, r3
 800778a:	2bff      	cmp	r3, #255	; 0xff
 800778c:	d90e      	bls.n	80077ac <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	22ff      	movs	r2, #255	; 0xff
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007798:	b2da      	uxtb	r2, r3
 800779a:	8a79      	ldrh	r1, [r7, #18]
 800779c:	2300      	movs	r3, #0
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f001 fb21 	bl	8008dec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077aa:	e032      	b.n	8007812 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077be:	d00b      	beq.n	80077d8 <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80077ca:	8a79      	ldrh	r1, [r7, #18]
 80077cc:	2000      	movs	r0, #0
 80077ce:	9000      	str	r0, [sp, #0]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f001 fb0b 	bl	8008dec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077d6:	e01c      	b.n	8007812 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	8a79      	ldrh	r1, [r7, #18]
 80077e0:	2300      	movs	r3, #0
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f001 faff 	bl	8008dec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077ee:	e010      	b.n	8007812 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077fe:	d003      	beq.n	8007808 <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fca3 	bl	800814c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007806:	e032      	b.n	800786e <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007808:	2140      	movs	r1, #64	; 0x40
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 ff5a 	bl	80086c4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007810:	e02d      	b.n	800786e <I2C_Master_ISR_IT+0x20a>
 8007812:	e02c      	b.n	800786e <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d027      	beq.n	800786e <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007824:	2b00      	cmp	r3, #0
 8007826:	d022      	beq.n	800786e <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d119      	bne.n	8007866 <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800783c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007840:	d015      	beq.n	800786e <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800784a:	d108      	bne.n	800785e <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	e007      	b.n	800786e <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 fc74 	bl	800814c <I2C_ITMasterSeqCplt>
 8007864:	e003      	b.n	800786e <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007866:	2140      	movs	r1, #64	; 0x40
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 ff2b 	bl	80086c4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007882:	6979      	ldr	r1, [r7, #20]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fcfb 	bl	8008280 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <I2C_Slave_ISR_IT+0x24>
 80078bc:	2302      	movs	r3, #2
 80078be:	e0e1      	b.n	8007a84 <I2C_Slave_ISR_IT+0x1e8>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f003 0320 	and.w	r3, r3, #32
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80078dc:	6939      	ldr	r1, [r7, #16]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 fd96 	bl	8008410 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d04b      	beq.n	8007986 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d046      	beq.n	8007986 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d128      	bne.n	8007954 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b28      	cmp	r3, #40	; 0x28
 800790c:	d108      	bne.n	8007920 <I2C_Slave_ISR_IT+0x84>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007914:	d104      	bne.n	8007920 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007916:	6939      	ldr	r1, [r7, #16]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 fe7f 	bl	800861c <I2C_ITListenCplt>
 800791e:	e031      	b.n	8007984 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b29      	cmp	r3, #41	; 0x29
 800792a:	d10e      	bne.n	800794a <I2C_Slave_ISR_IT+0xae>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007932:	d00a      	beq.n	800794a <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2210      	movs	r2, #16
 800793a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 ffd8 	bl	80088f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fc3f 	bl	80081c6 <I2C_ITSlaveSeqCplt>
 8007948:	e01c      	b.n	8007984 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2210      	movs	r2, #16
 8007950:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007952:	e08f      	b.n	8007a74 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2210      	movs	r2, #16
 800795a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007960:	f043 0204 	orr.w	r2, r3, #4
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <I2C_Slave_ISR_IT+0xda>
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007974:	d17e      	bne.n	8007a74 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797a:	4619      	mov	r1, r3
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fea1 	bl	80086c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007982:	e077      	b.n	8007a74 <I2C_Slave_ISR_IT+0x1d8>
 8007984:	e076      	b.n	8007a74 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d02f      	beq.n	80079f0 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007996:	2b00      	cmp	r3, #0
 8007998:	d02a      	beq.n	80079f0 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d018      	beq.n	80079d6 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d14b      	bne.n	8007a78 <I2C_Slave_ISR_IT+0x1dc>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079e6:	d047      	beq.n	8007a78 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fbec 	bl	80081c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80079ee:	e043      	b.n	8007a78 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007a04:	6939      	ldr	r1, [r7, #16]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fb1c 	bl	8008044 <I2C_ITAddrCplt>
 8007a0c:	e035      	b.n	8007a7a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d030      	beq.n	8007a7a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d02b      	beq.n	8007a7a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d018      	beq.n	8007a5e <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a5c:	e00d      	b.n	8007a7a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a64:	d002      	beq.n	8007a6c <I2C_Slave_ISR_IT+0x1d0>
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fbaa 	bl	80081c6 <I2C_ITSlaveSeqCplt>
 8007a72:	e002      	b.n	8007a7a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8007a74:	bf00      	nop
 8007a76:	e000      	b.n	8007a7a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8007a78:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <I2C_Master_ISR_DMA+0x1a>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e0d9      	b.n	8007c5a <I2C_Master_ISR_DMA+0x1ce>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d016      	beq.n	8007ae6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d011      	beq.n	8007ae6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2210      	movs	r2, #16
 8007ac8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	f043 0204 	orr.w	r2, r3, #4
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007ad6:	2120      	movs	r1, #32
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f001 f9b9 	bl	8008e50 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 ff07 	bl	80088f2 <I2C_Flush_TXDR>
 8007ae4:	e0b4      	b.n	8007c50 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d071      	beq.n	8007bd4 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d06c      	beq.n	8007bd4 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b08:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d04e      	beq.n	8007bb2 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b20:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2bff      	cmp	r3, #255	; 0xff
 8007b2a:	d906      	bls.n	8007b3a <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	22ff      	movs	r2, #255	; 0xff
 8007b30:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e010      	b.n	8007b5c <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b4c:	d003      	beq.n	8007b56 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e002      	b.n	8007b5c <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b5a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	8a79      	ldrh	r1, [r7, #18]
 8007b64:	2300      	movs	r3, #0
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 f93e 	bl	8008dec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b22      	cmp	r3, #34	; 0x22
 8007b8c:	d108      	bne.n	8007ba0 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007b9e:	e057      	b.n	8007c50 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007bb0:	e04e      	b.n	8007c50 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bc0:	d003      	beq.n	8007bca <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fac2 	bl	800814c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007bc8:	e042      	b.n	8007c50 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007bca:	2140      	movs	r1, #64	; 0x40
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fd79 	bl	80086c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007bd2:	e03d      	b.n	8007c50 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d028      	beq.n	8007c30 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d023      	beq.n	8007c30 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d119      	bne.n	8007c26 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c00:	d025      	beq.n	8007c4e <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c0a:	d108      	bne.n	8007c1e <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c1a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007c1c:	e017      	b.n	8007c4e <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 fa94 	bl	800814c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007c24:	e013      	b.n	8007c4e <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007c26:	2140      	movs	r1, #64	; 0x40
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fd4b 	bl	80086c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007c2e:	e00e      	b.n	8007c4e <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007c44:	68b9      	ldr	r1, [r7, #8]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 fb1a 	bl	8008280 <I2C_ITMasterCplt>
 8007c4c:	e000      	b.n	8007c50 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8007c4e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af02      	add	r7, sp, #8
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007c70:	4b87      	ldr	r3, [pc, #540]	; (8007e90 <I2C_Mem_ISR_DMA+0x22c>)
 8007c72:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <I2C_Mem_ISR_DMA+0x1e>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e102      	b.n	8007e88 <I2C_Mem_ISR_DMA+0x224>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f003 0310 	and.w	r3, r3, #16
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d016      	beq.n	8007cc2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d011      	beq.n	8007cc2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2210      	movs	r2, #16
 8007ca4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	f043 0204 	orr.w	r2, r3, #4
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007cb2:	2120      	movs	r1, #32
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f001 f8cb 	bl	8008e50 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 fe19 	bl	80088f2 <I2C_Flush_TXDR>
 8007cc0:	e0dd      	b.n	8007e7e <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00e      	beq.n	8007cea <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007cde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	651a      	str	r2, [r3, #80]	; 0x50
 8007ce8:	e0c9      	b.n	8007e7e <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d05b      	beq.n	8007dac <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d056      	beq.n	8007dac <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007cfe:	2110      	movs	r1, #16
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f001 f8a5 	bl	8008e50 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d048      	beq.n	8007da2 <I2C_Mem_ISR_DMA+0x13e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2bff      	cmp	r3, #255	; 0xff
 8007d18:	d910      	bls.n	8007d3c <I2C_Mem_ISR_DMA+0xd8>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	22ff      	movs	r2, #255	; 0xff
 8007d1e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d24:	b299      	uxth	r1, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f001 f859 	bl	8008dec <I2C_TransferConfig>
 8007d3a:	e011      	b.n	8007d60 <I2C_Mem_ISR_DMA+0xfc>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4a:	b299      	uxth	r1, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	2300      	movs	r3, #0
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f001 f846 	bl	8008dec <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b22      	cmp	r3, #34	; 0x22
 8007d7c:	d108      	bne.n	8007d90 <I2C_Mem_ISR_DMA+0x12c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d8e:	e076      	b.n	8007e7e <I2C_Mem_ISR_DMA+0x21a>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d9e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007da0:	e06d      	b.n	8007e7e <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007da2:	2140      	movs	r1, #64	; 0x40
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 fc8d 	bl	80086c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007daa:	e068      	b.n	8007e7e <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d055      	beq.n	8007e62 <I2C_Mem_ISR_DMA+0x1fe>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d050      	beq.n	8007e62 <I2C_Mem_ISR_DMA+0x1fe>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b22      	cmp	r3, #34	; 0x22
 8007dca:	d101      	bne.n	8007dd0 <I2C_Mem_ISR_DMA+0x16c>
    {
      direction = I2C_GENERATE_START_READ;
 8007dcc:	4b31      	ldr	r3, [pc, #196]	; (8007e94 <I2C_Mem_ISR_DMA+0x230>)
 8007dce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2bff      	cmp	r3, #255	; 0xff
 8007dd8:	d910      	bls.n	8007dfc <I2C_Mem_ISR_DMA+0x198>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	22ff      	movs	r2, #255	; 0xff
 8007dde:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de4:	b299      	uxth	r1, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 fff9 	bl	8008dec <I2C_TransferConfig>
 8007dfa:	e011      	b.n	8007e20 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0a:	b299      	uxth	r1, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 ffe6 	bl	8008dec <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b22      	cmp	r3, #34	; 0x22
 8007e3c:	d108      	bne.n	8007e50 <I2C_Mem_ISR_DMA+0x1ec>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e4c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e4e:	e016      	b.n	8007e7e <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e5e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e60:	e00d      	b.n	8007e7e <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f003 0320 	and.w	r3, r3, #32
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d008      	beq.n	8007e7e <I2C_Mem_ISR_DMA+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <I2C_Mem_ISR_DMA+0x21a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fa01 	bl	8008280 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	80002000 	.word	0x80002000
 8007e94:	80002400 	.word	0x80002400

08007e98 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <I2C_Slave_ISR_DMA+0x24>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e0bf      	b.n	800803c <I2C_Slave_ISR_DMA+0x1a4>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d008      	beq.n	8007ee0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 fa98 	bl	8008410 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f003 0310 	and.w	r3, r3, #16
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8095 	beq.w	8008016 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 808f 	beq.w	8008016 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d104      	bne.n	8007f0c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d07d      	beq.n	8008008 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00c      	beq.n	8007f2e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00c      	beq.n	8007f50 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d128      	bne.n	8007fa8 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b28      	cmp	r3, #40	; 0x28
 8007f60:	d108      	bne.n	8007f74 <I2C_Slave_ISR_DMA+0xdc>
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f68:	d104      	bne.n	8007f74 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 fb55 	bl	800861c <I2C_ITListenCplt>
 8007f72:	e048      	b.n	8008006 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b29      	cmp	r3, #41	; 0x29
 8007f7e:	d10e      	bne.n	8007f9e <I2C_Slave_ISR_DMA+0x106>
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f86:	d00a      	beq.n	8007f9e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2210      	movs	r2, #16
 8007f8e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fcae 	bl	80088f2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 f915 	bl	80081c6 <I2C_ITSlaveSeqCplt>
 8007f9c:	e033      	b.n	8008006 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007fa6:	e034      	b.n	8008012 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2210      	movs	r2, #16
 8007fae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb4:	f043 0204 	orr.w	r2, r3, #4
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fc2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x13a>
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fd0:	d11f      	bne.n	8008012 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	2b21      	cmp	r3, #33	; 0x21
 8007fd6:	d002      	beq.n	8007fde <I2C_Slave_ISR_DMA+0x146>
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b29      	cmp	r3, #41	; 0x29
 8007fdc:	d103      	bne.n	8007fe6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2221      	movs	r2, #33	; 0x21
 8007fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8007fe4:	e008      	b.n	8007ff8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	2b22      	cmp	r3, #34	; 0x22
 8007fea:	d002      	beq.n	8007ff2 <I2C_Slave_ISR_DMA+0x15a>
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b2a      	cmp	r3, #42	; 0x2a
 8007ff0:	d102      	bne.n	8007ff8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2222      	movs	r2, #34	; 0x22
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 fb60 	bl	80086c4 <I2C_ITError>
      if (treatdmanack == 1U)
 8008004:	e005      	b.n	8008012 <I2C_Slave_ISR_DMA+0x17a>
 8008006:	e004      	b.n	8008012 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2210      	movs	r2, #16
 800800e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008010:	e00f      	b.n	8008032 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8008012:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008014:	e00d      	b.n	8008032 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f003 0308 	and.w	r3, r3, #8
 800801c:	2b00      	cmp	r3, #0
 800801e:	d008      	beq.n	8008032 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f809 	bl	8008044 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3720      	adds	r7, #32
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800805a:	2b28      	cmp	r3, #40	; 0x28
 800805c:	d16a      	bne.n	8008134 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	0c1b      	lsrs	r3, r3, #16
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	0c1b      	lsrs	r3, r3, #16
 8008076:	b29b      	uxth	r3, r3
 8008078:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800807c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800808a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	b29b      	uxth	r3, r3
 8008094:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008098:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d138      	bne.n	8008114 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80080a2:	897b      	ldrh	r3, [r7, #10]
 80080a4:	09db      	lsrs	r3, r3, #7
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	89bb      	ldrh	r3, [r7, #12]
 80080aa:	4053      	eors	r3, r2
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f003 0306 	and.w	r3, r3, #6
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d11c      	bne.n	80080f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80080b6:	897b      	ldrh	r3, [r7, #10]
 80080b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d13b      	bne.n	8008144 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2208      	movs	r2, #8
 80080d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080e2:	89ba      	ldrh	r2, [r7, #12]
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff fa7b 	bl	80075e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80080ee:	e029      	b.n	8008144 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80080f0:	893b      	ldrh	r3, [r7, #8]
 80080f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80080f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 ff31 	bl	8008f60 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008106:	89ba      	ldrh	r2, [r7, #12]
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fa69 	bl	80075e4 <HAL_I2C_AddrCallback>
}
 8008112:	e017      	b.n	8008144 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 ff21 	bl	8008f60 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008126:	89ba      	ldrh	r2, [r7, #12]
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff fa59 	bl	80075e4 <HAL_I2C_AddrCallback>
}
 8008132:	e007      	b.n	8008144 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2208      	movs	r2, #8
 800813a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b21      	cmp	r3, #33	; 0x21
 8008166:	d115      	bne.n	8008194 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2211      	movs	r2, #17
 8008174:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800817c:	2101      	movs	r1, #1
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 feee 	bl	8008f60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7fa f892 	bl	80022b6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008192:	e014      	b.n	80081be <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2212      	movs	r2, #18
 80081a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081a8:	2102      	movs	r1, #2
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fed8 	bl	8008f60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7fa f871 	bl	80022a0 <HAL_I2C_MasterRxCpltCallback>
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d008      	beq.n	80081fa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e00c      	b.n	8008214 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d007      	beq.n	8008214 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008212:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b29      	cmp	r3, #41	; 0x29
 800821e:	d112      	bne.n	8008246 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2228      	movs	r2, #40	; 0x28
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2221      	movs	r2, #33	; 0x21
 800822c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800822e:	2101      	movs	r1, #1
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fe95 	bl	8008f60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff f9bc 	bl	80075bc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008244:	e017      	b.n	8008276 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b2a      	cmp	r3, #42	; 0x2a
 8008250:	d111      	bne.n	8008276 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2228      	movs	r2, #40	; 0x28
 8008256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2222      	movs	r2, #34	; 0x22
 800825e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008260:	2102      	movs	r1, #2
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fe7c 	bl	8008f60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff f9ad 	bl	80075d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2220      	movs	r2, #32
 8008294:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b21      	cmp	r3, #33	; 0x21
 80082a0:	d107      	bne.n	80082b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80082a2:	2101      	movs	r1, #1
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fe5b 	bl	8008f60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2211      	movs	r2, #17
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
 80082b0:	e00c      	b.n	80082cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b22      	cmp	r3, #34	; 0x22
 80082bc:	d106      	bne.n	80082cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80082be:	2102      	movs	r1, #2
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fe4d 	bl	8008f60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2212      	movs	r2, #18
 80082ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6859      	ldr	r1, [r3, #4]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	4b4c      	ldr	r3, [pc, #304]	; (8008408 <I2C_ITMasterCplt+0x188>)
 80082d8:	400b      	ands	r3, r1
 80082da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a49      	ldr	r2, [pc, #292]	; (800840c <I2C_ITMasterCplt+0x18c>)
 80082e6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d009      	beq.n	8008306 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2210      	movs	r2, #16
 80082f8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fe:	f043 0204 	orr.w	r2, r3, #4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b60      	cmp	r3, #96	; 0x60
 8008310:	d10a      	bne.n	8008328 <I2C_ITMasterCplt+0xa8>
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	b2db      	uxtb	r3, r3
 8008324:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008326:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fae2 	bl	80088f2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008332:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b60      	cmp	r3, #96	; 0x60
 800833e:	d002      	beq.n	8008346 <I2C_ITMasterCplt+0xc6>
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d006      	beq.n	8008354 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f9b9 	bl	80086c4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008352:	e054      	b.n	80083fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b21      	cmp	r3, #33	; 0x21
 800835e:	d124      	bne.n	80083aa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	d10b      	bne.n	8008392 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff f942 	bl	8007614 <HAL_I2C_MemTxCpltCallback>
}
 8008390:	e035      	b.n	80083fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7f9 ff87 	bl	80022b6 <HAL_I2C_MasterTxCpltCallback>
}
 80083a8:	e029      	b.n	80083fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b22      	cmp	r3, #34	; 0x22
 80083b4:	d123      	bne.n	80083fe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d10b      	bne.n	80083e8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7ff f921 	bl	8007628 <HAL_I2C_MemRxCpltCallback>
}
 80083e6:	e00a      	b.n	80083fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7f9 ff51 	bl	80022a0 <HAL_I2C_MasterRxCpltCallback>
}
 80083fe:	bf00      	nop
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	fe00e800 	.word	0xfe00e800
 800840c:	ffff0000 	.word	0xffff0000

08008410 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800842c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2220      	movs	r2, #32
 8008434:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	2b21      	cmp	r3, #33	; 0x21
 800843a:	d002      	beq.n	8008442 <I2C_ITSlaveCplt+0x32>
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b29      	cmp	r3, #41	; 0x29
 8008440:	d108      	bne.n	8008454 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008442:	f248 0101 	movw	r1, #32769	; 0x8001
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fd8a 	bl	8008f60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2221      	movs	r2, #33	; 0x21
 8008450:	631a      	str	r2, [r3, #48]	; 0x30
 8008452:	e00d      	b.n	8008470 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	2b22      	cmp	r3, #34	; 0x22
 8008458:	d002      	beq.n	8008460 <I2C_ITSlaveCplt+0x50>
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b2a      	cmp	r3, #42	; 0x2a
 800845e:	d107      	bne.n	8008470 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008460:	f248 0102 	movw	r1, #32770	; 0x8002
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fd7b 	bl	8008f60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2222      	movs	r2, #34	; 0x22
 800846e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800847e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6859      	ldr	r1, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	4b62      	ldr	r3, [pc, #392]	; (8008614 <I2C_ITSlaveCplt+0x204>)
 800848c:	400b      	ands	r3, r1
 800848e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fa2e 	bl	80088f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d013      	beq.n	80084c8 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01f      	beq.n	80084f8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084c6:	e017      	b.n	80084f8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d012      	beq.n	80084f8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d006      	beq.n	80084f8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f003 0304 	and.w	r3, r3, #4
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d020      	beq.n	8008544 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f023 0304 	bic.w	r3, r3, #4
 8008508:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	b2d2      	uxtb	r2, r2
 8008516:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00c      	beq.n	8008544 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008548:	b29b      	uxth	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008552:	f043 0204 	orr.w	r2, r3, #4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856c:	2b00      	cmp	r3, #0
 800856e:	d010      	beq.n	8008592 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f8a4 	bl	80086c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b28      	cmp	r3, #40	; 0x28
 8008586:	d141      	bne.n	800860c <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008588:	6979      	ldr	r1, [r7, #20]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f846 	bl	800861c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008590:	e03c      	b.n	800860c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800859a:	d014      	beq.n	80085c6 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff fe12 	bl	80081c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a1c      	ldr	r2, [pc, #112]	; (8008618 <I2C_ITSlaveCplt+0x208>)
 80085a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff f81e 	bl	8007600 <HAL_I2C_ListenCpltCallback>
}
 80085c4:	e022      	b.n	800860c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b22      	cmp	r3, #34	; 0x22
 80085d0:	d10e      	bne.n	80085f0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7fe fff1 	bl	80075d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80085ee:	e00d      	b.n	800860c <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7fe ffd8 	bl	80075bc <HAL_I2C_SlaveTxCpltCallback>
}
 800860c:	bf00      	nop
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	fe00e800 	.word	0xfe00e800
 8008618:	ffff0000 	.word	0xffff0000

0800861c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a25      	ldr	r2, [pc, #148]	; (80086c0 <I2C_ITListenCplt+0xa4>)
 800862a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2220      	movs	r2, #32
 8008636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d022      	beq.n	8008698 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	b2d2      	uxtb	r2, r2
 800865e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866e:	2b00      	cmp	r3, #0
 8008670:	d012      	beq.n	8008698 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008676:	3b01      	subs	r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008682:	b29b      	uxth	r3, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008690:	f043 0204 	orr.w	r2, r3, #4
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008698:	f248 0103 	movw	r1, #32771	; 0x8003
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fc5f 	bl	8008f60 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2210      	movs	r2, #16
 80086a8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7fe ffa4 	bl	8007600 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	ffff0000 	.word	0xffff0000

080086c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086d4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a6d      	ldr	r2, [pc, #436]	; (8008898 <I2C_ITError+0x1d4>)
 80086e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	2b28      	cmp	r3, #40	; 0x28
 80086fa:	d005      	beq.n	8008708 <I2C_ITError+0x44>
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	2b29      	cmp	r3, #41	; 0x29
 8008700:	d002      	beq.n	8008708 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	2b2a      	cmp	r3, #42	; 0x2a
 8008706:	d10b      	bne.n	8008720 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008708:	2103      	movs	r1, #3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fc28 	bl	8008f60 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2228      	movs	r2, #40	; 0x28
 8008714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a60      	ldr	r2, [pc, #384]	; (800889c <I2C_ITError+0x1d8>)
 800871c:	635a      	str	r2, [r3, #52]	; 0x34
 800871e:	e030      	b.n	8008782 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008720:	f248 0103 	movw	r1, #32771	; 0x8003
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fc1b 	bl	8008f60 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f8e1 	bl	80088f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b60      	cmp	r3, #96	; 0x60
 800873a:	d01f      	beq.n	800877c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b20      	cmp	r3, #32
 8008750:	d114      	bne.n	800877c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b10      	cmp	r3, #16
 800875e:	d109      	bne.n	8008774 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2210      	movs	r2, #16
 8008766:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876c:	f043 0204 	orr.w	r2, r3, #4
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2220      	movs	r2, #32
 800877a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	2b00      	cmp	r3, #0
 800878e:	d039      	beq.n	8008804 <I2C_ITError+0x140>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b11      	cmp	r3, #17
 8008794:	d002      	beq.n	800879c <I2C_ITError+0xd8>
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b21      	cmp	r3, #33	; 0x21
 800879a:	d133      	bne.n	8008804 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087aa:	d107      	bne.n	80087bc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fd fe81 	bl	80064c8 <HAL_DMA_GetState>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d017      	beq.n	80087fc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	4a33      	ldr	r2, [pc, #204]	; (80088a0 <I2C_ITError+0x1dc>)
 80087d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fd fd90 	bl	8006306 <HAL_DMA_Abort_IT>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d04d      	beq.n	8008888 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087f6:	4610      	mov	r0, r2
 80087f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087fa:	e045      	b.n	8008888 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f851 	bl	80088a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008802:	e041      	b.n	8008888 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d039      	beq.n	8008880 <I2C_ITError+0x1bc>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b12      	cmp	r3, #18
 8008810:	d002      	beq.n	8008818 <I2C_ITError+0x154>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2b22      	cmp	r3, #34	; 0x22
 8008816:	d133      	bne.n	8008880 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008826:	d107      	bne.n	8008838 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008836:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883c:	4618      	mov	r0, r3
 800883e:	f7fd fe43 	bl	80064c8 <HAL_DMA_GetState>
 8008842:	4603      	mov	r3, r0
 8008844:	2b01      	cmp	r3, #1
 8008846:	d017      	beq.n	8008878 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884c:	4a14      	ldr	r2, [pc, #80]	; (80088a0 <I2C_ITError+0x1dc>)
 800884e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885c:	4618      	mov	r0, r3
 800885e:	f7fd fd52 	bl	8006306 <HAL_DMA_Abort_IT>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d011      	beq.n	800888c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008872:	4610      	mov	r0, r2
 8008874:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008876:	e009      	b.n	800888c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f813 	bl	80088a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800887e:	e005      	b.n	800888c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f80f 	bl	80088a4 <I2C_TreatErrorCallback>
  }
}
 8008886:	e002      	b.n	800888e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008888:	bf00      	nop
 800888a:	e000      	b.n	800888e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800888c:	bf00      	nop
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	ffff0000 	.word	0xffff0000
 800889c:	0800789d 	.word	0x0800789d
 80088a0:	0800893b 	.word	0x0800893b

080088a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b60      	cmp	r3, #96	; 0x60
 80088b6:	d10e      	bne.n	80088d6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fe febe 	bl	8007650 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80088d4:	e009      	b.n	80088ea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7fe fea9 	bl	800763c <HAL_I2C_ErrorCallback>
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b02      	cmp	r3, #2
 8008906:	d103      	bne.n	8008910 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2200      	movs	r2, #0
 800890e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b01      	cmp	r3, #1
 800891c:	d007      	beq.n	800892e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699a      	ldr	r2, [r3, #24]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f042 0201 	orr.w	r2, r2, #1
 800892c:	619a      	str	r2, [r3, #24]
  }
}
 800892e:	bf00      	nop
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	2200      	movs	r2, #0
 8008956:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d003      	beq.n	8008968 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008964:	2200      	movs	r2, #0
 8008966:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f7ff ff9b 	bl	80088a4 <I2C_TreatErrorCallback>
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	603b      	str	r3, [r7, #0]
 8008982:	4613      	mov	r3, r2
 8008984:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008986:	e031      	b.n	80089ec <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898e:	d02d      	beq.n	80089ec <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008990:	f7fd fa96 	bl	8005ec0 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d302      	bcc.n	80089a6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d122      	bne.n	80089ec <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	699a      	ldr	r2, [r3, #24]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	4013      	ands	r3, r2
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	bf0c      	ite	eq
 80089b6:	2301      	moveq	r3, #1
 80089b8:	2300      	movne	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d113      	bne.n	80089ec <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c8:	f043 0220 	orr.w	r2, r3, #32
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e00f      	b.n	8008a0c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	4013      	ands	r3, r2
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	bf0c      	ite	eq
 80089fc:	2301      	moveq	r3, #1
 80089fe:	2300      	movne	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	461a      	mov	r2, r3
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d0be      	beq.n	8008988 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a20:	e033      	b.n	8008a8a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	68b9      	ldr	r1, [r7, #8]
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f900 	bl	8008c2c <I2C_IsErrorOccurred>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e031      	b.n	8008a9a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3c:	d025      	beq.n	8008a8a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a3e:	f7fd fa3f 	bl	8005ec0 <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d302      	bcc.n	8008a54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d11a      	bne.n	8008a8a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d013      	beq.n	8008a8a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a66:	f043 0220 	orr.w	r2, r3, #32
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e007      	b.n	8008a9a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d1c4      	bne.n	8008a22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008aae:	e02f      	b.n	8008b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f8b9 	bl	8008c2c <I2C_IsErrorOccurred>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e02d      	b.n	8008b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ac4:	f7fd f9fc 	bl	8005ec0 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d302      	bcc.n	8008ada <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d11a      	bne.n	8008b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d013      	beq.n	8008b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aec:	f043 0220 	orr.w	r2, r3, #32
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e007      	b.n	8008b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	f003 0320 	and.w	r3, r3, #32
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	d1c8      	bne.n	8008ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b34:	e06b      	b.n	8008c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 f876 	bl	8008c2c <I2C_IsErrorOccurred>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e069      	b.n	8008c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	f003 0320 	and.w	r3, r3, #32
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d138      	bne.n	8008bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	f003 0304 	and.w	r3, r3, #4
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d105      	bne.n	8008b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e055      	b.n	8008c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	f003 0310 	and.w	r3, r3, #16
 8008b7c:	2b10      	cmp	r3, #16
 8008b7e:	d107      	bne.n	8008b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2210      	movs	r2, #16
 8008b86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2204      	movs	r2, #4
 8008b8c:	645a      	str	r2, [r3, #68]	; 0x44
 8008b8e:	e002      	b.n	8008b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6859      	ldr	r1, [r3, #4]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	4b1f      	ldr	r3, [pc, #124]	; (8008c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008baa:	400b      	ands	r3, r1
 8008bac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e029      	b.n	8008c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bca:	f7fd f979 	bl	8005ec0 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d302      	bcc.n	8008be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d116      	bne.n	8008c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	f003 0304 	and.w	r3, r3, #4
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d00f      	beq.n	8008c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf2:	f043 0220 	orr.w	r2, r3, #32
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e007      	b.n	8008c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d18c      	bne.n	8008b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	fe00e800 	.word	0xfe00e800

08008c2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08a      	sub	sp, #40	; 0x28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d068      	beq.n	8008d2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2210      	movs	r2, #16
 8008c5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c60:	e049      	b.n	8008cf6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c68:	d045      	beq.n	8008cf6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c6a:	f7fd f929 	bl	8005ec0 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d302      	bcc.n	8008c80 <I2C_IsErrorOccurred+0x54>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d13a      	bne.n	8008cf6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ca2:	d121      	bne.n	8008ce8 <I2C_IsErrorOccurred+0xbc>
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008caa:	d01d      	beq.n	8008ce8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008cac:	7cfb      	ldrb	r3, [r7, #19]
 8008cae:	2b20      	cmp	r3, #32
 8008cb0:	d01a      	beq.n	8008ce8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008cc2:	f7fd f8fd 	bl	8005ec0 <HAL_GetTick>
 8008cc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cc8:	e00e      	b.n	8008ce8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008cca:	f7fd f8f9 	bl	8005ec0 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	2b19      	cmp	r3, #25
 8008cd6:	d907      	bls.n	8008ce8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	f043 0320 	orr.w	r3, r3, #32
 8008cde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008ce6:	e006      	b.n	8008cf6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	f003 0320 	and.w	r3, r3, #32
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	d1e9      	bne.n	8008cca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d003      	beq.n	8008d0c <I2C_IsErrorOccurred+0xe0>
 8008d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0aa      	beq.n	8008c62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d103      	bne.n	8008d1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	f043 0304 	orr.w	r3, r3, #4
 8008d22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00b      	beq.n	8008d76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	f043 0308 	orr.w	r3, r3, #8
 8008d64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	f043 0302 	orr.w	r3, r3, #2
 8008d86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01c      	beq.n	8008dda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f7ff fda6 	bl	80088f2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6859      	ldr	r1, [r3, #4]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <I2C_IsErrorOccurred+0x1bc>)
 8008db2:	400b      	ands	r3, r1
 8008db4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3728      	adds	r7, #40	; 0x28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	fe00e800 	.word	0xfe00e800

08008dec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	607b      	str	r3, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	817b      	strh	r3, [r7, #10]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008dfe:	897b      	ldrh	r3, [r7, #10]
 8008e00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e04:	7a7b      	ldrb	r3, [r7, #9]
 8008e06:	041b      	lsls	r3, r3, #16
 8008e08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	0d5b      	lsrs	r3, r3, #21
 8008e26:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008e2a:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <I2C_TransferConfig+0x60>)
 8008e2c:	430b      	orrs	r3, r1
 8008e2e:	43db      	mvns	r3, r3
 8008e30:	ea02 0103 	and.w	r1, r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	03ff63ff 	.word	0x03ff63ff

08008e50 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e64:	4a3b      	ldr	r2, [pc, #236]	; (8008f54 <I2C_Enable_IRQ+0x104>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d032      	beq.n	8008ed0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008e6e:	4a3a      	ldr	r2, [pc, #232]	; (8008f58 <I2C_Enable_IRQ+0x108>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d02d      	beq.n	8008ed0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008e78:	4a38      	ldr	r2, [pc, #224]	; (8008f5c <I2C_Enable_IRQ+0x10c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d028      	beq.n	8008ed0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008e7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	da03      	bge.n	8008e8e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008e8c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e8e:	887b      	ldrh	r3, [r7, #2]
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008e9e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008ea0:	887b      	ldrh	r3, [r7, #2]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008eb0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008eb2:	887b      	ldrh	r3, [r7, #2]
 8008eb4:	2b10      	cmp	r3, #16
 8008eb6:	d103      	bne.n	8008ec0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008ebe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008ec0:	887b      	ldrh	r3, [r7, #2]
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	d138      	bne.n	8008f38 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f043 0320 	orr.w	r3, r3, #32
 8008ecc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008ece:	e033      	b.n	8008f38 <I2C_Enable_IRQ+0xe8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008ed0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	da03      	bge.n	8008ee0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008ede:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008ee0:	887b      	ldrh	r3, [r7, #2]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008ef0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008ef2:	887b      	ldrh	r3, [r7, #2]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008f02:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f04:	887b      	ldrh	r3, [r7, #2]
 8008f06:	2b10      	cmp	r3, #16
 8008f08:	d103      	bne.n	8008f12 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008f10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f12:	887b      	ldrh	r3, [r7, #2]
 8008f14:	2b20      	cmp	r3, #32
 8008f16:	d103      	bne.n	8008f20 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f1e:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f24:	4a0d      	ldr	r2, [pc, #52]	; (8008f5c <I2C_Enable_IRQ+0x10c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d006      	beq.n	8008f38 <I2C_Enable_IRQ+0xe8>
 8008f2a:	887b      	ldrh	r3, [r7, #2]
 8008f2c:	2b40      	cmp	r3, #64	; 0x40
 8008f2e:	d103      	bne.n	8008f38 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f36:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6819      	ldr	r1, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	601a      	str	r2, [r3, #0]
}
 8008f48:	bf00      	nop
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	08007a8d 	.word	0x08007a8d
 8008f58:	08007e99 	.word	0x08007e99
 8008f5c:	08007c65 	.word	0x08007c65

08008f60 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f70:	887b      	ldrh	r3, [r7, #2]
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00f      	beq.n	8008f9a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008f80:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f8e:	2b28      	cmp	r3, #40	; 0x28
 8008f90:	d003      	beq.n	8008f9a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008f98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f9a:	887b      	ldrh	r3, [r7, #2]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00f      	beq.n	8008fc4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008faa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008fb8:	2b28      	cmp	r3, #40	; 0x28
 8008fba:	d003      	beq.n	8008fc4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008fc2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008fc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	da03      	bge.n	8008fd4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008fd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008fd4:	887b      	ldrh	r3, [r7, #2]
 8008fd6:	2b10      	cmp	r3, #16
 8008fd8:	d103      	bne.n	8008fe2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008fe0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008fe2:	887b      	ldrh	r3, [r7, #2]
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d103      	bne.n	8008ff0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f043 0320 	orr.w	r3, r3, #32
 8008fee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008ff0:	887b      	ldrh	r3, [r7, #2]
 8008ff2:	2b40      	cmp	r3, #64	; 0x40
 8008ff4:	d103      	bne.n	8008ffe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	43da      	mvns	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	400a      	ands	r2, r1
 800900e:	601a      	str	r2, [r3, #0]
}
 8009010:	bf00      	nop
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b20      	cmp	r3, #32
 8009030:	d138      	bne.n	80090a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009038:	2b01      	cmp	r3, #1
 800903a:	d101      	bne.n	8009040 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800903c:	2302      	movs	r3, #2
 800903e:	e032      	b.n	80090a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2224      	movs	r2, #36	; 0x24
 800904c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f022 0201 	bic.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800906e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6819      	ldr	r1, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0201 	orr.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2220      	movs	r2, #32
 8009094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	e000      	b.n	80090a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090a4:	2302      	movs	r3, #2
  }
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	d139      	bne.n	800913c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e033      	b.n	800913e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2224      	movs	r2, #36	; 0x24
 80090e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0201 	bic.w	r2, r2, #1
 80090f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009104:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2220      	movs	r2, #32
 800912c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
  }
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8009152:	af00      	add	r7, sp, #0
 8009154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800915c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800915e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d102      	bne.n	8009172 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	f001 b823 	b.w	800a1b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 817d 	beq.w	8009482 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8009188:	4bbc      	ldr	r3, [pc, #752]	; (800947c <HAL_RCC_OscConfig+0x330>)
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f003 030c 	and.w	r3, r3, #12
 8009190:	2b04      	cmp	r3, #4
 8009192:	d00c      	beq.n	80091ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009194:	4bb9      	ldr	r3, [pc, #740]	; (800947c <HAL_RCC_OscConfig+0x330>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f003 030c 	and.w	r3, r3, #12
 800919c:	2b08      	cmp	r3, #8
 800919e:	d15c      	bne.n	800925a <HAL_RCC_OscConfig+0x10e>
 80091a0:	4bb6      	ldr	r3, [pc, #728]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ac:	d155      	bne.n	800925a <HAL_RCC_OscConfig+0x10e>
 80091ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80091ba:	fa93 f3a3 	rbit	r3, r3
 80091be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80091c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091c6:	fab3 f383 	clz	r3, r3
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	095b      	lsrs	r3, r3, #5
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	f043 0301 	orr.w	r3, r3, #1
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d102      	bne.n	80091e0 <HAL_RCC_OscConfig+0x94>
 80091da:	4ba8      	ldr	r3, [pc, #672]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	e015      	b.n	800920c <HAL_RCC_OscConfig+0xc0>
 80091e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80091ec:	fa93 f3a3 	rbit	r3, r3
 80091f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80091f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80091fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8009200:	fa93 f3a3 	rbit	r3, r3
 8009204:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8009208:	4b9c      	ldr	r3, [pc, #624]	; (800947c <HAL_RCC_OscConfig+0x330>)
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009210:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8009214:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8009218:	fa92 f2a2 	rbit	r2, r2
 800921c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8009220:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8009224:	fab2 f282 	clz	r2, r2
 8009228:	b2d2      	uxtb	r2, r2
 800922a:	f042 0220 	orr.w	r2, r2, #32
 800922e:	b2d2      	uxtb	r2, r2
 8009230:	f002 021f 	and.w	r2, r2, #31
 8009234:	2101      	movs	r1, #1
 8009236:	fa01 f202 	lsl.w	r2, r1, r2
 800923a:	4013      	ands	r3, r2
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 811f 	beq.w	8009480 <HAL_RCC_OscConfig+0x334>
 8009242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	f040 8116 	bne.w	8009480 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	f000 bfaf 	b.w	800a1b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800925a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800925e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800926a:	d106      	bne.n	800927a <HAL_RCC_OscConfig+0x12e>
 800926c:	4b83      	ldr	r3, [pc, #524]	; (800947c <HAL_RCC_OscConfig+0x330>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a82      	ldr	r2, [pc, #520]	; (800947c <HAL_RCC_OscConfig+0x330>)
 8009272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	e036      	b.n	80092e8 <HAL_RCC_OscConfig+0x19c>
 800927a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800927e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10c      	bne.n	80092a4 <HAL_RCC_OscConfig+0x158>
 800928a:	4b7c      	ldr	r3, [pc, #496]	; (800947c <HAL_RCC_OscConfig+0x330>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a7b      	ldr	r2, [pc, #492]	; (800947c <HAL_RCC_OscConfig+0x330>)
 8009290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	4b79      	ldr	r3, [pc, #484]	; (800947c <HAL_RCC_OscConfig+0x330>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a78      	ldr	r2, [pc, #480]	; (800947c <HAL_RCC_OscConfig+0x330>)
 800929c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e021      	b.n	80092e8 <HAL_RCC_OscConfig+0x19c>
 80092a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092b4:	d10c      	bne.n	80092d0 <HAL_RCC_OscConfig+0x184>
 80092b6:	4b71      	ldr	r3, [pc, #452]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a70      	ldr	r2, [pc, #448]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	4b6e      	ldr	r3, [pc, #440]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a6d      	ldr	r2, [pc, #436]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	e00b      	b.n	80092e8 <HAL_RCC_OscConfig+0x19c>
 80092d0:	4b6a      	ldr	r3, [pc, #424]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a69      	ldr	r2, [pc, #420]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	4b67      	ldr	r3, [pc, #412]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a66      	ldr	r2, [pc, #408]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80092e8:	4b64      	ldr	r3, [pc, #400]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	f023 020f 	bic.w	r2, r3, #15
 80092f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	495f      	ldr	r1, [pc, #380]	; (800947c <HAL_RCC_OscConfig+0x330>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d059      	beq.n	80093c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009312:	f7fc fdd5 	bl	8005ec0 <HAL_GetTick>
 8009316:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800931a:	e00a      	b.n	8009332 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800931c:	f7fc fdd0 	bl	8005ec0 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	2b64      	cmp	r3, #100	; 0x64
 800932a:	d902      	bls.n	8009332 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	f000 bf43 	b.w	800a1b8 <HAL_RCC_OscConfig+0x106c>
 8009332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009336:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800933a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800933e:	fa93 f3a3 	rbit	r3, r3
 8009342:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8009346:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800934a:	fab3 f383 	clz	r3, r3
 800934e:	b2db      	uxtb	r3, r3
 8009350:	095b      	lsrs	r3, r3, #5
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f043 0301 	orr.w	r3, r3, #1
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b01      	cmp	r3, #1
 800935c:	d102      	bne.n	8009364 <HAL_RCC_OscConfig+0x218>
 800935e:	4b47      	ldr	r3, [pc, #284]	; (800947c <HAL_RCC_OscConfig+0x330>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	e015      	b.n	8009390 <HAL_RCC_OscConfig+0x244>
 8009364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009368:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800936c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8009370:	fa93 f3a3 	rbit	r3, r3
 8009374:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8009378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800937c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8009380:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009384:	fa93 f3a3 	rbit	r3, r3
 8009388:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800938c:	4b3b      	ldr	r3, [pc, #236]	; (800947c <HAL_RCC_OscConfig+0x330>)
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009394:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8009398:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800939c:	fa92 f2a2 	rbit	r2, r2
 80093a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80093a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80093a8:	fab2 f282 	clz	r2, r2
 80093ac:	b2d2      	uxtb	r2, r2
 80093ae:	f042 0220 	orr.w	r2, r2, #32
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	f002 021f 	and.w	r2, r2, #31
 80093b8:	2101      	movs	r1, #1
 80093ba:	fa01 f202 	lsl.w	r2, r1, r2
 80093be:	4013      	ands	r3, r2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0ab      	beq.n	800931c <HAL_RCC_OscConfig+0x1d0>
 80093c4:	e05d      	b.n	8009482 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093c6:	f7fc fd7b 	bl	8005ec0 <HAL_GetTick>
 80093ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093ce:	e00a      	b.n	80093e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093d0:	f7fc fd76 	bl	8005ec0 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	2b64      	cmp	r3, #100	; 0x64
 80093de:	d902      	bls.n	80093e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	f000 bee9 	b.w	800a1b8 <HAL_RCC_OscConfig+0x106c>
 80093e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80093ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80093f2:	fa93 f3a3 	rbit	r3, r3
 80093f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80093fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093fe:	fab3 f383 	clz	r3, r3
 8009402:	b2db      	uxtb	r3, r3
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	b2db      	uxtb	r3, r3
 8009408:	f043 0301 	orr.w	r3, r3, #1
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b01      	cmp	r3, #1
 8009410:	d102      	bne.n	8009418 <HAL_RCC_OscConfig+0x2cc>
 8009412:	4b1a      	ldr	r3, [pc, #104]	; (800947c <HAL_RCC_OscConfig+0x330>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	e015      	b.n	8009444 <HAL_RCC_OscConfig+0x2f8>
 8009418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800941c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009420:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009424:	fa93 f3a3 	rbit	r3, r3
 8009428:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800942c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009430:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009434:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009438:	fa93 f3a3 	rbit	r3, r3
 800943c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009440:	4b0e      	ldr	r3, [pc, #56]	; (800947c <HAL_RCC_OscConfig+0x330>)
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009448:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800944c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8009450:	fa92 f2a2 	rbit	r2, r2
 8009454:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8009458:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800945c:	fab2 f282 	clz	r2, r2
 8009460:	b2d2      	uxtb	r2, r2
 8009462:	f042 0220 	orr.w	r2, r2, #32
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	f002 021f 	and.w	r2, r2, #31
 800946c:	2101      	movs	r1, #1
 800946e:	fa01 f202 	lsl.w	r2, r1, r2
 8009472:	4013      	ands	r3, r2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1ab      	bne.n	80093d0 <HAL_RCC_OscConfig+0x284>
 8009478:	e003      	b.n	8009482 <HAL_RCC_OscConfig+0x336>
 800947a:	bf00      	nop
 800947c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 817d 	beq.w	8009792 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009498:	4ba6      	ldr	r3, [pc, #664]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	f003 030c 	and.w	r3, r3, #12
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80094a4:	4ba3      	ldr	r3, [pc, #652]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f003 030c 	and.w	r3, r3, #12
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d172      	bne.n	8009596 <HAL_RCC_OscConfig+0x44a>
 80094b0:	4ba0      	ldr	r3, [pc, #640]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d16c      	bne.n	8009596 <HAL_RCC_OscConfig+0x44a>
 80094bc:	2302      	movs	r3, #2
 80094be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80094c6:	fa93 f3a3 	rbit	r3, r3
 80094ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80094ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094d2:	fab3 f383 	clz	r3, r3
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	095b      	lsrs	r3, r3, #5
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	f043 0301 	orr.w	r3, r3, #1
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d102      	bne.n	80094ec <HAL_RCC_OscConfig+0x3a0>
 80094e6:	4b93      	ldr	r3, [pc, #588]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	e013      	b.n	8009514 <HAL_RCC_OscConfig+0x3c8>
 80094ec:	2302      	movs	r3, #2
 80094ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80094f6:	fa93 f3a3 	rbit	r3, r3
 80094fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80094fe:	2302      	movs	r3, #2
 8009500:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009504:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009508:	fa93 f3a3 	rbit	r3, r3
 800950c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009510:	4b88      	ldr	r3, [pc, #544]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	2202      	movs	r2, #2
 8009516:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800951a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800951e:	fa92 f2a2 	rbit	r2, r2
 8009522:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8009526:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800952a:	fab2 f282 	clz	r2, r2
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	f042 0220 	orr.w	r2, r2, #32
 8009534:	b2d2      	uxtb	r2, r2
 8009536:	f002 021f 	and.w	r2, r2, #31
 800953a:	2101      	movs	r1, #1
 800953c:	fa01 f202 	lsl.w	r2, r1, r2
 8009540:	4013      	ands	r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <HAL_RCC_OscConfig+0x410>
 8009546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800954a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d002      	beq.n	800955c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	f000 be2e 	b.w	800a1b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800955c:	4b75      	ldr	r3, [pc, #468]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009568:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	21f8      	movs	r1, #248	; 0xf8
 8009572:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009576:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800957a:	fa91 f1a1 	rbit	r1, r1
 800957e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8009582:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8009586:	fab1 f181 	clz	r1, r1
 800958a:	b2c9      	uxtb	r1, r1
 800958c:	408b      	lsls	r3, r1
 800958e:	4969      	ldr	r1, [pc, #420]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 8009590:	4313      	orrs	r3, r2
 8009592:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009594:	e0fd      	b.n	8009792 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800959a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8088 	beq.w	80096b8 <HAL_RCC_OscConfig+0x56c>
 80095a8:	2301      	movs	r3, #1
 80095aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80095b2:	fa93 f3a3 	rbit	r3, r3
 80095b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80095ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095be:	fab3 f383 	clz	r3, r3
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80095c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	461a      	mov	r2, r3
 80095d0:	2301      	movs	r3, #1
 80095d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095d4:	f7fc fc74 	bl	8005ec0 <HAL_GetTick>
 80095d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095dc:	e00a      	b.n	80095f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095de:	f7fc fc6f 	bl	8005ec0 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d902      	bls.n	80095f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	f000 bde2 	b.w	800a1b8 <HAL_RCC_OscConfig+0x106c>
 80095f4:	2302      	movs	r3, #2
 80095f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80095fe:	fa93 f3a3 	rbit	r3, r3
 8009602:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8009606:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800960a:	fab3 f383 	clz	r3, r3
 800960e:	b2db      	uxtb	r3, r3
 8009610:	095b      	lsrs	r3, r3, #5
 8009612:	b2db      	uxtb	r3, r3
 8009614:	f043 0301 	orr.w	r3, r3, #1
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b01      	cmp	r3, #1
 800961c:	d102      	bne.n	8009624 <HAL_RCC_OscConfig+0x4d8>
 800961e:	4b45      	ldr	r3, [pc, #276]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	e013      	b.n	800964c <HAL_RCC_OscConfig+0x500>
 8009624:	2302      	movs	r3, #2
 8009626:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800962a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800962e:	fa93 f3a3 	rbit	r3, r3
 8009632:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009636:	2302      	movs	r3, #2
 8009638:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800963c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009640:	fa93 f3a3 	rbit	r3, r3
 8009644:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009648:	4b3a      	ldr	r3, [pc, #232]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	2202      	movs	r2, #2
 800964e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8009652:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009656:	fa92 f2a2 	rbit	r2, r2
 800965a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800965e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009662:	fab2 f282 	clz	r2, r2
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	f042 0220 	orr.w	r2, r2, #32
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	f002 021f 	and.w	r2, r2, #31
 8009672:	2101      	movs	r1, #1
 8009674:	fa01 f202 	lsl.w	r2, r1, r2
 8009678:	4013      	ands	r3, r2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0af      	beq.n	80095de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800967e:	4b2d      	ldr	r3, [pc, #180]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800968a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	21f8      	movs	r1, #248	; 0xf8
 8009694:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009698:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800969c:	fa91 f1a1 	rbit	r1, r1
 80096a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80096a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80096a8:	fab1 f181 	clz	r1, r1
 80096ac:	b2c9      	uxtb	r1, r1
 80096ae:	408b      	lsls	r3, r1
 80096b0:	4920      	ldr	r1, [pc, #128]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	600b      	str	r3, [r1, #0]
 80096b6:	e06c      	b.n	8009792 <HAL_RCC_OscConfig+0x646>
 80096b8:	2301      	movs	r3, #1
 80096ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80096c2:	fa93 f3a3 	rbit	r3, r3
 80096c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80096ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096ce:	fab3 f383 	clz	r3, r3
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80096d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	461a      	mov	r2, r3
 80096e0:	2300      	movs	r3, #0
 80096e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096e4:	f7fc fbec 	bl	8005ec0 <HAL_GetTick>
 80096e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096ec:	e00a      	b.n	8009704 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096ee:	f7fc fbe7 	bl	8005ec0 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d902      	bls.n	8009704 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	f000 bd5a 	b.w	800a1b8 <HAL_RCC_OscConfig+0x106c>
 8009704:	2302      	movs	r3, #2
 8009706:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800970a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800970e:	fa93 f3a3 	rbit	r3, r3
 8009712:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8009716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800971a:	fab3 f383 	clz	r3, r3
 800971e:	b2db      	uxtb	r3, r3
 8009720:	095b      	lsrs	r3, r3, #5
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f043 0301 	orr.w	r3, r3, #1
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b01      	cmp	r3, #1
 800972c:	d104      	bne.n	8009738 <HAL_RCC_OscConfig+0x5ec>
 800972e:	4b01      	ldr	r3, [pc, #4]	; (8009734 <HAL_RCC_OscConfig+0x5e8>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	e015      	b.n	8009760 <HAL_RCC_OscConfig+0x614>
 8009734:	40021000 	.word	0x40021000
 8009738:	2302      	movs	r3, #2
 800973a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800973e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009742:	fa93 f3a3 	rbit	r3, r3
 8009746:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800974a:	2302      	movs	r3, #2
 800974c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009750:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009754:	fa93 f3a3 	rbit	r3, r3
 8009758:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800975c:	4bc8      	ldr	r3, [pc, #800]	; (8009a80 <HAL_RCC_OscConfig+0x934>)
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	2202      	movs	r2, #2
 8009762:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8009766:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800976a:	fa92 f2a2 	rbit	r2, r2
 800976e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8009772:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009776:	fab2 f282 	clz	r2, r2
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	f042 0220 	orr.w	r2, r2, #32
 8009780:	b2d2      	uxtb	r2, r2
 8009782:	f002 021f 	and.w	r2, r2, #31
 8009786:	2101      	movs	r1, #1
 8009788:	fa01 f202 	lsl.w	r2, r1, r2
 800978c:	4013      	ands	r3, r2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1ad      	bne.n	80096ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0308 	and.w	r3, r3, #8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 8110 	beq.w	80099c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80097a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d079      	beq.n	80098ac <HAL_RCC_OscConfig+0x760>
 80097b8:	2301      	movs	r3, #1
 80097ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80097c2:	fa93 f3a3 	rbit	r3, r3
 80097c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80097ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097ce:	fab3 f383 	clz	r3, r3
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	4bab      	ldr	r3, [pc, #684]	; (8009a84 <HAL_RCC_OscConfig+0x938>)
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	461a      	mov	r2, r3
 80097de:	2301      	movs	r3, #1
 80097e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097e2:	f7fc fb6d 	bl	8005ec0 <HAL_GetTick>
 80097e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097ea:	e00a      	b.n	8009802 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097ec:	f7fc fb68 	bl	8005ec0 <HAL_GetTick>
 80097f0:	4602      	mov	r2, r0
 80097f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d902      	bls.n	8009802 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	f000 bcdb 	b.w	800a1b8 <HAL_RCC_OscConfig+0x106c>
 8009802:	2302      	movs	r3, #2
 8009804:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800980c:	fa93 f3a3 	rbit	r3, r3
 8009810:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009818:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800981c:	2202      	movs	r2, #2
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009824:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	fa93 f2a3 	rbit	r2, r3
 800982e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800983c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009840:	2202      	movs	r2, #2
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	fa93 f2a3 	rbit	r2, r3
 8009852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009856:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800985a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800985c:	4b88      	ldr	r3, [pc, #544]	; (8009a80 <HAL_RCC_OscConfig+0x934>)
 800985e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009864:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009868:	2102      	movs	r1, #2
 800986a:	6019      	str	r1, [r3, #0]
 800986c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009870:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	fa93 f1a3 	rbit	r1, r3
 800987a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800987e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009882:	6019      	str	r1, [r3, #0]
  return result;
 8009884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009888:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	fab3 f383 	clz	r3, r3
 8009892:	b2db      	uxtb	r3, r3
 8009894:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 031f 	and.w	r3, r3, #31
 800989e:	2101      	movs	r1, #1
 80098a0:	fa01 f303 	lsl.w	r3, r1, r3
 80098a4:	4013      	ands	r3, r2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d0a0      	beq.n	80097ec <HAL_RCC_OscConfig+0x6a0>
 80098aa:	e08d      	b.n	80099c8 <HAL_RCC_OscConfig+0x87c>
 80098ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80098b4:	2201      	movs	r2, #1
 80098b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	fa93 f2a3 	rbit	r2, r3
 80098c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80098ce:	601a      	str	r2, [r3, #0]
  return result;
 80098d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80098d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098da:	fab3 f383 	clz	r3, r3
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	461a      	mov	r2, r3
 80098e2:	4b68      	ldr	r3, [pc, #416]	; (8009a84 <HAL_RCC_OscConfig+0x938>)
 80098e4:	4413      	add	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	461a      	mov	r2, r3
 80098ea:	2300      	movs	r3, #0
 80098ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098ee:	f7fc fae7 	bl	8005ec0 <HAL_GetTick>
 80098f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098f6:	e00a      	b.n	800990e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098f8:	f7fc fae2 	bl	8005ec0 <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	2b02      	cmp	r3, #2
 8009906:	d902      	bls.n	800990e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	f000 bc55 	b.w	800a1b8 <HAL_RCC_OscConfig+0x106c>
 800990e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009912:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009916:	2202      	movs	r2, #2
 8009918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800991a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800991e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	fa93 f2a3 	rbit	r2, r3
 8009928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800992c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009936:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800993a:	2202      	movs	r2, #2
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009942:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	fa93 f2a3 	rbit	r2, r3
 800994c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009950:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800995a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800995e:	2202      	movs	r2, #2
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	fa93 f2a3 	rbit	r2, r3
 8009970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009974:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009978:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800997a:	4b41      	ldr	r3, [pc, #260]	; (8009a80 <HAL_RCC_OscConfig+0x934>)
 800997c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800997e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009982:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009986:	2102      	movs	r1, #2
 8009988:	6019      	str	r1, [r3, #0]
 800998a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800998e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	fa93 f1a3 	rbit	r1, r3
 8009998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800999c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80099a0:	6019      	str	r1, [r3, #0]
  return result;
 80099a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	fab3 f383 	clz	r3, r3
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	f003 031f 	and.w	r3, r3, #31
 80099bc:	2101      	movs	r1, #1
 80099be:	fa01 f303 	lsl.w	r3, r1, r3
 80099c2:	4013      	ands	r3, r2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d197      	bne.n	80098f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 81a1 	beq.w	8009d20 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099de:	2300      	movs	r3, #0
 80099e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099e4:	4b26      	ldr	r3, [pc, #152]	; (8009a80 <HAL_RCC_OscConfig+0x934>)
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d116      	bne.n	8009a1e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099f0:	4b23      	ldr	r3, [pc, #140]	; (8009a80 <HAL_RCC_OscConfig+0x934>)
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	4a22      	ldr	r2, [pc, #136]	; (8009a80 <HAL_RCC_OscConfig+0x934>)
 80099f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099fa:	61d3      	str	r3, [r2, #28]
 80099fc:	4b20      	ldr	r3, [pc, #128]	; (8009a80 <HAL_RCC_OscConfig+0x934>)
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a08:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a12:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009a16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a1e:	4b1a      	ldr	r3, [pc, #104]	; (8009a88 <HAL_RCC_OscConfig+0x93c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d11a      	bne.n	8009a60 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a2a:	4b17      	ldr	r3, [pc, #92]	; (8009a88 <HAL_RCC_OscConfig+0x93c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a16      	ldr	r2, [pc, #88]	; (8009a88 <HAL_RCC_OscConfig+0x93c>)
 8009a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a36:	f7fc fa43 	bl	8005ec0 <HAL_GetTick>
 8009a3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a3e:	e009      	b.n	8009a54 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a40:	f7fc fa3e 	bl	8005ec0 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	2b64      	cmp	r3, #100	; 0x64
 8009a4e:	d901      	bls.n	8009a54 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e3b1      	b.n	800a1b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a54:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <HAL_RCC_OscConfig+0x93c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0ef      	beq.n	8009a40 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d10d      	bne.n	8009a8c <HAL_RCC_OscConfig+0x940>
 8009a70:	4b03      	ldr	r3, [pc, #12]	; (8009a80 <HAL_RCC_OscConfig+0x934>)
 8009a72:	6a1b      	ldr	r3, [r3, #32]
 8009a74:	4a02      	ldr	r2, [pc, #8]	; (8009a80 <HAL_RCC_OscConfig+0x934>)
 8009a76:	f043 0301 	orr.w	r3, r3, #1
 8009a7a:	6213      	str	r3, [r2, #32]
 8009a7c:	e03c      	b.n	8009af8 <HAL_RCC_OscConfig+0x9ac>
 8009a7e:	bf00      	nop
 8009a80:	40021000 	.word	0x40021000
 8009a84:	10908120 	.word	0x10908120
 8009a88:	40007000 	.word	0x40007000
 8009a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10c      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x96a>
 8009a9c:	4bc1      	ldr	r3, [pc, #772]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	4ac0      	ldr	r2, [pc, #768]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009aa2:	f023 0301 	bic.w	r3, r3, #1
 8009aa6:	6213      	str	r3, [r2, #32]
 8009aa8:	4bbe      	ldr	r3, [pc, #760]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	4abd      	ldr	r2, [pc, #756]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009aae:	f023 0304 	bic.w	r3, r3, #4
 8009ab2:	6213      	str	r3, [r2, #32]
 8009ab4:	e020      	b.n	8009af8 <HAL_RCC_OscConfig+0x9ac>
 8009ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	2b05      	cmp	r3, #5
 8009ac4:	d10c      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x994>
 8009ac6:	4bb7      	ldr	r3, [pc, #732]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	4ab6      	ldr	r2, [pc, #728]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009acc:	f043 0304 	orr.w	r3, r3, #4
 8009ad0:	6213      	str	r3, [r2, #32]
 8009ad2:	4bb4      	ldr	r3, [pc, #720]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	4ab3      	ldr	r2, [pc, #716]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009ad8:	f043 0301 	orr.w	r3, r3, #1
 8009adc:	6213      	str	r3, [r2, #32]
 8009ade:	e00b      	b.n	8009af8 <HAL_RCC_OscConfig+0x9ac>
 8009ae0:	4bb0      	ldr	r3, [pc, #704]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	4aaf      	ldr	r2, [pc, #700]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009ae6:	f023 0301 	bic.w	r3, r3, #1
 8009aea:	6213      	str	r3, [r2, #32]
 8009aec:	4bad      	ldr	r3, [pc, #692]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	4aac      	ldr	r2, [pc, #688]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009af2:	f023 0304 	bic.w	r3, r3, #4
 8009af6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009afc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 8081 	beq.w	8009c0c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b0a:	f7fc f9d9 	bl	8005ec0 <HAL_GetTick>
 8009b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b12:	e00b      	b.n	8009b2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b14:	f7fc f9d4 	bl	8005ec0 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d901      	bls.n	8009b2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e345      	b.n	800a1b8 <HAL_RCC_OscConfig+0x106c>
 8009b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009b34:	2202      	movs	r2, #2
 8009b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	fa93 f2a3 	rbit	r2, r3
 8009b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009b58:	2202      	movs	r2, #2
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	fa93 f2a3 	rbit	r2, r3
 8009b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009b72:	601a      	str	r2, [r3, #0]
  return result;
 8009b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b78:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009b7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b7e:	fab3 f383 	clz	r3, r3
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	095b      	lsrs	r3, r3, #5
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	f043 0302 	orr.w	r3, r3, #2
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d102      	bne.n	8009b98 <HAL_RCC_OscConfig+0xa4c>
 8009b92:	4b84      	ldr	r3, [pc, #528]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	e013      	b.n	8009bc0 <HAL_RCC_OscConfig+0xa74>
 8009b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ba8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	fa93 f2a3 	rbit	r2, r3
 8009bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bb6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	4b79      	ldr	r3, [pc, #484]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bc4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009bc8:	2102      	movs	r1, #2
 8009bca:	6011      	str	r1, [r2, #0]
 8009bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bd0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009bd4:	6812      	ldr	r2, [r2, #0]
 8009bd6:	fa92 f1a2 	rbit	r1, r2
 8009bda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bde:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009be2:	6011      	str	r1, [r2, #0]
  return result;
 8009be4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009be8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009bec:	6812      	ldr	r2, [r2, #0]
 8009bee:	fab2 f282 	clz	r2, r2
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	f002 021f 	and.w	r2, r2, #31
 8009bfe:	2101      	movs	r1, #1
 8009c00:	fa01 f202 	lsl.w	r2, r1, r2
 8009c04:	4013      	ands	r3, r2
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d084      	beq.n	8009b14 <HAL_RCC_OscConfig+0x9c8>
 8009c0a:	e07f      	b.n	8009d0c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c0c:	f7fc f958 	bl	8005ec0 <HAL_GetTick>
 8009c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c14:	e00b      	b.n	8009c2e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c16:	f7fc f953 	bl	8005ec0 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d901      	bls.n	8009c2e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e2c4      	b.n	800a1b8 <HAL_RCC_OscConfig+0x106c>
 8009c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009c36:	2202      	movs	r2, #2
 8009c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	fa93 f2a3 	rbit	r2, r3
 8009c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	fa93 f2a3 	rbit	r2, r3
 8009c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009c74:	601a      	str	r2, [r3, #0]
  return result;
 8009c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c7a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009c7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c80:	fab3 f383 	clz	r3, r3
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	095b      	lsrs	r3, r3, #5
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	f043 0302 	orr.w	r3, r3, #2
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d102      	bne.n	8009c9a <HAL_RCC_OscConfig+0xb4e>
 8009c94:	4b43      	ldr	r3, [pc, #268]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	e013      	b.n	8009cc2 <HAL_RCC_OscConfig+0xb76>
 8009c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009caa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	fa93 f2a3 	rbit	r2, r3
 8009cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	4b39      	ldr	r3, [pc, #228]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cc6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009cca:	2102      	movs	r1, #2
 8009ccc:	6011      	str	r1, [r2, #0]
 8009cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cd2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009cd6:	6812      	ldr	r2, [r2, #0]
 8009cd8:	fa92 f1a2 	rbit	r1, r2
 8009cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ce0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009ce4:	6011      	str	r1, [r2, #0]
  return result;
 8009ce6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009cee:	6812      	ldr	r2, [r2, #0]
 8009cf0:	fab2 f282 	clz	r2, r2
 8009cf4:	b2d2      	uxtb	r2, r2
 8009cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cfa:	b2d2      	uxtb	r2, r2
 8009cfc:	f002 021f 	and.w	r2, r2, #31
 8009d00:	2101      	movs	r1, #1
 8009d02:	fa01 f202 	lsl.w	r2, r1, r2
 8009d06:	4013      	ands	r3, r2
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d184      	bne.n	8009c16 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009d0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d105      	bne.n	8009d20 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d14:	4b23      	ldr	r3, [pc, #140]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	4a22      	ldr	r2, [pc, #136]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 8242 	beq.w	800a1b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d32:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <HAL_RCC_OscConfig+0xc58>)
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f003 030c 	and.w	r3, r3, #12
 8009d3a:	2b08      	cmp	r3, #8
 8009d3c:	f000 8213 	beq.w	800a166 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	f040 8162 	bne.w	800a016 <HAL_RCC_OscConfig+0xeca>
 8009d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d56:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009d5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d64:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	fa93 f2a3 	rbit	r2, r3
 8009d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d72:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009d76:	601a      	str	r2, [r3, #0]
  return result;
 8009d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009d80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d82:	fab3 f383 	clz	r3, r3
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009d8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	461a      	mov	r2, r3
 8009d94:	2300      	movs	r3, #0
 8009d96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d98:	f7fc f892 	bl	8005ec0 <HAL_GetTick>
 8009d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009da0:	e00c      	b.n	8009dbc <HAL_RCC_OscConfig+0xc70>
 8009da2:	bf00      	nop
 8009da4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009da8:	f7fc f88a 	bl	8005ec0 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d901      	bls.n	8009dbc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e1fd      	b.n	800a1b8 <HAL_RCC_OscConfig+0x106c>
 8009dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dc0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	fa93 f2a3 	rbit	r2, r3
 8009dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ddc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009de0:	601a      	str	r2, [r3, #0]
  return result;
 8009de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009de6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009dea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009dec:	fab3 f383 	clz	r3, r3
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d102      	bne.n	8009e06 <HAL_RCC_OscConfig+0xcba>
 8009e00:	4bb0      	ldr	r3, [pc, #704]	; (800a0c4 <HAL_RCC_OscConfig+0xf78>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	e027      	b.n	8009e56 <HAL_RCC_OscConfig+0xd0a>
 8009e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e18:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	fa93 f2a3 	rbit	r2, r3
 8009e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e30:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e3e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	fa93 f2a3 	rbit	r2, r3
 8009e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	4b9c      	ldr	r3, [pc, #624]	; (800a0c4 <HAL_RCC_OscConfig+0xf78>)
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e5a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009e5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009e62:	6011      	str	r1, [r2, #0]
 8009e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e68:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009e6c:	6812      	ldr	r2, [r2, #0]
 8009e6e:	fa92 f1a2 	rbit	r1, r2
 8009e72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009e7a:	6011      	str	r1, [r2, #0]
  return result;
 8009e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e80:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009e84:	6812      	ldr	r2, [r2, #0]
 8009e86:	fab2 f282 	clz	r2, r2
 8009e8a:	b2d2      	uxtb	r2, r2
 8009e8c:	f042 0220 	orr.w	r2, r2, #32
 8009e90:	b2d2      	uxtb	r2, r2
 8009e92:	f002 021f 	and.w	r2, r2, #31
 8009e96:	2101      	movs	r1, #1
 8009e98:	fa01 f202 	lsl.w	r2, r1, r2
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d182      	bne.n	8009da8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ea2:	4b88      	ldr	r3, [pc, #544]	; (800a0c4 <HAL_RCC_OscConfig+0xf78>)
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	430b      	orrs	r3, r1
 8009ec4:	497f      	ldr	r1, [pc, #508]	; (800a0c4 <HAL_RCC_OscConfig+0xf78>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	604b      	str	r3, [r1, #4]
 8009eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ece:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009edc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	fa93 f2a3 	rbit	r2, r3
 8009ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009eee:	601a      	str	r2, [r3, #0]
  return result;
 8009ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ef4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009ef8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009efa:	fab3 f383 	clz	r3, r3
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f10:	f7fb ffd6 	bl	8005ec0 <HAL_GetTick>
 8009f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009f18:	e009      	b.n	8009f2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f1a:	f7fb ffd1 	bl	8005ec0 <HAL_GetTick>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d901      	bls.n	8009f2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e144      	b.n	800a1b8 <HAL_RCC_OscConfig+0x106c>
 8009f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	fa93 f2a3 	rbit	r2, r3
 8009f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009f52:	601a      	str	r2, [r3, #0]
  return result;
 8009f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009f5e:	fab3 f383 	clz	r3, r3
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	095b      	lsrs	r3, r3, #5
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f043 0301 	orr.w	r3, r3, #1
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d102      	bne.n	8009f78 <HAL_RCC_OscConfig+0xe2c>
 8009f72:	4b54      	ldr	r3, [pc, #336]	; (800a0c4 <HAL_RCC_OscConfig+0xf78>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	e027      	b.n	8009fc8 <HAL_RCC_OscConfig+0xe7c>
 8009f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	fa93 f2a3 	rbit	r2, r3
 8009f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fa2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009fa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fb0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	fa93 f2a3 	rbit	r2, r3
 8009fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fbe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	4b3f      	ldr	r3, [pc, #252]	; (800a0c4 <HAL_RCC_OscConfig+0xf78>)
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fcc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009fd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fda:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009fde:	6812      	ldr	r2, [r2, #0]
 8009fe0:	fa92 f1a2 	rbit	r1, r2
 8009fe4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fe8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009fec:	6011      	str	r1, [r2, #0]
  return result;
 8009fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ff2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009ff6:	6812      	ldr	r2, [r2, #0]
 8009ff8:	fab2 f282 	clz	r2, r2
 8009ffc:	b2d2      	uxtb	r2, r2
 8009ffe:	f042 0220 	orr.w	r2, r2, #32
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	f002 021f 	and.w	r2, r2, #31
 800a008:	2101      	movs	r1, #1
 800a00a:	fa01 f202 	lsl.w	r2, r1, r2
 800a00e:	4013      	ands	r3, r2
 800a010:	2b00      	cmp	r3, #0
 800a012:	d082      	beq.n	8009f1a <HAL_RCC_OscConfig+0xdce>
 800a014:	e0cf      	b.n	800a1b6 <HAL_RCC_OscConfig+0x106a>
 800a016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a01a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a01e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a028:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	fa93 f2a3 	rbit	r2, r3
 800a032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a036:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a03a:	601a      	str	r2, [r3, #0]
  return result;
 800a03c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a040:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a044:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a046:	fab3 f383 	clz	r3, r3
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a050:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	461a      	mov	r2, r3
 800a058:	2300      	movs	r3, #0
 800a05a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a05c:	f7fb ff30 	bl	8005ec0 <HAL_GetTick>
 800a060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a064:	e009      	b.n	800a07a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a066:	f7fb ff2b 	bl	8005ec0 <HAL_GetTick>
 800a06a:	4602      	mov	r2, r0
 800a06c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b02      	cmp	r3, #2
 800a074:	d901      	bls.n	800a07a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e09e      	b.n	800a1b8 <HAL_RCC_OscConfig+0x106c>
 800a07a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a07e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a08c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	fa93 f2a3 	rbit	r2, r3
 800a096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a09a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a09e:	601a      	str	r2, [r3, #0]
  return result;
 800a0a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a0a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a0aa:	fab3 f383 	clz	r3, r3
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	095b      	lsrs	r3, r3, #5
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f043 0301 	orr.w	r3, r3, #1
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d104      	bne.n	800a0c8 <HAL_RCC_OscConfig+0xf7c>
 800a0be:	4b01      	ldr	r3, [pc, #4]	; (800a0c4 <HAL_RCC_OscConfig+0xf78>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	e029      	b.n	800a118 <HAL_RCC_OscConfig+0xfcc>
 800a0c4:	40021000 	.word	0x40021000
 800a0c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0cc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a0d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0da:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	fa93 f2a3 	rbit	r2, r3
 800a0e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0e8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0f2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a0f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a100:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	fa93 f2a3 	rbit	r2, r3
 800a10a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a10e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	4b2b      	ldr	r3, [pc, #172]	; (800a1c4 <HAL_RCC_OscConfig+0x1078>)
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a11c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a120:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a124:	6011      	str	r1, [r2, #0]
 800a126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a12a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a12e:	6812      	ldr	r2, [r2, #0]
 800a130:	fa92 f1a2 	rbit	r1, r2
 800a134:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a138:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a13c:	6011      	str	r1, [r2, #0]
  return result;
 800a13e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a142:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a146:	6812      	ldr	r2, [r2, #0]
 800a148:	fab2 f282 	clz	r2, r2
 800a14c:	b2d2      	uxtb	r2, r2
 800a14e:	f042 0220 	orr.w	r2, r2, #32
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	f002 021f 	and.w	r2, r2, #31
 800a158:	2101      	movs	r1, #1
 800a15a:	fa01 f202 	lsl.w	r2, r1, r2
 800a15e:	4013      	ands	r3, r2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d180      	bne.n	800a066 <HAL_RCC_OscConfig+0xf1a>
 800a164:	e027      	b.n	800a1b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a16a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d101      	bne.n	800a17a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e01e      	b.n	800a1b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a17a:	4b12      	ldr	r3, [pc, #72]	; (800a1c4 <HAL_RCC_OscConfig+0x1078>)
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a182:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a186:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a18a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a18e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	429a      	cmp	r2, r3
 800a198:	d10b      	bne.n	800a1b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800a19a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a19e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a1a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d001      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	40021000 	.word	0x40021000

0800a1c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b09e      	sub	sp, #120	; 0x78
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e162      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a1e0:	4b90      	ldr	r3, [pc, #576]	; (800a424 <HAL_RCC_ClockConfig+0x25c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d910      	bls.n	800a210 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1ee:	4b8d      	ldr	r3, [pc, #564]	; (800a424 <HAL_RCC_ClockConfig+0x25c>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f023 0207 	bic.w	r2, r3, #7
 800a1f6:	498b      	ldr	r1, [pc, #556]	; (800a424 <HAL_RCC_ClockConfig+0x25c>)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1fe:	4b89      	ldr	r3, [pc, #548]	; (800a424 <HAL_RCC_ClockConfig+0x25c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0307 	and.w	r3, r3, #7
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d001      	beq.n	800a210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e14a      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d008      	beq.n	800a22e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a21c:	4b82      	ldr	r3, [pc, #520]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	497f      	ldr	r1, [pc, #508]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 80dc 	beq.w	800a3f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d13c      	bne.n	800a2be <HAL_RCC_ClockConfig+0xf6>
 800a244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a248:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a24a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a24c:	fa93 f3a3 	rbit	r3, r3
 800a250:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800a252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a254:	fab3 f383 	clz	r3, r3
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	095b      	lsrs	r3, r3, #5
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	f043 0301 	orr.w	r3, r3, #1
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b01      	cmp	r3, #1
 800a266:	d102      	bne.n	800a26e <HAL_RCC_ClockConfig+0xa6>
 800a268:	4b6f      	ldr	r3, [pc, #444]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	e00f      	b.n	800a28e <HAL_RCC_ClockConfig+0xc6>
 800a26e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a272:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a276:	fa93 f3a3 	rbit	r3, r3
 800a27a:	667b      	str	r3, [r7, #100]	; 0x64
 800a27c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a280:	663b      	str	r3, [r7, #96]	; 0x60
 800a282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a284:	fa93 f3a3 	rbit	r3, r3
 800a288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a28a:	4b67      	ldr	r3, [pc, #412]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a292:	65ba      	str	r2, [r7, #88]	; 0x58
 800a294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a296:	fa92 f2a2 	rbit	r2, r2
 800a29a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800a29c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a29e:	fab2 f282 	clz	r2, r2
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	f042 0220 	orr.w	r2, r2, #32
 800a2a8:	b2d2      	uxtb	r2, r2
 800a2aa:	f002 021f 	and.w	r2, r2, #31
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	fa01 f202 	lsl.w	r2, r1, r2
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d17b      	bne.n	800a3b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e0f3      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d13c      	bne.n	800a340 <HAL_RCC_ClockConfig+0x178>
 800a2c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2ce:	fa93 f3a3 	rbit	r3, r3
 800a2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2d6:	fab3 f383 	clz	r3, r3
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	095b      	lsrs	r3, r3, #5
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f043 0301 	orr.w	r3, r3, #1
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d102      	bne.n	800a2f0 <HAL_RCC_ClockConfig+0x128>
 800a2ea:	4b4f      	ldr	r3, [pc, #316]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	e00f      	b.n	800a310 <HAL_RCC_ClockConfig+0x148>
 800a2f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f8:	fa93 f3a3 	rbit	r3, r3
 800a2fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a2fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a302:	643b      	str	r3, [r7, #64]	; 0x40
 800a304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a306:	fa93 f3a3 	rbit	r3, r3
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a30c:	4b46      	ldr	r3, [pc, #280]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a314:	63ba      	str	r2, [r7, #56]	; 0x38
 800a316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a318:	fa92 f2a2 	rbit	r2, r2
 800a31c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800a31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a320:	fab2 f282 	clz	r2, r2
 800a324:	b2d2      	uxtb	r2, r2
 800a326:	f042 0220 	orr.w	r2, r2, #32
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	f002 021f 	and.w	r2, r2, #31
 800a330:	2101      	movs	r1, #1
 800a332:	fa01 f202 	lsl.w	r2, r1, r2
 800a336:	4013      	ands	r3, r2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d13a      	bne.n	800a3b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e0b2      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x2de>
 800a340:	2302      	movs	r3, #2
 800a342:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	fa93 f3a3 	rbit	r3, r3
 800a34a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a34e:	fab3 f383 	clz	r3, r3
 800a352:	b2db      	uxtb	r3, r3
 800a354:	095b      	lsrs	r3, r3, #5
 800a356:	b2db      	uxtb	r3, r3
 800a358:	f043 0301 	orr.w	r3, r3, #1
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d102      	bne.n	800a368 <HAL_RCC_ClockConfig+0x1a0>
 800a362:	4b31      	ldr	r3, [pc, #196]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	e00d      	b.n	800a384 <HAL_RCC_ClockConfig+0x1bc>
 800a368:	2302      	movs	r3, #2
 800a36a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	fa93 f3a3 	rbit	r3, r3
 800a372:	627b      	str	r3, [r7, #36]	; 0x24
 800a374:	2302      	movs	r3, #2
 800a376:	623b      	str	r3, [r7, #32]
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	fa93 f3a3 	rbit	r3, r3
 800a37e:	61fb      	str	r3, [r7, #28]
 800a380:	4b29      	ldr	r3, [pc, #164]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	2202      	movs	r2, #2
 800a386:	61ba      	str	r2, [r7, #24]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	fa92 f2a2 	rbit	r2, r2
 800a38e:	617a      	str	r2, [r7, #20]
  return result;
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	fab2 f282 	clz	r2, r2
 800a396:	b2d2      	uxtb	r2, r2
 800a398:	f042 0220 	orr.w	r2, r2, #32
 800a39c:	b2d2      	uxtb	r2, r2
 800a39e:	f002 021f 	and.w	r2, r2, #31
 800a3a2:	2101      	movs	r1, #1
 800a3a4:	fa01 f202 	lsl.w	r2, r1, r2
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e079      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a3b2:	4b1d      	ldr	r3, [pc, #116]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f023 0203 	bic.w	r2, r3, #3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	491a      	ldr	r1, [pc, #104]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3c4:	f7fb fd7c 	bl	8005ec0 <HAL_GetTick>
 800a3c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ca:	e00a      	b.n	800a3e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3cc:	f7fb fd78 	bl	8005ec0 <HAL_GetTick>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d901      	bls.n	800a3e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e061      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3e2:	4b11      	ldr	r3, [pc, #68]	; (800a428 <HAL_RCC_ClockConfig+0x260>)
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f003 020c 	and.w	r2, r3, #12
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d1eb      	bne.n	800a3cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3f4:	4b0b      	ldr	r3, [pc, #44]	; (800a424 <HAL_RCC_ClockConfig+0x25c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0307 	and.w	r3, r3, #7
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d214      	bcs.n	800a42c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a402:	4b08      	ldr	r3, [pc, #32]	; (800a424 <HAL_RCC_ClockConfig+0x25c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f023 0207 	bic.w	r2, r3, #7
 800a40a:	4906      	ldr	r1, [pc, #24]	; (800a424 <HAL_RCC_ClockConfig+0x25c>)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	4313      	orrs	r3, r2
 800a410:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a412:	4b04      	ldr	r3, [pc, #16]	; (800a424 <HAL_RCC_ClockConfig+0x25c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d005      	beq.n	800a42c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e040      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x2de>
 800a424:	40022000 	.word	0x40022000
 800a428:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d008      	beq.n	800a44a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a438:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <HAL_RCC_ClockConfig+0x2e8>)
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	491a      	ldr	r1, [pc, #104]	; (800a4b0 <HAL_RCC_ClockConfig+0x2e8>)
 800a446:	4313      	orrs	r3, r2
 800a448:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0308 	and.w	r3, r3, #8
 800a452:	2b00      	cmp	r3, #0
 800a454:	d009      	beq.n	800a46a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a456:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <HAL_RCC_ClockConfig+0x2e8>)
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	4912      	ldr	r1, [pc, #72]	; (800a4b0 <HAL_RCC_ClockConfig+0x2e8>)
 800a466:	4313      	orrs	r3, r2
 800a468:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a46a:	f000 f829 	bl	800a4c0 <HAL_RCC_GetSysClockFreq>
 800a46e:	4601      	mov	r1, r0
 800a470:	4b0f      	ldr	r3, [pc, #60]	; (800a4b0 <HAL_RCC_ClockConfig+0x2e8>)
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a478:	22f0      	movs	r2, #240	; 0xf0
 800a47a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	fa92 f2a2 	rbit	r2, r2
 800a482:	60fa      	str	r2, [r7, #12]
  return result;
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	fab2 f282 	clz	r2, r2
 800a48a:	b2d2      	uxtb	r2, r2
 800a48c:	40d3      	lsrs	r3, r2
 800a48e:	4a09      	ldr	r2, [pc, #36]	; (800a4b4 <HAL_RCC_ClockConfig+0x2ec>)
 800a490:	5cd3      	ldrb	r3, [r2, r3]
 800a492:	fa21 f303 	lsr.w	r3, r1, r3
 800a496:	4a08      	ldr	r2, [pc, #32]	; (800a4b8 <HAL_RCC_ClockConfig+0x2f0>)
 800a498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a49a:	4b08      	ldr	r3, [pc, #32]	; (800a4bc <HAL_RCC_ClockConfig+0x2f4>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fa fece 	bl	8005240 <HAL_InitTick>
  
  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3778      	adds	r7, #120	; 0x78
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	40021000 	.word	0x40021000
 800a4b4:	08010c30 	.word	0x08010c30
 800a4b8:	20000038 	.word	0x20000038
 800a4bc:	200000b4 	.word	0x200000b4

0800a4c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b08b      	sub	sp, #44	; 0x2c
 800a4c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	61fb      	str	r3, [r7, #28]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	61bb      	str	r3, [r7, #24]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a4da:	4b29      	ldr	r3, [pc, #164]	; (800a580 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	f003 030c 	and.w	r3, r3, #12
 800a4e6:	2b04      	cmp	r3, #4
 800a4e8:	d002      	beq.n	800a4f0 <HAL_RCC_GetSysClockFreq+0x30>
 800a4ea:	2b08      	cmp	r3, #8
 800a4ec:	d003      	beq.n	800a4f6 <HAL_RCC_GetSysClockFreq+0x36>
 800a4ee:	e03c      	b.n	800a56a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a4f0:	4b24      	ldr	r3, [pc, #144]	; (800a584 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a4f2:	623b      	str	r3, [r7, #32]
      break;
 800a4f4:	e03c      	b.n	800a570 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a4fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a500:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	fa92 f2a2 	rbit	r2, r2
 800a508:	607a      	str	r2, [r7, #4]
  return result;
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	fab2 f282 	clz	r2, r2
 800a510:	b2d2      	uxtb	r2, r2
 800a512:	40d3      	lsrs	r3, r2
 800a514:	4a1c      	ldr	r2, [pc, #112]	; (800a588 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a516:	5cd3      	ldrb	r3, [r2, r3]
 800a518:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a51a:	4b19      	ldr	r3, [pc, #100]	; (800a580 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	f003 030f 	and.w	r3, r3, #15
 800a522:	220f      	movs	r2, #15
 800a524:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	fa92 f2a2 	rbit	r2, r2
 800a52c:	60fa      	str	r2, [r7, #12]
  return result;
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	fab2 f282 	clz	r2, r2
 800a534:	b2d2      	uxtb	r2, r2
 800a536:	40d3      	lsrs	r3, r2
 800a538:	4a14      	ldr	r2, [pc, #80]	; (800a58c <HAL_RCC_GetSysClockFreq+0xcc>)
 800a53a:	5cd3      	ldrb	r3, [r2, r3]
 800a53c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d008      	beq.n	800a55a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a548:	4a0e      	ldr	r2, [pc, #56]	; (800a584 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	fb02 f303 	mul.w	r3, r2, r3
 800a556:	627b      	str	r3, [r7, #36]	; 0x24
 800a558:	e004      	b.n	800a564 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	4a0c      	ldr	r2, [pc, #48]	; (800a590 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a55e:	fb02 f303 	mul.w	r3, r2, r3
 800a562:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	623b      	str	r3, [r7, #32]
      break;
 800a568:	e002      	b.n	800a570 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a56a:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a56c:	623b      	str	r3, [r7, #32]
      break;
 800a56e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a570:	6a3b      	ldr	r3, [r7, #32]
}
 800a572:	4618      	mov	r0, r3
 800a574:	372c      	adds	r7, #44	; 0x2c
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	40021000 	.word	0x40021000
 800a584:	016e3600 	.word	0x016e3600
 800a588:	08010c48 	.word	0x08010c48
 800a58c:	08010c58 	.word	0x08010c58
 800a590:	003d0900 	.word	0x003d0900
 800a594:	007a1200 	.word	0x007a1200

0800a598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a598:	b480      	push	{r7}
 800a59a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a59c:	4b03      	ldr	r3, [pc, #12]	; (800a5ac <HAL_RCC_GetHCLKFreq+0x14>)
 800a59e:	681b      	ldr	r3, [r3, #0]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	20000038 	.word	0x20000038

0800a5b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a5b6:	f7ff ffef 	bl	800a598 <HAL_RCC_GetHCLKFreq>
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a5c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	fa92 f2a2 	rbit	r2, r2
 800a5d0:	603a      	str	r2, [r7, #0]
  return result;
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	fab2 f282 	clz	r2, r2
 800a5d8:	b2d2      	uxtb	r2, r2
 800a5da:	40d3      	lsrs	r3, r2
 800a5dc:	4a04      	ldr	r2, [pc, #16]	; (800a5f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a5de:	5cd3      	ldrb	r3, [r2, r3]
 800a5e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	40021000 	.word	0x40021000
 800a5f0:	08010c40 	.word	0x08010c40

0800a5f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a5fa:	f7ff ffcd 	bl	800a598 <HAL_RCC_GetHCLKFreq>
 800a5fe:	4601      	mov	r1, r0
 800a600:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a608:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a60c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	fa92 f2a2 	rbit	r2, r2
 800a614:	603a      	str	r2, [r7, #0]
  return result;
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	fab2 f282 	clz	r2, r2
 800a61c:	b2d2      	uxtb	r2, r2
 800a61e:	40d3      	lsrs	r3, r2
 800a620:	4a04      	ldr	r2, [pc, #16]	; (800a634 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a622:	5cd3      	ldrb	r3, [r2, r3]
 800a624:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	40021000 	.word	0x40021000
 800a634:	08010c40 	.word	0x08010c40

0800a638 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	220f      	movs	r2, #15
 800a646:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a648:	4b12      	ldr	r3, [pc, #72]	; (800a694 <HAL_RCC_GetClockConfig+0x5c>)
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f003 0203 	and.w	r2, r3, #3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800a654:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <HAL_RCC_GetClockConfig+0x5c>)
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800a660:	4b0c      	ldr	r3, [pc, #48]	; (800a694 <HAL_RCC_GetClockConfig+0x5c>)
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a66c:	4b09      	ldr	r3, [pc, #36]	; (800a694 <HAL_RCC_GetClockConfig+0x5c>)
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	08db      	lsrs	r3, r3, #3
 800a672:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800a67a:	4b07      	ldr	r3, [pc, #28]	; (800a698 <HAL_RCC_GetClockConfig+0x60>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0207 	and.w	r2, r3, #7
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	601a      	str	r2, [r3, #0]
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	40021000 	.word	0x40021000
 800a698:	40022000 	.word	0x40022000

0800a69c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b092      	sub	sp, #72	; 0x48
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 80d4 	beq.w	800a868 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a6c0:	4b4e      	ldr	r3, [pc, #312]	; (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10e      	bne.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6cc:	4b4b      	ldr	r3, [pc, #300]	; (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	4a4a      	ldr	r2, [pc, #296]	; (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d6:	61d3      	str	r3, [r2, #28]
 800a6d8:	4b48      	ldr	r3, [pc, #288]	; (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6e0:	60bb      	str	r3, [r7, #8]
 800a6e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ea:	4b45      	ldr	r3, [pc, #276]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d118      	bne.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a6f6:	4b42      	ldr	r3, [pc, #264]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a41      	ldr	r2, [pc, #260]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a700:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a702:	f7fb fbdd 	bl	8005ec0 <HAL_GetTick>
 800a706:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a708:	e008      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a70a:	f7fb fbd9 	bl	8005ec0 <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	2b64      	cmp	r3, #100	; 0x64
 800a716:	d901      	bls.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e169      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a71c:	4b38      	ldr	r3, [pc, #224]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0f0      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a728:	4b34      	ldr	r3, [pc, #208]	; (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a730:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 8084 	beq.w	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a744:	429a      	cmp	r2, r3
 800a746:	d07c      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a748:	4b2c      	ldr	r3, [pc, #176]	; (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a756:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	fa93 f3a3 	rbit	r3, r3
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a762:	fab3 f383 	clz	r3, r3
 800a766:	b2db      	uxtb	r3, r3
 800a768:	461a      	mov	r2, r3
 800a76a:	4b26      	ldr	r3, [pc, #152]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	461a      	mov	r2, r3
 800a772:	2301      	movs	r3, #1
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a77a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	fa93 f3a3 	rbit	r3, r3
 800a782:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a786:	fab3 f383 	clz	r3, r3
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	461a      	mov	r2, r3
 800a78e:	4b1d      	ldr	r3, [pc, #116]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	461a      	mov	r2, r3
 800a796:	2300      	movs	r3, #0
 800a798:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a79a:	4a18      	ldr	r2, [pc, #96]	; (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a79c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d04b      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7aa:	f7fb fb89 	bl	8005ec0 <HAL_GetTick>
 800a7ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7b0:	e00a      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7b2:	f7fb fb85 	bl	8005ec0 <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d901      	bls.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e113      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ce:	fa93 f3a3 	rbit	r3, r3
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	623b      	str	r3, [r7, #32]
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	fa93 f3a3 	rbit	r3, r3
 800a7de:	61fb      	str	r3, [r7, #28]
  return result;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7e2:	fab3 f383 	clz	r3, r3
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	095b      	lsrs	r3, r3, #5
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	f043 0302 	orr.w	r3, r3, #2
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d108      	bne.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a7f6:	4b01      	ldr	r3, [pc, #4]	; (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	e00d      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a7fc:	40021000 	.word	0x40021000
 800a800:	40007000 	.word	0x40007000
 800a804:	10908100 	.word	0x10908100
 800a808:	2302      	movs	r3, #2
 800a80a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	fa93 f3a3 	rbit	r3, r3
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	4b78      	ldr	r3, [pc, #480]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	2202      	movs	r2, #2
 800a81a:	613a      	str	r2, [r7, #16]
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	fa92 f2a2 	rbit	r2, r2
 800a822:	60fa      	str	r2, [r7, #12]
  return result;
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	fab2 f282 	clz	r2, r2
 800a82a:	b2d2      	uxtb	r2, r2
 800a82c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a830:	b2d2      	uxtb	r2, r2
 800a832:	f002 021f 	and.w	r2, r2, #31
 800a836:	2101      	movs	r1, #1
 800a838:	fa01 f202 	lsl.w	r2, r1, r2
 800a83c:	4013      	ands	r3, r2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0b7      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a842:	4b6d      	ldr	r3, [pc, #436]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	496a      	ldr	r1, [pc, #424]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a850:	4313      	orrs	r3, r2
 800a852:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a854:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d105      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a85c:	4b66      	ldr	r3, [pc, #408]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	4a65      	ldr	r2, [pc, #404]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a866:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	2b00      	cmp	r3, #0
 800a872:	d008      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a874:	4b60      	ldr	r3, [pc, #384]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a878:	f023 0203 	bic.w	r2, r3, #3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	495d      	ldr	r1, [pc, #372]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a882:	4313      	orrs	r3, r2
 800a884:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0302 	and.w	r3, r3, #2
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d008      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a892:	4b59      	ldr	r3, [pc, #356]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a896:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	4956      	ldr	r1, [pc, #344]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d008      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a8b0:	4b51      	ldr	r3, [pc, #324]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	494e      	ldr	r1, [pc, #312]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0320 	and.w	r3, r3, #32
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d008      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a8ce:	4b4a      	ldr	r3, [pc, #296]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d2:	f023 0210 	bic.w	r2, r3, #16
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	4947      	ldr	r1, [pc, #284]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d008      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a8ec:	4b42      	ldr	r3, [pc, #264]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f8:	493f      	ldr	r1, [pc, #252]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a906:	2b00      	cmp	r3, #0
 800a908:	d008      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a90a:	4b3b      	ldr	r3, [pc, #236]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90e:	f023 0220 	bic.w	r2, r3, #32
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	4938      	ldr	r1, [pc, #224]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0308 	and.w	r3, r3, #8
 800a924:	2b00      	cmp	r3, #0
 800a926:	d008      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a928:	4b33      	ldr	r3, [pc, #204]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	4930      	ldr	r1, [pc, #192]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a936:	4313      	orrs	r3, r2
 800a938:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 0310 	and.w	r3, r3, #16
 800a942:	2b00      	cmp	r3, #0
 800a944:	d008      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a946:	4b2c      	ldr	r3, [pc, #176]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	4929      	ldr	r1, [pc, #164]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a954:	4313      	orrs	r3, r2
 800a956:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a960:	2b00      	cmp	r3, #0
 800a962:	d008      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a964:	4b24      	ldr	r3, [pc, #144]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	4921      	ldr	r1, [pc, #132]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a972:	4313      	orrs	r3, r2
 800a974:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d008      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a982:	4b1d      	ldr	r3, [pc, #116]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	491a      	ldr	r1, [pc, #104]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a990:	4313      	orrs	r3, r2
 800a992:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d008      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a9a0:	4b15      	ldr	r3, [pc, #84]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	4912      	ldr	r1, [pc, #72]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d008      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a9be:	4b0e      	ldr	r3, [pc, #56]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ca:	490b      	ldr	r1, [pc, #44]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d008      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a9dc:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e8:	4903      	ldr	r1, [pc, #12]	; (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3748      	adds	r7, #72	; 0x48
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	40021000 	.word	0x40021000

0800a9fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e049      	b.n	800aaa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7fa ff6a 	bl	80058fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3304      	adds	r3, #4
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	f000 f9e8 	bl	800ae10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d001      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e04a      	b.n	800ab5a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f042 0201 	orr.w	r2, r2, #1
 800aada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a21      	ldr	r2, [pc, #132]	; (800ab68 <HAL_TIM_Base_Start_IT+0xbc>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d018      	beq.n	800ab18 <HAL_TIM_Base_Start_IT+0x6c>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaee:	d013      	beq.n	800ab18 <HAL_TIM_Base_Start_IT+0x6c>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a1d      	ldr	r2, [pc, #116]	; (800ab6c <HAL_TIM_Base_Start_IT+0xc0>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d00e      	beq.n	800ab18 <HAL_TIM_Base_Start_IT+0x6c>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a1c      	ldr	r2, [pc, #112]	; (800ab70 <HAL_TIM_Base_Start_IT+0xc4>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d009      	beq.n	800ab18 <HAL_TIM_Base_Start_IT+0x6c>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a1a      	ldr	r2, [pc, #104]	; (800ab74 <HAL_TIM_Base_Start_IT+0xc8>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d004      	beq.n	800ab18 <HAL_TIM_Base_Start_IT+0x6c>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a19      	ldr	r2, [pc, #100]	; (800ab78 <HAL_TIM_Base_Start_IT+0xcc>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d115      	bne.n	800ab44 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	689a      	ldr	r2, [r3, #8]
 800ab1e:	4b17      	ldr	r3, [pc, #92]	; (800ab7c <HAL_TIM_Base_Start_IT+0xd0>)
 800ab20:	4013      	ands	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b06      	cmp	r3, #6
 800ab28:	d015      	beq.n	800ab56 <HAL_TIM_Base_Start_IT+0xaa>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab30:	d011      	beq.n	800ab56 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f042 0201 	orr.w	r2, r2, #1
 800ab40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab42:	e008      	b.n	800ab56 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0201 	orr.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	e000      	b.n	800ab58 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	40012c00 	.word	0x40012c00
 800ab6c:	40000400 	.word	0x40000400
 800ab70:	40000800 	.word	0x40000800
 800ab74:	40013400 	.word	0x40013400
 800ab78:	40014000 	.word	0x40014000
 800ab7c:	00010007 	.word	0x00010007

0800ab80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	f003 0302 	and.w	r3, r3, #2
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d122      	bne.n	800abdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d11b      	bne.n	800abdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f06f 0202 	mvn.w	r2, #2
 800abac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f905 	bl	800add2 <HAL_TIM_IC_CaptureCallback>
 800abc8:	e005      	b.n	800abd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f8f7 	bl	800adbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f908 	bl	800ade6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	f003 0304 	and.w	r3, r3, #4
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	d122      	bne.n	800ac30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	f003 0304 	and.w	r3, r3, #4
 800abf4:	2b04      	cmp	r3, #4
 800abf6:	d11b      	bne.n	800ac30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f06f 0204 	mvn.w	r2, #4
 800ac00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2202      	movs	r2, #2
 800ac06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d003      	beq.n	800ac1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f8db 	bl	800add2 <HAL_TIM_IC_CaptureCallback>
 800ac1c:	e005      	b.n	800ac2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f8cd 	bl	800adbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f8de 	bl	800ade6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f003 0308 	and.w	r3, r3, #8
 800ac3a:	2b08      	cmp	r3, #8
 800ac3c:	d122      	bne.n	800ac84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f003 0308 	and.w	r3, r3, #8
 800ac48:	2b08      	cmp	r3, #8
 800ac4a:	d11b      	bne.n	800ac84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f06f 0208 	mvn.w	r2, #8
 800ac54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2204      	movs	r2, #4
 800ac5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f8b1 	bl	800add2 <HAL_TIM_IC_CaptureCallback>
 800ac70:	e005      	b.n	800ac7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f8a3 	bl	800adbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f8b4 	bl	800ade6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	f003 0310 	and.w	r3, r3, #16
 800ac8e:	2b10      	cmp	r3, #16
 800ac90:	d122      	bne.n	800acd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f003 0310 	and.w	r3, r3, #16
 800ac9c:	2b10      	cmp	r3, #16
 800ac9e:	d11b      	bne.n	800acd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f06f 0210 	mvn.w	r2, #16
 800aca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2208      	movs	r2, #8
 800acae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	69db      	ldr	r3, [r3, #28]
 800acb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f887 	bl	800add2 <HAL_TIM_IC_CaptureCallback>
 800acc4:	e005      	b.n	800acd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f879 	bl	800adbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f88a 	bl	800ade6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d10e      	bne.n	800ad04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d107      	bne.n	800ad04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f06f 0201 	mvn.w	r2, #1
 800acfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7f9 fb52 	bl	80043a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad0e:	2b80      	cmp	r3, #128	; 0x80
 800ad10:	d10e      	bne.n	800ad30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad1c:	2b80      	cmp	r3, #128	; 0x80
 800ad1e:	d107      	bne.n	800ad30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f98a 	bl	800b044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3e:	d10e      	bne.n	800ad5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad4a:	2b80      	cmp	r3, #128	; 0x80
 800ad4c:	d107      	bne.n	800ad5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ad56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f97d 	bl	800b058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad68:	2b40      	cmp	r3, #64	; 0x40
 800ad6a:	d10e      	bne.n	800ad8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad76:	2b40      	cmp	r3, #64	; 0x40
 800ad78:	d107      	bne.n	800ad8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f838 	bl	800adfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	f003 0320 	and.w	r3, r3, #32
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	d10e      	bne.n	800adb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	f003 0320 	and.w	r3, r3, #32
 800ada2:	2b20      	cmp	r3, #32
 800ada4:	d107      	bne.n	800adb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f06f 0220 	mvn.w	r2, #32
 800adae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f93d 	bl	800b030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adb6:	bf00      	nop
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adda:	bf00      	nop
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adee:	bf00      	nop
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae02:	bf00      	nop
 800ae04:	370c      	adds	r7, #12
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
	...

0800ae10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a3c      	ldr	r2, [pc, #240]	; (800af14 <TIM_Base_SetConfig+0x104>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d00f      	beq.n	800ae48 <TIM_Base_SetConfig+0x38>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae2e:	d00b      	beq.n	800ae48 <TIM_Base_SetConfig+0x38>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a39      	ldr	r2, [pc, #228]	; (800af18 <TIM_Base_SetConfig+0x108>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d007      	beq.n	800ae48 <TIM_Base_SetConfig+0x38>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a38      	ldr	r2, [pc, #224]	; (800af1c <TIM_Base_SetConfig+0x10c>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_Base_SetConfig+0x38>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a37      	ldr	r2, [pc, #220]	; (800af20 <TIM_Base_SetConfig+0x110>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d108      	bne.n	800ae5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a2d      	ldr	r2, [pc, #180]	; (800af14 <TIM_Base_SetConfig+0x104>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d01b      	beq.n	800ae9a <TIM_Base_SetConfig+0x8a>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae68:	d017      	beq.n	800ae9a <TIM_Base_SetConfig+0x8a>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a2a      	ldr	r2, [pc, #168]	; (800af18 <TIM_Base_SetConfig+0x108>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d013      	beq.n	800ae9a <TIM_Base_SetConfig+0x8a>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a29      	ldr	r2, [pc, #164]	; (800af1c <TIM_Base_SetConfig+0x10c>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d00f      	beq.n	800ae9a <TIM_Base_SetConfig+0x8a>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a28      	ldr	r2, [pc, #160]	; (800af20 <TIM_Base_SetConfig+0x110>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d00b      	beq.n	800ae9a <TIM_Base_SetConfig+0x8a>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a27      	ldr	r2, [pc, #156]	; (800af24 <TIM_Base_SetConfig+0x114>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d007      	beq.n	800ae9a <TIM_Base_SetConfig+0x8a>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a26      	ldr	r2, [pc, #152]	; (800af28 <TIM_Base_SetConfig+0x118>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d003      	beq.n	800ae9a <TIM_Base_SetConfig+0x8a>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a25      	ldr	r2, [pc, #148]	; (800af2c <TIM_Base_SetConfig+0x11c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d108      	bne.n	800aeac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	689a      	ldr	r2, [r3, #8]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a10      	ldr	r2, [pc, #64]	; (800af14 <TIM_Base_SetConfig+0x104>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d00f      	beq.n	800aef8 <TIM_Base_SetConfig+0xe8>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a11      	ldr	r2, [pc, #68]	; (800af20 <TIM_Base_SetConfig+0x110>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d00b      	beq.n	800aef8 <TIM_Base_SetConfig+0xe8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a10      	ldr	r2, [pc, #64]	; (800af24 <TIM_Base_SetConfig+0x114>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d007      	beq.n	800aef8 <TIM_Base_SetConfig+0xe8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a0f      	ldr	r2, [pc, #60]	; (800af28 <TIM_Base_SetConfig+0x118>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d003      	beq.n	800aef8 <TIM_Base_SetConfig+0xe8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a0e      	ldr	r2, [pc, #56]	; (800af2c <TIM_Base_SetConfig+0x11c>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d103      	bne.n	800af00 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	691a      	ldr	r2, [r3, #16]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	615a      	str	r2, [r3, #20]
}
 800af06:	bf00      	nop
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	40012c00 	.word	0x40012c00
 800af18:	40000400 	.word	0x40000400
 800af1c:	40000800 	.word	0x40000800
 800af20:	40013400 	.word	0x40013400
 800af24:	40014000 	.word	0x40014000
 800af28:	40014400 	.word	0x40014400
 800af2c:	40014800 	.word	0x40014800

0800af30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af40:	2b01      	cmp	r3, #1
 800af42:	d101      	bne.n	800af48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af44:	2302      	movs	r3, #2
 800af46:	e063      	b.n	800b010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2202      	movs	r2, #2
 800af54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a2b      	ldr	r2, [pc, #172]	; (800b01c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d004      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a2a      	ldr	r2, [pc, #168]	; (800b020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d108      	bne.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a1b      	ldr	r2, [pc, #108]	; (800b01c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d018      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afba:	d013      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a18      	ldr	r2, [pc, #96]	; (800b024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d00e      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a17      	ldr	r2, [pc, #92]	; (800b028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d009      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a12      	ldr	r2, [pc, #72]	; (800b020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d004      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a13      	ldr	r2, [pc, #76]	; (800b02c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d10c      	bne.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	40012c00 	.word	0x40012c00
 800b020:	40013400 	.word	0x40013400
 800b024:	40000400 	.word	0x40000400
 800b028:	40000800 	.word	0x40000800
 800b02c:	40014000 	.word	0x40014000

0800b030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e040      	b.n	800b100 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b082:	2b00      	cmp	r3, #0
 800b084:	d106      	bne.n	800b094 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7fa fd18 	bl	8005ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2224      	movs	r2, #36	; 0x24
 800b098:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f022 0201 	bic.w	r2, r2, #1
 800b0a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fdf2 	bl	800bc94 <UART_SetConfig>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d101      	bne.n	800b0ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e022      	b.n	800b100 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 ffba 	bl	800c03c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689a      	ldr	r2, [r3, #8]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f042 0201 	orr.w	r2, r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f001 f841 	bl	800c180 <UART_CheckIdleState>
 800b0fe:	4603      	mov	r3, r0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b108:	b480      	push	{r7}
 800b10a:	b08b      	sub	sp, #44	; 0x2c
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	4613      	mov	r3, r2
 800b114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b11a:	2b20      	cmp	r3, #32
 800b11c:	d147      	bne.n	800b1ae <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <HAL_UART_Transmit_IT+0x22>
 800b124:	88fb      	ldrh	r3, [r7, #6]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e040      	b.n	800b1b0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	88fa      	ldrh	r2, [r7, #6]
 800b138:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	88fa      	ldrh	r2, [r7, #6]
 800b140:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2221      	movs	r2, #33	; 0x21
 800b156:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b160:	d107      	bne.n	800b172 <HAL_UART_Transmit_IT+0x6a>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d103      	bne.n	800b172 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	4a13      	ldr	r2, [pc, #76]	; (800b1bc <HAL_UART_Transmit_IT+0xb4>)
 800b16e:	66da      	str	r2, [r3, #108]	; 0x6c
 800b170:	e002      	b.n	800b178 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4a12      	ldr	r2, [pc, #72]	; (800b1c0 <HAL_UART_Transmit_IT+0xb8>)
 800b176:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	613b      	str	r3, [r7, #16]
   return(result);
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18c:	627b      	str	r3, [r7, #36]	; 0x24
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	461a      	mov	r2, r3
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	623b      	str	r3, [r7, #32]
 800b198:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19a:	69f9      	ldr	r1, [r7, #28]
 800b19c:	6a3a      	ldr	r2, [r7, #32]
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e6      	bne.n	800b178 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e000      	b.n	800b1b0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b1ae:	2302      	movs	r3, #2
  }
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	372c      	adds	r7, #44	; 0x2c
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	0800cb47 	.word	0x0800cb47
 800b1c0:	0800ca8f 	.word	0x0800ca8f

0800b1c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08a      	sub	sp, #40	; 0x28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1d8:	2b20      	cmp	r3, #32
 800b1da:	d132      	bne.n	800b242 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <HAL_UART_Receive_IT+0x24>
 800b1e2:	88fb      	ldrh	r3, [r7, #6]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e02b      	b.n	800b244 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d018      	beq.n	800b232 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	e853 3f00 	ldrex	r3, [r3]
 800b20c:	613b      	str	r3, [r7, #16]
   return(result);
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b214:	627b      	str	r3, [r7, #36]	; 0x24
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	623b      	str	r3, [r7, #32]
 800b220:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	69f9      	ldr	r1, [r7, #28]
 800b224:	6a3a      	ldr	r2, [r7, #32]
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e6      	bne.n	800b200 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b232:	88fb      	ldrh	r3, [r7, #6]
 800b234:	461a      	mov	r2, r3
 800b236:	68b9      	ldr	r1, [r7, #8]
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f001 f8b1 	bl	800c3a0 <UART_Start_Receive_IT>
 800b23e:	4603      	mov	r3, r0
 800b240:	e000      	b.n	800b244 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b242:	2302      	movs	r3, #2
  }
}
 800b244:	4618      	mov	r0, r3
 800b246:	3728      	adds	r7, #40	; 0x28
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08a      	sub	sp, #40	; 0x28
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	4613      	mov	r3, r2
 800b258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b25e:	2b20      	cmp	r3, #32
 800b260:	d165      	bne.n	800b32e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <HAL_UART_Transmit_DMA+0x22>
 800b268:	88fb      	ldrh	r3, [r7, #6]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e05e      	b.n	800b330 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	88fa      	ldrh	r2, [r7, #6]
 800b27c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	88fa      	ldrh	r2, [r7, #6]
 800b284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2221      	movs	r2, #33	; 0x21
 800b294:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d027      	beq.n	800b2ee <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a2:	4a25      	ldr	r2, [pc, #148]	; (800b338 <HAL_UART_Transmit_DMA+0xec>)
 800b2a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2aa:	4a24      	ldr	r2, [pc, #144]	; (800b33c <HAL_UART_Transmit_DMA+0xf0>)
 800b2ac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b2:	4a23      	ldr	r2, [pc, #140]	; (800b340 <HAL_UART_Transmit_DMA+0xf4>)
 800b2b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3328      	adds	r3, #40	; 0x28
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	88fb      	ldrh	r3, [r7, #6]
 800b2d2:	f7fa ff80 	bl	80061d6 <HAL_DMA_Start_IT>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d008      	beq.n	800b2ee <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2210      	movs	r2, #16
 800b2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e020      	b.n	800b330 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2240      	movs	r2, #64	; 0x40
 800b2f4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3308      	adds	r3, #8
 800b2fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	e853 3f00 	ldrex	r3, [r3]
 800b304:	613b      	str	r3, [r7, #16]
   return(result);
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3308      	adds	r3, #8
 800b314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b316:	623a      	str	r2, [r7, #32]
 800b318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31a:	69f9      	ldr	r1, [r7, #28]
 800b31c:	6a3a      	ldr	r2, [r7, #32]
 800b31e:	e841 2300 	strex	r3, r2, [r1]
 800b322:	61bb      	str	r3, [r7, #24]
   return(result);
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1e5      	bne.n	800b2f6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	e000      	b.n	800b330 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b32e:	2302      	movs	r3, #2
  }
}
 800b330:	4618      	mov	r0, r3
 800b332:	3728      	adds	r7, #40	; 0x28
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	0800c75d 	.word	0x0800c75d
 800b33c:	0800c7f1 	.word	0x0800c7f1
 800b340:	0800c971 	.word	0x0800c971

0800b344 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b08a      	sub	sp, #40	; 0x28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	4613      	mov	r3, r2
 800b350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b358:	2b20      	cmp	r3, #32
 800b35a:	d132      	bne.n	800b3c2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <HAL_UART_Receive_DMA+0x24>
 800b362:	88fb      	ldrh	r3, [r7, #6]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e02b      	b.n	800b3c4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d018      	beq.n	800b3b2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	613b      	str	r3, [r7, #16]
   return(result);
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b394:	627b      	str	r3, [r7, #36]	; 0x24
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	623b      	str	r3, [r7, #32]
 800b3a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	69f9      	ldr	r1, [r7, #28]
 800b3a4:	6a3a      	ldr	r2, [r7, #32]
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e6      	bne.n	800b380 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b3b2:	88fb      	ldrh	r3, [r7, #6]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f001 f8a5 	bl	800c508 <UART_Start_Receive_DMA>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	e000      	b.n	800b3c4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b3c2:	2302      	movs	r3, #2
  }
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3728      	adds	r7, #40	; 0x28
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08e      	sub	sp, #56	; 0x38
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b3e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3fa:	e841 2300 	strex	r3, r2, [r1]
 800b3fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1e6      	bne.n	800b3d4 <HAL_UART_AbortTransmit_IT+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b410:	2b80      	cmp	r3, #128	; 0x80
 800b412:	d13f      	bne.n	800b494 <HAL_UART_AbortTransmit_IT+0xc8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3308      	adds	r3, #8
 800b41a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	e853 3f00 	ldrex	r3, [r3]
 800b422:	60bb      	str	r3, [r7, #8]
   return(result);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b42a:	633b      	str	r3, [r7, #48]	; 0x30
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3308      	adds	r3, #8
 800b432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b434:	61ba      	str	r2, [r7, #24]
 800b436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b438:	6979      	ldr	r1, [r7, #20]
 800b43a:	69ba      	ldr	r2, [r7, #24]
 800b43c:	e841 2300 	strex	r3, r2, [r1]
 800b440:	613b      	str	r3, [r7, #16]
   return(result);
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1e5      	bne.n	800b414 <HAL_UART_AbortTransmit_IT+0x48>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d013      	beq.n	800b478 <HAL_UART_AbortTransmit_IT+0xac>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b454:	4a18      	ldr	r2, [pc, #96]	; (800b4b8 <HAL_UART_AbortTransmit_IT+0xec>)
 800b456:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fa ff52 	bl	8006306 <HAL_DMA_Abort_IT>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d022      	beq.n	800b4ae <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b472:	4610      	mov	r0, r2
 800b474:	4798      	blx	r3
 800b476:	e01a      	b.n	800b4ae <HAL_UART_AbortTransmit_IT+0xe2>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2220      	movs	r2, #32
 800b48a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fbe1 	bl	800bc54 <HAL_UART_AbortTransmitCpltCallback>
 800b492:	e00c      	b.n	800b4ae <HAL_UART_AbortTransmit_IT+0xe2>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	66da      	str	r2, [r3, #108]	; 0x6c


    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2220      	movs	r2, #32
 800b4a6:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fbd3 	bl	800bc54 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3738      	adds	r7, #56	; 0x38
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	0800ca1b 	.word	0x0800ca1b

0800b4bc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b09a      	sub	sp, #104	; 0x68
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b4d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4d8:	667b      	str	r3, [r7, #100]	; 0x64
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4e2:	657b      	str	r3, [r7, #84]	; 0x54
 800b4e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4ea:	e841 2300 	strex	r3, r2, [r1]
 800b4ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1e6      	bne.n	800b4c4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3308      	adds	r3, #8
 800b4fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	f023 0301 	bic.w	r3, r3, #1
 800b50c:	663b      	str	r3, [r7, #96]	; 0x60
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3308      	adds	r3, #8
 800b514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b516:	643a      	str	r2, [r7, #64]	; 0x40
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b51c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1e5      	bne.n	800b4f6 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d118      	bne.n	800b564 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	e853 3f00 	ldrex	r3, [r3]
 800b53e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	f023 0310 	bic.w	r3, r3, #16
 800b546:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	461a      	mov	r2, r3
 800b54e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b550:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b552:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b558:	e841 2300 	strex	r3, r2, [r1]
 800b55c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e6      	bne.n	800b532 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b56e:	2b40      	cmp	r3, #64	; 0x40
 800b570:	d14f      	bne.n	800b612 <HAL_UART_AbortReceive_IT+0x156>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	3308      	adds	r3, #8
 800b578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	e853 3f00 	ldrex	r3, [r3]
 800b580:	60bb      	str	r3, [r7, #8]
   return(result);
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b588:	65bb      	str	r3, [r7, #88]	; 0x58
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3308      	adds	r3, #8
 800b590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b592:	61ba      	str	r2, [r7, #24]
 800b594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b596:	6979      	ldr	r1, [r7, #20]
 800b598:	69ba      	ldr	r2, [r7, #24]
 800b59a:	e841 2300 	strex	r3, r2, [r1]
 800b59e:	613b      	str	r3, [r7, #16]
   return(result);
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1e5      	bne.n	800b572 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d013      	beq.n	800b5d6 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5b2:	4a25      	ldr	r2, [pc, #148]	; (800b648 <HAL_UART_AbortReceive_IT+0x18c>)
 800b5b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fa fea3 	bl	8006306 <HAL_DMA_Abort_IT>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d03a      	beq.n	800b63c <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	4798      	blx	r3
 800b5d4:	e032      	b.n	800b63c <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	220f      	movs	r2, #15
 800b5ea:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	699a      	ldr	r2, [r3, #24]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f042 0208 	orr.w	r2, r2, #8
 800b5fa:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2220      	movs	r2, #32
 800b600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fb2c 	bl	800bc68 <HAL_UART_AbortReceiveCpltCallback>
 800b610:	e014      	b.n	800b63c <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	220f      	movs	r2, #15
 800b626:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2220      	movs	r2, #32
 800b62c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fb16 	bl	800bc68 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3768      	adds	r7, #104	; 0x68
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	0800ca45 	.word	0x0800ca45

0800b64c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b0ba      	sub	sp, #232	; 0xe8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	69db      	ldr	r3, [r3, #28]
 800b65a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b672:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b676:	f640 030f 	movw	r3, #2063	; 0x80f
 800b67a:	4013      	ands	r3, r2
 800b67c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b684:	2b00      	cmp	r3, #0
 800b686:	d115      	bne.n	800b6b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b68c:	f003 0320 	and.w	r3, r3, #32
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00f      	beq.n	800b6b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b698:	f003 0320 	and.w	r3, r3, #32
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d009      	beq.n	800b6b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 82ab 	beq.w	800bc00 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	4798      	blx	r3
      }
      return;
 800b6b2:	e2a5      	b.n	800bc00 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b6b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 8117 	beq.w	800b8ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b6be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d106      	bne.n	800b6d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b6ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b6ce:	4b85      	ldr	r3, [pc, #532]	; (800b8e4 <HAL_UART_IRQHandler+0x298>)
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 810a 	beq.w	800b8ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6dc:	f003 0301 	and.w	r3, r3, #1
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d011      	beq.n	800b708 <HAL_UART_IRQHandler+0xbc>
 800b6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00b      	beq.n	800b708 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6fe:	f043 0201 	orr.w	r2, r3, #1
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b70c:	f003 0302 	and.w	r3, r3, #2
 800b710:	2b00      	cmp	r3, #0
 800b712:	d011      	beq.n	800b738 <HAL_UART_IRQHandler+0xec>
 800b714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00b      	beq.n	800b738 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2202      	movs	r2, #2
 800b726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b72e:	f043 0204 	orr.w	r2, r3, #4
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d011      	beq.n	800b768 <HAL_UART_IRQHandler+0x11c>
 800b744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00b      	beq.n	800b768 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2204      	movs	r2, #4
 800b756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b75e:	f043 0202 	orr.w	r2, r3, #2
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b76c:	f003 0308 	and.w	r3, r3, #8
 800b770:	2b00      	cmp	r3, #0
 800b772:	d017      	beq.n	800b7a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b778:	f003 0320 	and.w	r3, r3, #32
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d105      	bne.n	800b78c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b784:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00b      	beq.n	800b7a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2208      	movs	r2, #8
 800b792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b79a:	f043 0208 	orr.w	r2, r3, #8
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d012      	beq.n	800b7d6 <HAL_UART_IRQHandler+0x18a>
 800b7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00c      	beq.n	800b7d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7cc:	f043 0220 	orr.w	r2, r3, #32
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 8211 	beq.w	800bc04 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7e6:	f003 0320 	and.w	r3, r3, #32
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00d      	beq.n	800b80a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b7ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7f2:	f003 0320 	and.w	r3, r3, #32
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b81e:	2b40      	cmp	r3, #64	; 0x40
 800b820:	d005      	beq.n	800b82e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b826:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d04f      	beq.n	800b8ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 ff30 	bl	800c694 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b83e:	2b40      	cmp	r3, #64	; 0x40
 800b840:	d141      	bne.n	800b8c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3308      	adds	r3, #8
 800b848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b85c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3308      	adds	r3, #8
 800b86a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b86e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b87a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1d9      	bne.n	800b842 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b892:	2b00      	cmp	r3, #0
 800b894:	d013      	beq.n	800b8be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b89a:	4a13      	ldr	r2, [pc, #76]	; (800b8e8 <HAL_UART_IRQHandler+0x29c>)
 800b89c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fa fd2f 	bl	8006306 <HAL_DMA_Abort_IT>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d017      	beq.n	800b8de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8bc:	e00f      	b.n	800b8de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f9be 	bl	800bc40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8c4:	e00b      	b.n	800b8de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f9ba 	bl	800bc40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8cc:	e007      	b.n	800b8de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f9b6 	bl	800bc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b8dc:	e192      	b.n	800bc04 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8de:	bf00      	nop
    return;
 800b8e0:	e190      	b.n	800bc04 <HAL_UART_IRQHandler+0x5b8>
 800b8e2:	bf00      	nop
 800b8e4:	04000120 	.word	0x04000120
 800b8e8:	0800c9ef 	.word	0x0800c9ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	f040 814b 	bne.w	800bb8c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8fa:	f003 0310 	and.w	r3, r3, #16
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 8144 	beq.w	800bb8c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b908:	f003 0310 	and.w	r3, r3, #16
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 813d 	beq.w	800bb8c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2210      	movs	r2, #16
 800b918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b924:	2b40      	cmp	r3, #64	; 0x40
 800b926:	f040 80b5 	bne.w	800ba94 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b936:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 8164 	beq.w	800bc08 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b94a:	429a      	cmp	r2, r3
 800b94c:	f080 815c 	bcs.w	800bc08 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b956:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	2b20      	cmp	r3, #32
 800b962:	f000 8086 	beq.w	800ba72 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b972:	e853 3f00 	ldrex	r3, [r3]
 800b976:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b97a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b97e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b982:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b990:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b994:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b998:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b99c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b9a0:	e841 2300 	strex	r3, r2, [r1]
 800b9a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b9a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1da      	bne.n	800b966 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3308      	adds	r3, #8
 800b9b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9ba:	e853 3f00 	ldrex	r3, [r3]
 800b9be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9c2:	f023 0301 	bic.w	r3, r3, #1
 800b9c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b9d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9e0:	e841 2300 	strex	r3, r2, [r1]
 800b9e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1e1      	bne.n	800b9b0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9f6:	e853 3f00 	ldrex	r3, [r3]
 800b9fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba10:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba18:	e841 2300 	strex	r3, r2, [r1]
 800ba1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1e3      	bne.n	800b9ec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2220      	movs	r2, #32
 800ba28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba3a:	e853 3f00 	ldrex	r3, [r3]
 800ba3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba42:	f023 0310 	bic.w	r3, r3, #16
 800ba46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba54:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba5c:	e841 2300 	strex	r3, r2, [r1]
 800ba60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1e4      	bne.n	800ba32 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fa fc11 	bl	8006294 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2202      	movs	r2, #2
 800ba76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f8f5 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba92:	e0b9      	b.n	800bc08 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800baae:	b29b      	uxth	r3, r3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 80ab 	beq.w	800bc0c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800bab6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 80a6 	beq.w	800bc0c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac8:	e853 3f00 	ldrex	r3, [r3]
 800bacc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	461a      	mov	r2, r3
 800bade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bae2:	647b      	str	r3, [r7, #68]	; 0x44
 800bae4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800baea:	e841 2300 	strex	r3, r2, [r1]
 800baee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800baf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1e4      	bne.n	800bac0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	3308      	adds	r3, #8
 800bafc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	e853 3f00 	ldrex	r3, [r3]
 800bb04:	623b      	str	r3, [r7, #32]
   return(result);
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	f023 0301 	bic.w	r3, r3, #1
 800bb0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3308      	adds	r3, #8
 800bb16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb1a:	633a      	str	r2, [r7, #48]	; 0x30
 800bb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb22:	e841 2300 	strex	r3, r2, [r1]
 800bb26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1e3      	bne.n	800baf6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2220      	movs	r2, #32
 800bb32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	e853 3f00 	ldrex	r3, [r3]
 800bb4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f023 0310 	bic.w	r3, r3, #16
 800bb56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb64:	61fb      	str	r3, [r7, #28]
 800bb66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	69b9      	ldr	r1, [r7, #24]
 800bb6a:	69fa      	ldr	r2, [r7, #28]
 800bb6c:	e841 2300 	strex	r3, r2, [r1]
 800bb70:	617b      	str	r3, [r7, #20]
   return(result);
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e4      	bne.n	800bb42 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f879 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb8a:	e03f      	b.n	800bc0c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bb8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00e      	beq.n	800bbb6 <HAL_UART_IRQHandler+0x56a>
 800bb98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d008      	beq.n	800bbb6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bbac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f001 f9fb 	bl	800cfaa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bbb4:	e02d      	b.n	800bc12 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bbb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00e      	beq.n	800bbe0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bbc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d008      	beq.n	800bbe0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d01c      	beq.n	800bc10 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	4798      	blx	r3
    }
    return;
 800bbde:	e017      	b.n	800bc10 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bbe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d012      	beq.n	800bc12 <HAL_UART_IRQHandler+0x5c6>
 800bbec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00c      	beq.n	800bc12 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f001 f804 	bl	800cc06 <UART_EndTransmit_IT>
    return;
 800bbfe:	e008      	b.n	800bc12 <HAL_UART_IRQHandler+0x5c6>
      return;
 800bc00:	bf00      	nop
 800bc02:	e006      	b.n	800bc12 <HAL_UART_IRQHandler+0x5c6>
    return;
 800bc04:	bf00      	nop
 800bc06:	e004      	b.n	800bc12 <HAL_UART_IRQHandler+0x5c6>
      return;
 800bc08:	bf00      	nop
 800bc0a:	e002      	b.n	800bc12 <HAL_UART_IRQHandler+0x5c6>
      return;
 800bc0c:	bf00      	nop
 800bc0e:	e000      	b.n	800bc12 <HAL_UART_IRQHandler+0x5c6>
    return;
 800bc10:	bf00      	nop
  }

}
 800bc12:	37e8      	adds	r7, #232	; 0xe8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	431a      	orrs	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	69db      	ldr	r3, [r3, #28]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800bcc2:	f023 030c 	bic.w	r3, r3, #12
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	6812      	ldr	r2, [r2, #0]
 800bcca:	6979      	ldr	r1, [r7, #20]
 800bccc:	430b      	orrs	r3, r1
 800bcce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68da      	ldr	r2, [r3, #12]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a1b      	ldr	r3, [r3, #32]
 800bcf0:	697a      	ldr	r2, [r7, #20]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	430a      	orrs	r2, r1
 800bd08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4aa7      	ldr	r2, [pc, #668]	; (800bfac <UART_SetConfig+0x318>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d120      	bne.n	800bd56 <UART_SetConfig+0xc2>
 800bd14:	4ba6      	ldr	r3, [pc, #664]	; (800bfb0 <UART_SetConfig+0x31c>)
 800bd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd18:	f003 0303 	and.w	r3, r3, #3
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d817      	bhi.n	800bd50 <UART_SetConfig+0xbc>
 800bd20:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <UART_SetConfig+0x94>)
 800bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bd39 	.word	0x0800bd39
 800bd2c:	0800bd45 	.word	0x0800bd45
 800bd30:	0800bd4b 	.word	0x0800bd4b
 800bd34:	0800bd3f 	.word	0x0800bd3f
 800bd38:	2301      	movs	r3, #1
 800bd3a:	77fb      	strb	r3, [r7, #31]
 800bd3c:	e0b5      	b.n	800beaa <UART_SetConfig+0x216>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	77fb      	strb	r3, [r7, #31]
 800bd42:	e0b2      	b.n	800beaa <UART_SetConfig+0x216>
 800bd44:	2304      	movs	r3, #4
 800bd46:	77fb      	strb	r3, [r7, #31]
 800bd48:	e0af      	b.n	800beaa <UART_SetConfig+0x216>
 800bd4a:	2308      	movs	r3, #8
 800bd4c:	77fb      	strb	r3, [r7, #31]
 800bd4e:	e0ac      	b.n	800beaa <UART_SetConfig+0x216>
 800bd50:	2310      	movs	r3, #16
 800bd52:	77fb      	strb	r3, [r7, #31]
 800bd54:	e0a9      	b.n	800beaa <UART_SetConfig+0x216>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a96      	ldr	r2, [pc, #600]	; (800bfb4 <UART_SetConfig+0x320>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d124      	bne.n	800bdaa <UART_SetConfig+0x116>
 800bd60:	4b93      	ldr	r3, [pc, #588]	; (800bfb0 <UART_SetConfig+0x31c>)
 800bd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bd68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd6c:	d011      	beq.n	800bd92 <UART_SetConfig+0xfe>
 800bd6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd72:	d817      	bhi.n	800bda4 <UART_SetConfig+0x110>
 800bd74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd78:	d011      	beq.n	800bd9e <UART_SetConfig+0x10a>
 800bd7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd7e:	d811      	bhi.n	800bda4 <UART_SetConfig+0x110>
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d003      	beq.n	800bd8c <UART_SetConfig+0xf8>
 800bd84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd88:	d006      	beq.n	800bd98 <UART_SetConfig+0x104>
 800bd8a:	e00b      	b.n	800bda4 <UART_SetConfig+0x110>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	77fb      	strb	r3, [r7, #31]
 800bd90:	e08b      	b.n	800beaa <UART_SetConfig+0x216>
 800bd92:	2302      	movs	r3, #2
 800bd94:	77fb      	strb	r3, [r7, #31]
 800bd96:	e088      	b.n	800beaa <UART_SetConfig+0x216>
 800bd98:	2304      	movs	r3, #4
 800bd9a:	77fb      	strb	r3, [r7, #31]
 800bd9c:	e085      	b.n	800beaa <UART_SetConfig+0x216>
 800bd9e:	2308      	movs	r3, #8
 800bda0:	77fb      	strb	r3, [r7, #31]
 800bda2:	e082      	b.n	800beaa <UART_SetConfig+0x216>
 800bda4:	2310      	movs	r3, #16
 800bda6:	77fb      	strb	r3, [r7, #31]
 800bda8:	e07f      	b.n	800beaa <UART_SetConfig+0x216>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a82      	ldr	r2, [pc, #520]	; (800bfb8 <UART_SetConfig+0x324>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d124      	bne.n	800bdfe <UART_SetConfig+0x16a>
 800bdb4:	4b7e      	ldr	r3, [pc, #504]	; (800bfb0 <UART_SetConfig+0x31c>)
 800bdb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bdbc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bdc0:	d011      	beq.n	800bde6 <UART_SetConfig+0x152>
 800bdc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bdc6:	d817      	bhi.n	800bdf8 <UART_SetConfig+0x164>
 800bdc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bdcc:	d011      	beq.n	800bdf2 <UART_SetConfig+0x15e>
 800bdce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bdd2:	d811      	bhi.n	800bdf8 <UART_SetConfig+0x164>
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <UART_SetConfig+0x14c>
 800bdd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bddc:	d006      	beq.n	800bdec <UART_SetConfig+0x158>
 800bdde:	e00b      	b.n	800bdf8 <UART_SetConfig+0x164>
 800bde0:	2300      	movs	r3, #0
 800bde2:	77fb      	strb	r3, [r7, #31]
 800bde4:	e061      	b.n	800beaa <UART_SetConfig+0x216>
 800bde6:	2302      	movs	r3, #2
 800bde8:	77fb      	strb	r3, [r7, #31]
 800bdea:	e05e      	b.n	800beaa <UART_SetConfig+0x216>
 800bdec:	2304      	movs	r3, #4
 800bdee:	77fb      	strb	r3, [r7, #31]
 800bdf0:	e05b      	b.n	800beaa <UART_SetConfig+0x216>
 800bdf2:	2308      	movs	r3, #8
 800bdf4:	77fb      	strb	r3, [r7, #31]
 800bdf6:	e058      	b.n	800beaa <UART_SetConfig+0x216>
 800bdf8:	2310      	movs	r3, #16
 800bdfa:	77fb      	strb	r3, [r7, #31]
 800bdfc:	e055      	b.n	800beaa <UART_SetConfig+0x216>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a6e      	ldr	r2, [pc, #440]	; (800bfbc <UART_SetConfig+0x328>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d124      	bne.n	800be52 <UART_SetConfig+0x1be>
 800be08:	4b69      	ldr	r3, [pc, #420]	; (800bfb0 <UART_SetConfig+0x31c>)
 800be0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800be10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be14:	d011      	beq.n	800be3a <UART_SetConfig+0x1a6>
 800be16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be1a:	d817      	bhi.n	800be4c <UART_SetConfig+0x1b8>
 800be1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be20:	d011      	beq.n	800be46 <UART_SetConfig+0x1b2>
 800be22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be26:	d811      	bhi.n	800be4c <UART_SetConfig+0x1b8>
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <UART_SetConfig+0x1a0>
 800be2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be30:	d006      	beq.n	800be40 <UART_SetConfig+0x1ac>
 800be32:	e00b      	b.n	800be4c <UART_SetConfig+0x1b8>
 800be34:	2300      	movs	r3, #0
 800be36:	77fb      	strb	r3, [r7, #31]
 800be38:	e037      	b.n	800beaa <UART_SetConfig+0x216>
 800be3a:	2302      	movs	r3, #2
 800be3c:	77fb      	strb	r3, [r7, #31]
 800be3e:	e034      	b.n	800beaa <UART_SetConfig+0x216>
 800be40:	2304      	movs	r3, #4
 800be42:	77fb      	strb	r3, [r7, #31]
 800be44:	e031      	b.n	800beaa <UART_SetConfig+0x216>
 800be46:	2308      	movs	r3, #8
 800be48:	77fb      	strb	r3, [r7, #31]
 800be4a:	e02e      	b.n	800beaa <UART_SetConfig+0x216>
 800be4c:	2310      	movs	r3, #16
 800be4e:	77fb      	strb	r3, [r7, #31]
 800be50:	e02b      	b.n	800beaa <UART_SetConfig+0x216>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a5a      	ldr	r2, [pc, #360]	; (800bfc0 <UART_SetConfig+0x32c>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d124      	bne.n	800bea6 <UART_SetConfig+0x212>
 800be5c:	4b54      	ldr	r3, [pc, #336]	; (800bfb0 <UART_SetConfig+0x31c>)
 800be5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be60:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800be64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800be68:	d011      	beq.n	800be8e <UART_SetConfig+0x1fa>
 800be6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800be6e:	d817      	bhi.n	800bea0 <UART_SetConfig+0x20c>
 800be70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be74:	d011      	beq.n	800be9a <UART_SetConfig+0x206>
 800be76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be7a:	d811      	bhi.n	800bea0 <UART_SetConfig+0x20c>
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d003      	beq.n	800be88 <UART_SetConfig+0x1f4>
 800be80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be84:	d006      	beq.n	800be94 <UART_SetConfig+0x200>
 800be86:	e00b      	b.n	800bea0 <UART_SetConfig+0x20c>
 800be88:	2300      	movs	r3, #0
 800be8a:	77fb      	strb	r3, [r7, #31]
 800be8c:	e00d      	b.n	800beaa <UART_SetConfig+0x216>
 800be8e:	2302      	movs	r3, #2
 800be90:	77fb      	strb	r3, [r7, #31]
 800be92:	e00a      	b.n	800beaa <UART_SetConfig+0x216>
 800be94:	2304      	movs	r3, #4
 800be96:	77fb      	strb	r3, [r7, #31]
 800be98:	e007      	b.n	800beaa <UART_SetConfig+0x216>
 800be9a:	2308      	movs	r3, #8
 800be9c:	77fb      	strb	r3, [r7, #31]
 800be9e:	e004      	b.n	800beaa <UART_SetConfig+0x216>
 800bea0:	2310      	movs	r3, #16
 800bea2:	77fb      	strb	r3, [r7, #31]
 800bea4:	e001      	b.n	800beaa <UART_SetConfig+0x216>
 800bea6:	2310      	movs	r3, #16
 800bea8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beb2:	d15b      	bne.n	800bf6c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800beb4:	7ffb      	ldrb	r3, [r7, #31]
 800beb6:	2b08      	cmp	r3, #8
 800beb8:	d827      	bhi.n	800bf0a <UART_SetConfig+0x276>
 800beba:	a201      	add	r2, pc, #4	; (adr r2, 800bec0 <UART_SetConfig+0x22c>)
 800bebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec0:	0800bee5 	.word	0x0800bee5
 800bec4:	0800beed 	.word	0x0800beed
 800bec8:	0800bef5 	.word	0x0800bef5
 800becc:	0800bf0b 	.word	0x0800bf0b
 800bed0:	0800befb 	.word	0x0800befb
 800bed4:	0800bf0b 	.word	0x0800bf0b
 800bed8:	0800bf0b 	.word	0x0800bf0b
 800bedc:	0800bf0b 	.word	0x0800bf0b
 800bee0:	0800bf03 	.word	0x0800bf03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bee4:	f7fe fb64 	bl	800a5b0 <HAL_RCC_GetPCLK1Freq>
 800bee8:	61b8      	str	r0, [r7, #24]
        break;
 800beea:	e013      	b.n	800bf14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800beec:	f7fe fb82 	bl	800a5f4 <HAL_RCC_GetPCLK2Freq>
 800bef0:	61b8      	str	r0, [r7, #24]
        break;
 800bef2:	e00f      	b.n	800bf14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bef4:	4b33      	ldr	r3, [pc, #204]	; (800bfc4 <UART_SetConfig+0x330>)
 800bef6:	61bb      	str	r3, [r7, #24]
        break;
 800bef8:	e00c      	b.n	800bf14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800befa:	f7fe fae1 	bl	800a4c0 <HAL_RCC_GetSysClockFreq>
 800befe:	61b8      	str	r0, [r7, #24]
        break;
 800bf00:	e008      	b.n	800bf14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf06:	61bb      	str	r3, [r7, #24]
        break;
 800bf08:	e004      	b.n	800bf14 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	77bb      	strb	r3, [r7, #30]
        break;
 800bf12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 8082 	beq.w	800c020 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	005a      	lsls	r2, r3, #1
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	085b      	lsrs	r3, r3, #1
 800bf26:	441a      	add	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	2b0f      	cmp	r3, #15
 800bf36:	d916      	bls.n	800bf66 <UART_SetConfig+0x2d2>
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf3e:	d212      	bcs.n	800bf66 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	f023 030f 	bic.w	r3, r3, #15
 800bf48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	085b      	lsrs	r3, r3, #1
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	f003 0307 	and.w	r3, r3, #7
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	89fb      	ldrh	r3, [r7, #14]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	89fa      	ldrh	r2, [r7, #14]
 800bf62:	60da      	str	r2, [r3, #12]
 800bf64:	e05c      	b.n	800c020 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	77bb      	strb	r3, [r7, #30]
 800bf6a:	e059      	b.n	800c020 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf6c:	7ffb      	ldrb	r3, [r7, #31]
 800bf6e:	2b08      	cmp	r3, #8
 800bf70:	d835      	bhi.n	800bfde <UART_SetConfig+0x34a>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <UART_SetConfig+0x2e4>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bf9d 	.word	0x0800bf9d
 800bf7c:	0800bfa5 	.word	0x0800bfa5
 800bf80:	0800bfc9 	.word	0x0800bfc9
 800bf84:	0800bfdf 	.word	0x0800bfdf
 800bf88:	0800bfcf 	.word	0x0800bfcf
 800bf8c:	0800bfdf 	.word	0x0800bfdf
 800bf90:	0800bfdf 	.word	0x0800bfdf
 800bf94:	0800bfdf 	.word	0x0800bfdf
 800bf98:	0800bfd7 	.word	0x0800bfd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf9c:	f7fe fb08 	bl	800a5b0 <HAL_RCC_GetPCLK1Freq>
 800bfa0:	61b8      	str	r0, [r7, #24]
        break;
 800bfa2:	e021      	b.n	800bfe8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfa4:	f7fe fb26 	bl	800a5f4 <HAL_RCC_GetPCLK2Freq>
 800bfa8:	61b8      	str	r0, [r7, #24]
        break;
 800bfaa:	e01d      	b.n	800bfe8 <UART_SetConfig+0x354>
 800bfac:	40013800 	.word	0x40013800
 800bfb0:	40021000 	.word	0x40021000
 800bfb4:	40004400 	.word	0x40004400
 800bfb8:	40004800 	.word	0x40004800
 800bfbc:	40004c00 	.word	0x40004c00
 800bfc0:	40005000 	.word	0x40005000
 800bfc4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfc8:	4b1b      	ldr	r3, [pc, #108]	; (800c038 <UART_SetConfig+0x3a4>)
 800bfca:	61bb      	str	r3, [r7, #24]
        break;
 800bfcc:	e00c      	b.n	800bfe8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfce:	f7fe fa77 	bl	800a4c0 <HAL_RCC_GetSysClockFreq>
 800bfd2:	61b8      	str	r0, [r7, #24]
        break;
 800bfd4:	e008      	b.n	800bfe8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfda:	61bb      	str	r3, [r7, #24]
        break;
 800bfdc:	e004      	b.n	800bfe8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	77bb      	strb	r3, [r7, #30]
        break;
 800bfe6:	bf00      	nop
    }

    if (pclk != 0U)
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d018      	beq.n	800c020 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	085a      	lsrs	r2, r3, #1
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	441a      	add	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c000:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	2b0f      	cmp	r3, #15
 800c006:	d909      	bls.n	800c01c <UART_SetConfig+0x388>
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c00e:	d205      	bcs.n	800c01c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	b29a      	uxth	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	60da      	str	r2, [r3, #12]
 800c01a:	e001      	b.n	800c020 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c02c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3720      	adds	r7, #32
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	007a1200 	.word	0x007a1200

0800c03c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00a      	beq.n	800c066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	430a      	orrs	r2, r1
 800c064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06a:	f003 0302 	and.w	r3, r3, #2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00a      	beq.n	800c088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	430a      	orrs	r2, r1
 800c086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00a      	beq.n	800c0aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	430a      	orrs	r2, r1
 800c0a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ae:	f003 0308 	and.w	r3, r3, #8
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00a      	beq.n	800c0cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	430a      	orrs	r2, r1
 800c0ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d0:	f003 0310 	and.w	r3, r3, #16
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00a      	beq.n	800c0ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f2:	f003 0320 	and.w	r3, r3, #32
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	430a      	orrs	r2, r1
 800c10e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d01a      	beq.n	800c152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c13a:	d10a      	bne.n	800c152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	430a      	orrs	r2, r1
 800c150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00a      	beq.n	800c174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	430a      	orrs	r2, r1
 800c172:	605a      	str	r2, [r3, #4]
  }
}
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b098      	sub	sp, #96	; 0x60
 800c184:	af02      	add	r7, sp, #8
 800c186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c190:	f7f9 fe96 	bl	8005ec0 <HAL_GetTick>
 800c194:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 0308 	and.w	r3, r3, #8
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	d12e      	bne.n	800c202 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f88c 	bl	800c2d0 <UART_WaitOnFlagUntilTimeout>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d021      	beq.n	800c202 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	e853 3f00 	ldrex	r3, [r3]
 800c1ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1d2:	653b      	str	r3, [r7, #80]	; 0x50
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1dc:	647b      	str	r3, [r7, #68]	; 0x44
 800c1de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1e4:	e841 2300 	strex	r3, r2, [r1]
 800c1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1e6      	bne.n	800c1be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2220      	movs	r2, #32
 800c1f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1fe:	2303      	movs	r3, #3
 800c200:	e062      	b.n	800c2c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f003 0304 	and.w	r3, r3, #4
 800c20c:	2b04      	cmp	r3, #4
 800c20e:	d149      	bne.n	800c2a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c218:	2200      	movs	r2, #0
 800c21a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 f856 	bl	800c2d0 <UART_WaitOnFlagUntilTimeout>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d03c      	beq.n	800c2a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c232:	e853 3f00 	ldrex	r3, [r3]
 800c236:	623b      	str	r3, [r7, #32]
   return(result);
 800c238:	6a3b      	ldr	r3, [r7, #32]
 800c23a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c23e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	461a      	mov	r2, r3
 800c246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c248:	633b      	str	r3, [r7, #48]	; 0x30
 800c24a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c24e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c250:	e841 2300 	strex	r3, r2, [r1]
 800c254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1e6      	bne.n	800c22a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	3308      	adds	r3, #8
 800c262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	e853 3f00 	ldrex	r3, [r3]
 800c26a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f023 0301 	bic.w	r3, r3, #1
 800c272:	64bb      	str	r3, [r7, #72]	; 0x48
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3308      	adds	r3, #8
 800c27a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c27c:	61fa      	str	r2, [r7, #28]
 800c27e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c280:	69b9      	ldr	r1, [r7, #24]
 800c282:	69fa      	ldr	r2, [r7, #28]
 800c284:	e841 2300 	strex	r3, r2, [r1]
 800c288:	617b      	str	r3, [r7, #20]
   return(result);
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1e5      	bne.n	800c25c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2220      	movs	r2, #32
 800c294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	e011      	b.n	800c2c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2220      	movs	r2, #32
 800c2a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2220      	movs	r2, #32
 800c2ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3758      	adds	r7, #88	; 0x58
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2e0:	e049      	b.n	800c376 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e8:	d045      	beq.n	800c376 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2ea:	f7f9 fde9 	bl	8005ec0 <HAL_GetTick>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	69ba      	ldr	r2, [r7, #24]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d302      	bcc.n	800c300 <UART_WaitOnFlagUntilTimeout+0x30>
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c300:	2303      	movs	r3, #3
 800c302:	e048      	b.n	800c396 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 0304 	and.w	r3, r3, #4
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d031      	beq.n	800c376 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	69db      	ldr	r3, [r3, #28]
 800c318:	f003 0308 	and.w	r3, r3, #8
 800c31c:	2b08      	cmp	r3, #8
 800c31e:	d110      	bne.n	800c342 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2208      	movs	r2, #8
 800c326:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c328:	68f8      	ldr	r0, [r7, #12]
 800c32a:	f000 f9b3 	bl	800c694 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2208      	movs	r2, #8
 800c332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e029      	b.n	800c396 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69db      	ldr	r3, [r3, #28]
 800c348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c34c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c350:	d111      	bne.n	800c376 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c35a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 f999 	bl	800c694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2220      	movs	r2, #32
 800c366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c372:	2303      	movs	r3, #3
 800c374:	e00f      	b.n	800c396 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	69da      	ldr	r2, [r3, #28]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	4013      	ands	r3, r2
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	429a      	cmp	r2, r3
 800c384:	bf0c      	ite	eq
 800c386:	2301      	moveq	r3, #1
 800c388:	2300      	movne	r3, #0
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	461a      	mov	r2, r3
 800c38e:	79fb      	ldrb	r3, [r7, #7]
 800c390:	429a      	cmp	r2, r3
 800c392:	d0a6      	beq.n	800c2e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
	...

0800c3a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b097      	sub	sp, #92	; 0x5c
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	88fa      	ldrh	r2, [r7, #6]
 800c3b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	88fa      	ldrh	r2, [r7, #6]
 800c3c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3d2:	d10e      	bne.n	800c3f2 <UART_Start_Receive_IT+0x52>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d105      	bne.n	800c3e8 <UART_Start_Receive_IT+0x48>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c3e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3e6:	e01a      	b.n	800c41e <UART_Start_Receive_IT+0x7e>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	22ff      	movs	r2, #255	; 0xff
 800c3ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3f0:	e015      	b.n	800c41e <UART_Start_Receive_IT+0x7e>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d10d      	bne.n	800c416 <UART_Start_Receive_IT+0x76>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d104      	bne.n	800c40c <UART_Start_Receive_IT+0x6c>
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	22ff      	movs	r2, #255	; 0xff
 800c406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c40a:	e008      	b.n	800c41e <UART_Start_Receive_IT+0x7e>
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	227f      	movs	r2, #127	; 0x7f
 800c410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c414:	e003      	b.n	800c41e <UART_Start_Receive_IT+0x7e>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2222      	movs	r2, #34	; 0x22
 800c42a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3308      	adds	r3, #8
 800c434:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c438:	e853 3f00 	ldrex	r3, [r3]
 800c43c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c440:	f043 0301 	orr.w	r3, r3, #1
 800c444:	657b      	str	r3, [r7, #84]	; 0x54
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	3308      	adds	r3, #8
 800c44c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c44e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c450:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c452:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c456:	e841 2300 	strex	r3, r2, [r1]
 800c45a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1e5      	bne.n	800c42e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c46a:	d107      	bne.n	800c47c <UART_Start_Receive_IT+0xdc>
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d103      	bne.n	800c47c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4a22      	ldr	r2, [pc, #136]	; (800c500 <UART_Start_Receive_IT+0x160>)
 800c478:	669a      	str	r2, [r3, #104]	; 0x68
 800c47a:	e002      	b.n	800c482 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	4a21      	ldr	r2, [pc, #132]	; (800c504 <UART_Start_Receive_IT+0x164>)
 800c480:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d019      	beq.n	800c4be <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	e853 3f00 	ldrex	r3, [r3]
 800c496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c49e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c4aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4b0:	e841 2300 	strex	r3, r2, [r1]
 800c4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1e6      	bne.n	800c48a <UART_Start_Receive_IT+0xea>
 800c4bc:	e018      	b.n	800c4f0 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	e853 3f00 	ldrex	r3, [r3]
 800c4ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	f043 0320 	orr.w	r3, r3, #32
 800c4d2:	653b      	str	r3, [r7, #80]	; 0x50
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4dc:	623b      	str	r3, [r7, #32]
 800c4de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e0:	69f9      	ldr	r1, [r7, #28]
 800c4e2:	6a3a      	ldr	r2, [r7, #32]
 800c4e4:	e841 2300 	strex	r3, r2, [r1]
 800c4e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1e6      	bne.n	800c4be <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	375c      	adds	r7, #92	; 0x5c
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	0800ce03 	.word	0x0800ce03
 800c504:	0800cc5b 	.word	0x0800cc5b

0800c508 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b096      	sub	sp, #88	; 0x58
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	4613      	mov	r3, r2
 800c514:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	88fa      	ldrh	r2, [r7, #6]
 800c520:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2222      	movs	r2, #34	; 0x22
 800c530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d028      	beq.n	800c58e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c540:	4a3e      	ldr	r2, [pc, #248]	; (800c63c <UART_Start_Receive_DMA+0x134>)
 800c542:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c548:	4a3d      	ldr	r2, [pc, #244]	; (800c640 <UART_Start_Receive_DMA+0x138>)
 800c54a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c550:	4a3c      	ldr	r2, [pc, #240]	; (800c644 <UART_Start_Receive_DMA+0x13c>)
 800c552:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c558:	2200      	movs	r2, #0
 800c55a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3324      	adds	r3, #36	; 0x24
 800c566:	4619      	mov	r1, r3
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56c:	461a      	mov	r2, r3
 800c56e:	88fb      	ldrh	r3, [r7, #6]
 800c570:	f7f9 fe31 	bl	80061d6 <HAL_DMA_Start_IT>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d009      	beq.n	800c58e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2210      	movs	r2, #16
 800c57e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2220      	movs	r2, #32
 800c586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	e051      	b.n	800c632 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d018      	beq.n	800c5c8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59e:	e853 3f00 	ldrex	r3, [r3]
 800c5a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5aa:	657b      	str	r3, [r7, #84]	; 0x54
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5b6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5bc:	e841 2300 	strex	r3, r2, [r1]
 800c5c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1e6      	bne.n	800c596 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3308      	adds	r3, #8
 800c5ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d2:	e853 3f00 	ldrex	r3, [r3]
 800c5d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	f043 0301 	orr.w	r3, r3, #1
 800c5de:	653b      	str	r3, [r7, #80]	; 0x50
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5e8:	637a      	str	r2, [r7, #52]	; 0x34
 800c5ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5f0:	e841 2300 	strex	r3, r2, [r1]
 800c5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1e5      	bne.n	800c5c8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3308      	adds	r3, #8
 800c602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	e853 3f00 	ldrex	r3, [r3]
 800c60a:	613b      	str	r3, [r7, #16]
   return(result);
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c612:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3308      	adds	r3, #8
 800c61a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c61c:	623a      	str	r2, [r7, #32]
 800c61e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c620:	69f9      	ldr	r1, [r7, #28]
 800c622:	6a3a      	ldr	r2, [r7, #32]
 800c624:	e841 2300 	strex	r3, r2, [r1]
 800c628:	61bb      	str	r3, [r7, #24]
   return(result);
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1e5      	bne.n	800c5fc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3758      	adds	r7, #88	; 0x58
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	0800c80d 	.word	0x0800c80d
 800c640:	0800c933 	.word	0x0800c933
 800c644:	0800c971 	.word	0x0800c971

0800c648 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c648:	b480      	push	{r7}
 800c64a:	b089      	sub	sp, #36	; 0x24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	e853 3f00 	ldrex	r3, [r3]
 800c65c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	61bb      	str	r3, [r7, #24]
 800c670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c672:	6979      	ldr	r1, [r7, #20]
 800c674:	69ba      	ldr	r2, [r7, #24]
 800c676:	e841 2300 	strex	r3, r2, [r1]
 800c67a:	613b      	str	r3, [r7, #16]
   return(result);
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1e6      	bne.n	800c650 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2220      	movs	r2, #32
 800c686:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c688:	bf00      	nop
 800c68a:	3724      	adds	r7, #36	; 0x24
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c694:	b480      	push	{r7}
 800c696:	b095      	sub	sp, #84	; 0x54
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a4:	e853 3f00 	ldrex	r3, [r3]
 800c6a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6ba:	643b      	str	r3, [r7, #64]	; 0x40
 800c6bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6c2:	e841 2300 	strex	r3, r2, [r1]
 800c6c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1e6      	bne.n	800c69c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	3308      	adds	r3, #8
 800c6d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d6:	6a3b      	ldr	r3, [r7, #32]
 800c6d8:	e853 3f00 	ldrex	r3, [r3]
 800c6dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	f023 0301 	bic.w	r3, r3, #1
 800c6e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6f6:	e841 2300 	strex	r3, r2, [r1]
 800c6fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1e5      	bne.n	800c6ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c706:	2b01      	cmp	r3, #1
 800c708:	d118      	bne.n	800c73c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	e853 3f00 	ldrex	r3, [r3]
 800c716:	60bb      	str	r3, [r7, #8]
   return(result);
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	f023 0310 	bic.w	r3, r3, #16
 800c71e:	647b      	str	r3, [r7, #68]	; 0x44
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	461a      	mov	r2, r3
 800c726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c728:	61bb      	str	r3, [r7, #24]
 800c72a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72c:	6979      	ldr	r1, [r7, #20]
 800c72e:	69ba      	ldr	r2, [r7, #24]
 800c730:	e841 2300 	strex	r3, r2, [r1]
 800c734:	613b      	str	r3, [r7, #16]
   return(result);
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1e6      	bne.n	800c70a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2220      	movs	r2, #32
 800c740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c750:	bf00      	nop
 800c752:	3754      	adds	r7, #84	; 0x54
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b090      	sub	sp, #64	; 0x40
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	2b20      	cmp	r3, #32
 800c770:	d037      	beq.n	800c7e2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800c772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c774:	2200      	movs	r2, #0
 800c776:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3308      	adds	r3, #8
 800c780:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c784:	e853 3f00 	ldrex	r3, [r3]
 800c788:	623b      	str	r3, [r7, #32]
   return(result);
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c790:	63bb      	str	r3, [r7, #56]	; 0x38
 800c792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	3308      	adds	r3, #8
 800c798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c79a:	633a      	str	r2, [r7, #48]	; 0x30
 800c79c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7a2:	e841 2300 	strex	r3, r2, [r1]
 800c7a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1e5      	bne.n	800c77a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	e853 3f00 	ldrex	r3, [r3]
 800c7ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7cc:	61fb      	str	r3, [r7, #28]
 800c7ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d0:	69b9      	ldr	r1, [r7, #24]
 800c7d2:	69fa      	ldr	r2, [r7, #28]
 800c7d4:	e841 2300 	strex	r3, r2, [r1]
 800c7d8:	617b      	str	r3, [r7, #20]
   return(result);
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1e6      	bne.n	800c7ae <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7e0:	e002      	b.n	800c7e8 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800c7e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c7e4:	f7f5 fcd4 	bl	8002190 <HAL_UART_TxCpltCallback>
}
 800c7e8:	bf00      	nop
 800c7ea:	3740      	adds	r7, #64	; 0x40
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f7ff fa0a 	bl	800bc18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c804:	bf00      	nop
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b09c      	sub	sp, #112	; 0x70
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c818:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	2b20      	cmp	r3, #32
 800c820:	d071      	beq.n	800c906 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c824:	2200      	movs	r2, #0
 800c826:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c832:	e853 3f00 	ldrex	r3, [r3]
 800c836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c83a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c83e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	461a      	mov	r2, r3
 800c846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c848:	65bb      	str	r3, [r7, #88]	; 0x58
 800c84a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c84e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c850:	e841 2300 	strex	r3, r2, [r1]
 800c854:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1e6      	bne.n	800c82a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	3308      	adds	r3, #8
 800c862:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c866:	e853 3f00 	ldrex	r3, [r3]
 800c86a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c86e:	f023 0301 	bic.w	r3, r3, #1
 800c872:	667b      	str	r3, [r7, #100]	; 0x64
 800c874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	3308      	adds	r3, #8
 800c87a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c87c:	647a      	str	r2, [r7, #68]	; 0x44
 800c87e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c884:	e841 2300 	strex	r3, r2, [r1]
 800c888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1e5      	bne.n	800c85c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3308      	adds	r3, #8
 800c896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	e853 3f00 	ldrex	r3, [r3]
 800c89e:	623b      	str	r3, [r7, #32]
   return(result);
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8a6:	663b      	str	r3, [r7, #96]	; 0x60
 800c8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3308      	adds	r3, #8
 800c8ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c8b0:	633a      	str	r2, [r7, #48]	; 0x30
 800c8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8b8:	e841 2300 	strex	r3, r2, [r1]
 800c8bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1e5      	bne.n	800c890 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c8c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8c6:	2220      	movs	r2, #32
 800c8c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d118      	bne.n	800c906 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	e853 3f00 	ldrex	r3, [r3]
 800c8e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f023 0310 	bic.w	r3, r3, #16
 800c8e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8f2:	61fb      	str	r3, [r7, #28]
 800c8f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f6:	69b9      	ldr	r1, [r7, #24]
 800c8f8:	69fa      	ldr	r2, [r7, #28]
 800c8fa:	e841 2300 	strex	r3, r2, [r1]
 800c8fe:	617b      	str	r3, [r7, #20]
   return(result);
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1e6      	bne.n	800c8d4 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c908:	2200      	movs	r2, #0
 800c90a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c90c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c90e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c910:	2b01      	cmp	r3, #1
 800c912:	d107      	bne.n	800c924 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c91a:	4619      	mov	r1, r3
 800c91c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c91e:	f7ff f9ad 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c922:	e002      	b.n	800c92a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c924:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c926:	f7f5 fc7b 	bl	8002220 <HAL_UART_RxCpltCallback>
}
 800c92a:	bf00      	nop
 800c92c:	3770      	adds	r7, #112	; 0x70
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2201      	movs	r2, #1
 800c944:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d109      	bne.n	800c962 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c954:	085b      	lsrs	r3, r3, #1
 800c956:	b29b      	uxth	r3, r3
 800c958:	4619      	mov	r1, r3
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f7ff f98e 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c960:	e002      	b.n	800c968 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f7ff f962 	bl	800bc2c <HAL_UART_RxHalfCpltCallback>
}
 800c968:	bf00      	nop
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c982:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c996:	2b80      	cmp	r3, #128	; 0x80
 800c998:	d109      	bne.n	800c9ae <UART_DMAError+0x3e>
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	2b21      	cmp	r3, #33	; 0x21
 800c99e:	d106      	bne.n	800c9ae <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c9a8:	6978      	ldr	r0, [r7, #20]
 800c9aa:	f7ff fe4d 	bl	800c648 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b8:	2b40      	cmp	r3, #64	; 0x40
 800c9ba:	d109      	bne.n	800c9d0 <UART_DMAError+0x60>
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b22      	cmp	r3, #34	; 0x22
 800c9c0:	d106      	bne.n	800c9d0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c9ca:	6978      	ldr	r0, [r7, #20]
 800c9cc:	f7ff fe62 	bl	800c694 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9d6:	f043 0210 	orr.w	r2, r3, #16
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9e0:	6978      	ldr	r0, [r7, #20]
 800c9e2:	f7ff f92d 	bl	800bc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9e6:	bf00      	nop
 800c9e8:	3718      	adds	r7, #24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f7ff f917 	bl	800bc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca12:	bf00      	nop
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b084      	sub	sp, #16
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca26:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2220      	movs	r2, #32
 800ca34:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f7ff f90c 	bl	800bc54 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca3c:	bf00      	nop
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca50:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	220f      	movs	r2, #15
 800ca60:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	699a      	ldr	r2, [r3, #24]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f042 0208 	orr.w	r2, r2, #8
 800ca70:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2220      	movs	r2, #32
 800ca76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f7ff f8f1 	bl	800bc68 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca86:	bf00      	nop
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ca8e:	b480      	push	{r7}
 800ca90:	b08f      	sub	sp, #60	; 0x3c
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca9a:	2b21      	cmp	r3, #33	; 0x21
 800ca9c:	d14d      	bne.n	800cb3a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d132      	bne.n	800cb10 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	e853 3f00 	ldrex	r3, [r3]
 800cab6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cabe:	637b      	str	r3, [r7, #52]	; 0x34
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	461a      	mov	r2, r3
 800cac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cacc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cad0:	e841 2300 	strex	r3, r2, [r1]
 800cad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1e6      	bne.n	800caaa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	e853 3f00 	ldrex	r3, [r3]
 800cae8:	60bb      	str	r3, [r7, #8]
   return(result);
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caf0:	633b      	str	r3, [r7, #48]	; 0x30
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	461a      	mov	r2, r3
 800caf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafa:	61bb      	str	r3, [r7, #24]
 800cafc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafe:	6979      	ldr	r1, [r7, #20]
 800cb00:	69ba      	ldr	r2, [r7, #24]
 800cb02:	e841 2300 	strex	r3, r2, [r1]
 800cb06:	613b      	str	r3, [r7, #16]
   return(result);
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1e6      	bne.n	800cadc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cb0e:	e014      	b.n	800cb3a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb14:	781a      	ldrb	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	b292      	uxth	r2, r2
 800cb1c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb22:	1c5a      	adds	r2, r3, #1
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	3b01      	subs	r3, #1
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800cb3a:	bf00      	nop
 800cb3c:	373c      	adds	r7, #60	; 0x3c
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr

0800cb46 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cb46:	b480      	push	{r7}
 800cb48:	b091      	sub	sp, #68	; 0x44
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb52:	2b21      	cmp	r3, #33	; 0x21
 800cb54:	d151      	bne.n	800cbfa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d132      	bne.n	800cbc8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	e853 3f00 	ldrex	r3, [r3]
 800cb6e:	623b      	str	r3, [r7, #32]
   return(result);
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb76:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb80:	633b      	str	r3, [r7, #48]	; 0x30
 800cb82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb88:	e841 2300 	strex	r3, r2, [r1]
 800cb8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1e6      	bne.n	800cb62 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	e853 3f00 	ldrex	r3, [r3]
 800cba0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cba8:	637b      	str	r3, [r7, #52]	; 0x34
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb2:	61fb      	str	r3, [r7, #28]
 800cbb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb6:	69b9      	ldr	r1, [r7, #24]
 800cbb8:	69fa      	ldr	r2, [r7, #28]
 800cbba:	e841 2300 	strex	r3, r2, [r1]
 800cbbe:	617b      	str	r3, [r7, #20]
   return(result);
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1e6      	bne.n	800cb94 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cbc6:	e018      	b.n	800cbfa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd0:	881a      	ldrh	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbda:	b292      	uxth	r2, r2
 800cbdc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbe2:	1c9a      	adds	r2, r3, #2
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	b29a      	uxth	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800cbfa:	bf00      	nop
 800cbfc:	3744      	adds	r7, #68	; 0x44
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr

0800cc06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b088      	sub	sp, #32
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	e853 3f00 	ldrex	r3, [r3]
 800cc1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc22:	61fb      	str	r3, [r7, #28]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	61bb      	str	r3, [r7, #24]
 800cc2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc30:	6979      	ldr	r1, [r7, #20]
 800cc32:	69ba      	ldr	r2, [r7, #24]
 800cc34:	e841 2300 	strex	r3, r2, [r1]
 800cc38:	613b      	str	r3, [r7, #16]
   return(result);
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1e6      	bne.n	800cc0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2220      	movs	r2, #32
 800cc44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7f5 fa9f 	bl	8002190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc52:	bf00      	nop
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b09c      	sub	sp, #112	; 0x70
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc68:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc72:	2b22      	cmp	r3, #34	; 0x22
 800cc74:	f040 80b9 	bne.w	800cdea <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc7e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cc86:	b2d9      	uxtb	r1, r3
 800cc88:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc92:	400a      	ands	r2, r1
 800cc94:	b2d2      	uxtb	r2, r2
 800cc96:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc9c:	1c5a      	adds	r2, r3, #1
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f040 809c 	bne.w	800cdfa <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccca:	e853 3f00 	ldrex	r3, [r3]
 800ccce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ccd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ccd6:	66bb      	str	r3, [r7, #104]	; 0x68
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cce0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cce2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cce8:	e841 2300 	strex	r3, r2, [r1]
 800ccec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ccee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1e6      	bne.n	800ccc2 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	e853 3f00 	ldrex	r3, [r3]
 800cd02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd06:	f023 0301 	bic.w	r3, r3, #1
 800cd0a:	667b      	str	r3, [r7, #100]	; 0x64
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	3308      	adds	r3, #8
 800cd12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cd14:	647a      	str	r2, [r7, #68]	; 0x44
 800cd16:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd1c:	e841 2300 	strex	r3, r2, [r1]
 800cd20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1e5      	bne.n	800ccf4 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d018      	beq.n	800cd7c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	e853 3f00 	ldrex	r3, [r3]
 800cd56:	623b      	str	r3, [r7, #32]
   return(result);
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd5e:	663b      	str	r3, [r7, #96]	; 0x60
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	461a      	mov	r2, r3
 800cd66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd68:	633b      	str	r3, [r7, #48]	; 0x30
 800cd6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd70:	e841 2300 	strex	r3, r2, [r1]
 800cd74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1e6      	bne.n	800cd4a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d12e      	bne.n	800cde2 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	e853 3f00 	ldrex	r3, [r3]
 800cd96:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f023 0310 	bic.w	r3, r3, #16
 800cd9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	461a      	mov	r2, r3
 800cda6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cda8:	61fb      	str	r3, [r7, #28]
 800cdaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdac:	69b9      	ldr	r1, [r7, #24]
 800cdae:	69fa      	ldr	r2, [r7, #28]
 800cdb0:	e841 2300 	strex	r3, r2, [r1]
 800cdb4:	617b      	str	r3, [r7, #20]
   return(result);
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1e6      	bne.n	800cd8a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	69db      	ldr	r3, [r3, #28]
 800cdc2:	f003 0310 	and.w	r3, r3, #16
 800cdc6:	2b10      	cmp	r3, #16
 800cdc8:	d103      	bne.n	800cdd2 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2210      	movs	r2, #16
 800cdd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7fe ff4e 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cde0:	e00b      	b.n	800cdfa <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7f5 fa1c 	bl	8002220 <HAL_UART_RxCpltCallback>
}
 800cde8:	e007      	b.n	800cdfa <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	699a      	ldr	r2, [r3, #24]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f042 0208 	orr.w	r2, r2, #8
 800cdf8:	619a      	str	r2, [r3, #24]
}
 800cdfa:	bf00      	nop
 800cdfc:	3770      	adds	r7, #112	; 0x70
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b09c      	sub	sp, #112	; 0x70
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce10:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce1a:	2b22      	cmp	r3, #34	; 0x22
 800ce1c:	f040 80b9 	bne.w	800cf92 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce2e:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ce30:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ce34:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ce38:	4013      	ands	r3, r2
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce3e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce44:	1c9a      	adds	r2, r3, #2
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	3b01      	subs	r3, #1
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f040 809c 	bne.w	800cfa2 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce72:	e853 3f00 	ldrex	r3, [r3]
 800ce76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ce78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce7e:	667b      	str	r3, [r7, #100]	; 0x64
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	461a      	mov	r2, r3
 800ce86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce88:	657b      	str	r3, [r7, #84]	; 0x54
 800ce8a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce90:	e841 2300 	strex	r3, r2, [r1]
 800ce94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1e6      	bne.n	800ce6a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3308      	adds	r3, #8
 800cea2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea6:	e853 3f00 	ldrex	r3, [r3]
 800ceaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ceac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceae:	f023 0301 	bic.w	r3, r3, #1
 800ceb2:	663b      	str	r3, [r7, #96]	; 0x60
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3308      	adds	r3, #8
 800ceba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cebc:	643a      	str	r2, [r7, #64]	; 0x40
 800cebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cec4:	e841 2300 	strex	r3, r2, [r1]
 800cec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1e5      	bne.n	800ce9c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2220      	movs	r2, #32
 800ced4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d018      	beq.n	800cf24 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef8:	6a3b      	ldr	r3, [r7, #32]
 800cefa:	e853 3f00 	ldrex	r3, [r3]
 800cefe:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf12:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf18:	e841 2300 	strex	r3, r2, [r1]
 800cf1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d1e6      	bne.n	800cef2 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d12e      	bne.n	800cf8a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	e853 3f00 	ldrex	r3, [r3]
 800cf3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	f023 0310 	bic.w	r3, r3, #16
 800cf46:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf50:	61bb      	str	r3, [r7, #24]
 800cf52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf54:	6979      	ldr	r1, [r7, #20]
 800cf56:	69ba      	ldr	r2, [r7, #24]
 800cf58:	e841 2300 	strex	r3, r2, [r1]
 800cf5c:	613b      	str	r3, [r7, #16]
   return(result);
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1e6      	bne.n	800cf32 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	f003 0310 	and.w	r3, r3, #16
 800cf6e:	2b10      	cmp	r3, #16
 800cf70:	d103      	bne.n	800cf7a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2210      	movs	r2, #16
 800cf78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7fe fe7a 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf88:	e00b      	b.n	800cfa2 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7f5 f948 	bl	8002220 <HAL_UART_RxCpltCallback>
}
 800cf90:	e007      	b.n	800cfa2 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	699a      	ldr	r2, [r3, #24]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f042 0208 	orr.w	r2, r2, #8
 800cfa0:	619a      	str	r2, [r3, #24]
}
 800cfa2:	bf00      	nop
 800cfa4:	3770      	adds	r7, #112	; 0x70
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cfaa:	b480      	push	{r7}
 800cfac:	b083      	sub	sp, #12
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cfb2:	bf00      	nop
 800cfb4:	370c      	adds	r7, #12
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	b085      	sub	sp, #20
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cfcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cfd0:	2b84      	cmp	r3, #132	; 0x84
 800cfd2:	d005      	beq.n	800cfe0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cfd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4413      	add	r3, r2
 800cfdc:	3303      	adds	r3, #3
 800cfde:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b083      	sub	sp, #12
 800cff2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cff4:	f3ef 8305 	mrs	r3, IPSR
 800cff8:	607b      	str	r3, [r7, #4]
  return(result);
 800cffa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	bf14      	ite	ne
 800d000:	2301      	movne	r3, #1
 800d002:	2300      	moveq	r3, #0
 800d004:	b2db      	uxtb	r3, r3
}
 800d006:	4618      	mov	r0, r3
 800d008:	370c      	adds	r7, #12
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d016:	f001 fa6f 	bl	800e4f8 <vTaskStartScheduler>
  
  return osOK;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d024:	f7ff ffe3 	bl	800cfee <inHandlerMode>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d003      	beq.n	800d036 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d02e:	f001 fb8d 	bl	800e74c <xTaskGetTickCountFromISR>
 800d032:	4603      	mov	r3, r0
 800d034:	e002      	b.n	800d03c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d036:	f001 fb79 	bl	800e72c <xTaskGetTickCount>
 800d03a:	4603      	mov	r3, r0
  }
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d042:	b089      	sub	sp, #36	; 0x24
 800d044:	af04      	add	r7, sp, #16
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d020      	beq.n	800d094 <osThreadCreate+0x54>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	699b      	ldr	r3, [r3, #24]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d01c      	beq.n	800d094 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685c      	ldr	r4, [r3, #4]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	691e      	ldr	r6, [r3, #16]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7ff ffa6 	bl	800cfbe <makeFreeRtosPriority>
 800d072:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d07c:	9202      	str	r2, [sp, #8]
 800d07e:	9301      	str	r3, [sp, #4]
 800d080:	9100      	str	r1, [sp, #0]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	4632      	mov	r2, r6
 800d086:	4629      	mov	r1, r5
 800d088:	4620      	mov	r0, r4
 800d08a:	f000 ffe1 	bl	800e050 <xTaskCreateStatic>
 800d08e:	4603      	mov	r3, r0
 800d090:	60fb      	str	r3, [r7, #12]
 800d092:	e01c      	b.n	800d0ce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685c      	ldr	r4, [r3, #4]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0a0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff ff88 	bl	800cfbe <makeFreeRtosPriority>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	f107 030c 	add.w	r3, r7, #12
 800d0b4:	9301      	str	r3, [sp, #4]
 800d0b6:	9200      	str	r2, [sp, #0]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	4632      	mov	r2, r6
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f001 f822 	bl	800e108 <xTaskCreate>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d001      	beq.n	800d0ce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e000      	b.n	800d0d0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <osDelay+0x16>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	e000      	b.n	800d0f0 <osDelay+0x18>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f001 f9cd 	bl	800e490 <vTaskDelay>
  
  return osOK;
 800d0f6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b086      	sub	sp, #24
 800d104:	af02      	add	r7, sp, #8
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	460b      	mov	r3, r1
 800d10a:	607a      	str	r2, [r7, #4]
 800d10c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d013      	beq.n	800d13e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800d116:	7afb      	ldrb	r3, [r7, #11]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d101      	bne.n	800d120 <osTimerCreate+0x20>
 800d11c:	2101      	movs	r1, #1
 800d11e:	e000      	b.n	800d122 <osTimerCreate+0x22>
 800d120:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800d12a:	9201      	str	r2, [sp, #4]
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	460a      	mov	r2, r1
 800d132:	2101      	movs	r1, #1
 800d134:	480b      	ldr	r0, [pc, #44]	; (800d164 <osTimerCreate+0x64>)
 800d136:	f002 f8fe 	bl	800f336 <xTimerCreateStatic>
 800d13a:	4603      	mov	r3, r0
 800d13c:	e00e      	b.n	800d15c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800d13e:	7afb      	ldrb	r3, [r7, #11]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d101      	bne.n	800d148 <osTimerCreate+0x48>
 800d144:	2201      	movs	r2, #1
 800d146:	e000      	b.n	800d14a <osTimerCreate+0x4a>
 800d148:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2101      	movs	r1, #1
 800d154:	4803      	ldr	r0, [pc, #12]	; (800d164 <osTimerCreate+0x64>)
 800d156:	f002 f8cd 	bl	800f2f4 <xTimerCreate>
 800d15a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	08010c08 	.word	0x08010c08

0800d168 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d007      	beq.n	800d188 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	4619      	mov	r1, r3
 800d17e:	2001      	movs	r0, #1
 800d180:	f000 fa42 	bl	800d608 <xQueueCreateMutexStatic>
 800d184:	4603      	mov	r3, r0
 800d186:	e003      	b.n	800d190 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d188:	2001      	movs	r0, #1
 800d18a:	f000 fa25 	bl	800d5d8 <xQueueCreateMutex>
 800d18e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d190:	4618      	mov	r0, r3
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <osDelayUntil+0x18>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	e000      	b.n	800d1b2 <osDelayUntil+0x1a>
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f001 f8ed 	bl	800e394 <vTaskDelayUntil>
  
  return osOK;
 800d1ba:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f103 0208 	add.w	r2, r3, #8
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f103 0208 	add.w	r2, r3, #8
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f103 0208 	add.w	r2, r3, #8
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d1f8:	bf00      	nop
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d212:	bf00      	nop
 800d214:	370c      	adds	r7, #12
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d21e:	b480      	push	{r7}
 800d220:	b085      	sub	sp, #20
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	689a      	ldr	r2, [r3, #8]
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	683a      	ldr	r2, [r7, #0]
 800d242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	601a      	str	r2, [r3, #0]
}
 800d25a:	bf00      	nop
 800d25c:	3714      	adds	r7, #20
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d266:	b480      	push	{r7}
 800d268:	b085      	sub	sp, #20
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27c:	d103      	bne.n	800d286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	60fb      	str	r3, [r7, #12]
 800d284:	e00c      	b.n	800d2a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3308      	adds	r3, #8
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	e002      	b.n	800d294 <vListInsert+0x2e>
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	60fb      	str	r3, [r7, #12]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68ba      	ldr	r2, [r7, #8]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d2f6      	bcs.n	800d28e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	685a      	ldr	r2, [r3, #4]
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	601a      	str	r2, [r3, #0]
}
 800d2cc:	bf00      	nop
 800d2ce:	3714      	adds	r7, #20
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	6892      	ldr	r2, [r2, #8]
 800d2ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	6852      	ldr	r2, [r2, #4]
 800d2f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	429a      	cmp	r2, r3
 800d302:	d103      	bne.n	800d30c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689a      	ldr	r2, [r3, #8]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	1e5a      	subs	r2, r3, #1
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10a      	bne.n	800d356 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d352:	bf00      	nop
 800d354:	e7fe      	b.n	800d354 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d356:	f002 fc3d 	bl	800fbd4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d362:	68f9      	ldr	r1, [r7, #12]
 800d364:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d366:	fb01 f303 	mul.w	r3, r1, r3
 800d36a:	441a      	add	r2, r3
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2200      	movs	r2, #0
 800d374:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d386:	3b01      	subs	r3, #1
 800d388:	68f9      	ldr	r1, [r7, #12]
 800d38a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d38c:	fb01 f303 	mul.w	r3, r1, r3
 800d390:	441a      	add	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	22ff      	movs	r2, #255	; 0xff
 800d39a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	22ff      	movs	r2, #255	; 0xff
 800d3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d114      	bne.n	800d3d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	691b      	ldr	r3, [r3, #16]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d01a      	beq.n	800d3ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3310      	adds	r3, #16
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f001 fb49 	bl	800ea50 <xTaskRemoveFromEventList>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d012      	beq.n	800d3ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d3c4:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <xQueueGenericReset+0xcc>)
 800d3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ca:	601a      	str	r2, [r3, #0]
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	f3bf 8f6f 	isb	sy
 800d3d4:	e009      	b.n	800d3ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3310      	adds	r3, #16
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff fef2 	bl	800d1c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3324      	adds	r3, #36	; 0x24
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff feed 	bl	800d1c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d3ea:	f002 fc23 	bl	800fc34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d3ee:	2301      	movs	r3, #1
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	e000ed04 	.word	0xe000ed04

0800d3fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08e      	sub	sp, #56	; 0x38
 800d400:	af02      	add	r7, sp, #8
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10a      	bne.n	800d426 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10a      	bne.n	800d442 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d430:	f383 8811 	msr	BASEPRI, r3
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d43e:	bf00      	nop
 800d440:	e7fe      	b.n	800d440 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d002      	beq.n	800d44e <xQueueGenericCreateStatic+0x52>
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <xQueueGenericCreateStatic+0x56>
 800d44e:	2301      	movs	r3, #1
 800d450:	e000      	b.n	800d454 <xQueueGenericCreateStatic+0x58>
 800d452:	2300      	movs	r3, #0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10a      	bne.n	800d46e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	623b      	str	r3, [r7, #32]
}
 800d46a:	bf00      	nop
 800d46c:	e7fe      	b.n	800d46c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d102      	bne.n	800d47a <xQueueGenericCreateStatic+0x7e>
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d101      	bne.n	800d47e <xQueueGenericCreateStatic+0x82>
 800d47a:	2301      	movs	r3, #1
 800d47c:	e000      	b.n	800d480 <xQueueGenericCreateStatic+0x84>
 800d47e:	2300      	movs	r3, #0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d10a      	bne.n	800d49a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	61fb      	str	r3, [r7, #28]
}
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d49a:	2348      	movs	r3, #72	; 0x48
 800d49c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b48      	cmp	r3, #72	; 0x48
 800d4a2:	d00a      	beq.n	800d4ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	61bb      	str	r3, [r7, #24]
}
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00d      	beq.n	800d4e0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	68b9      	ldr	r1, [r7, #8]
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	f000 f843 	bl	800d566 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3730      	adds	r7, #48	; 0x30
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b08a      	sub	sp, #40	; 0x28
 800d4ee:	af02      	add	r7, sp, #8
 800d4f0:	60f8      	str	r0, [r7, #12]
 800d4f2:	60b9      	str	r1, [r7, #8]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10a      	bne.n	800d514 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	613b      	str	r3, [r7, #16]
}
 800d510:	bf00      	nop
 800d512:	e7fe      	b.n	800d512 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d102      	bne.n	800d520 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	61fb      	str	r3, [r7, #28]
 800d51e:	e004      	b.n	800d52a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	fb02 f303 	mul.w	r3, r2, r3
 800d528:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	3348      	adds	r3, #72	; 0x48
 800d52e:	4618      	mov	r0, r3
 800d530:	f002 fc72 	bl	800fe18 <pvPortMalloc>
 800d534:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00f      	beq.n	800d55c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	3348      	adds	r3, #72	; 0x48
 800d540:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d54a:	79fa      	ldrb	r2, [r7, #7]
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	4613      	mov	r3, r2
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	68b9      	ldr	r1, [r7, #8]
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f000 f805 	bl	800d566 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d55c:	69bb      	ldr	r3, [r7, #24]
	}
 800d55e:	4618      	mov	r0, r3
 800d560:	3720      	adds	r7, #32
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b084      	sub	sp, #16
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	607a      	str	r2, [r7, #4]
 800d572:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d103      	bne.n	800d582 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	69ba      	ldr	r2, [r7, #24]
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	e002      	b.n	800d588 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d594:	2101      	movs	r1, #1
 800d596:	69b8      	ldr	r0, [r7, #24]
 800d598:	f7ff fec8 	bl	800d32c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d59c:	bf00      	nop
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00e      	beq.n	800d5d0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 f838 	bl	800d640 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d5d0:	bf00      	nop
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	617b      	str	r3, [r7, #20]
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d5ea:	79fb      	ldrb	r3, [r7, #7]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	6939      	ldr	r1, [r7, #16]
 800d5f0:	6978      	ldr	r0, [r7, #20]
 800d5f2:	f7ff ff7a 	bl	800d4ea <xQueueGenericCreate>
 800d5f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f7ff ffd3 	bl	800d5a4 <prvInitialiseMutex>

		return pxNewQueue;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
	}
 800d600:	4618      	mov	r0, r3
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b088      	sub	sp, #32
 800d60c:	af02      	add	r7, sp, #8
 800d60e:	4603      	mov	r3, r0
 800d610:	6039      	str	r1, [r7, #0]
 800d612:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d614:	2301      	movs	r3, #1
 800d616:	617b      	str	r3, [r7, #20]
 800d618:	2300      	movs	r3, #0
 800d61a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d61c:	79fb      	ldrb	r3, [r7, #7]
 800d61e:	9300      	str	r3, [sp, #0]
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2200      	movs	r2, #0
 800d624:	6939      	ldr	r1, [r7, #16]
 800d626:	6978      	ldr	r0, [r7, #20]
 800d628:	f7ff fee8 	bl	800d3fc <xQueueGenericCreateStatic>
 800d62c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7ff ffb8 	bl	800d5a4 <prvInitialiseMutex>

		return pxNewQueue;
 800d634:	68fb      	ldr	r3, [r7, #12]
	}
 800d636:	4618      	mov	r0, r3
 800d638:	3718      	adds	r7, #24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08e      	sub	sp, #56	; 0x38
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d64e:	2300      	movs	r3, #0
 800d650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10a      	bne.n	800d672 <xQueueGenericSend+0x32>
	__asm volatile
 800d65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d66e:	bf00      	nop
 800d670:	e7fe      	b.n	800d670 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d103      	bne.n	800d680 <xQueueGenericSend+0x40>
 800d678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <xQueueGenericSend+0x44>
 800d680:	2301      	movs	r3, #1
 800d682:	e000      	b.n	800d686 <xQueueGenericSend+0x46>
 800d684:	2300      	movs	r3, #0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d10a      	bne.n	800d6a0 <xQueueGenericSend+0x60>
	__asm volatile
 800d68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68e:	f383 8811 	msr	BASEPRI, r3
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d69c:	bf00      	nop
 800d69e:	e7fe      	b.n	800d69e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d103      	bne.n	800d6ae <xQueueGenericSend+0x6e>
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d101      	bne.n	800d6b2 <xQueueGenericSend+0x72>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e000      	b.n	800d6b4 <xQueueGenericSend+0x74>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10a      	bne.n	800d6ce <xQueueGenericSend+0x8e>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	623b      	str	r3, [r7, #32]
}
 800d6ca:	bf00      	nop
 800d6cc:	e7fe      	b.n	800d6cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6ce:	f001 fb85 	bl	800eddc <xTaskGetSchedulerState>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d102      	bne.n	800d6de <xQueueGenericSend+0x9e>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d101      	bne.n	800d6e2 <xQueueGenericSend+0xa2>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e000      	b.n	800d6e4 <xQueueGenericSend+0xa4>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10a      	bne.n	800d6fe <xQueueGenericSend+0xbe>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	61fb      	str	r3, [r7, #28]
}
 800d6fa:	bf00      	nop
 800d6fc:	e7fe      	b.n	800d6fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6fe:	f002 fa69 	bl	800fbd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d302      	bcc.n	800d714 <xQueueGenericSend+0xd4>
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	2b02      	cmp	r3, #2
 800d712:	d129      	bne.n	800d768 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d714:	683a      	ldr	r2, [r7, #0]
 800d716:	68b9      	ldr	r1, [r7, #8]
 800d718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d71a:	f000 fb2b 	bl	800dd74 <prvCopyDataToQueue>
 800d71e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d724:	2b00      	cmp	r3, #0
 800d726:	d010      	beq.n	800d74a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72a:	3324      	adds	r3, #36	; 0x24
 800d72c:	4618      	mov	r0, r3
 800d72e:	f001 f98f 	bl	800ea50 <xTaskRemoveFromEventList>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d013      	beq.n	800d760 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d738:	4b3f      	ldr	r3, [pc, #252]	; (800d838 <xQueueGenericSend+0x1f8>)
 800d73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	e00a      	b.n	800d760 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d007      	beq.n	800d760 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d750:	4b39      	ldr	r3, [pc, #228]	; (800d838 <xQueueGenericSend+0x1f8>)
 800d752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d756:	601a      	str	r2, [r3, #0]
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d760:	f002 fa68 	bl	800fc34 <vPortExitCritical>
				return pdPASS;
 800d764:	2301      	movs	r3, #1
 800d766:	e063      	b.n	800d830 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d103      	bne.n	800d776 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d76e:	f002 fa61 	bl	800fc34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d772:	2300      	movs	r3, #0
 800d774:	e05c      	b.n	800d830 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d106      	bne.n	800d78a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d77c:	f107 0314 	add.w	r3, r7, #20
 800d780:	4618      	mov	r0, r3
 800d782:	f001 f9c7 	bl	800eb14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d786:	2301      	movs	r3, #1
 800d788:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d78a:	f002 fa53 	bl	800fc34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d78e:	f000 ff23 	bl	800e5d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d792:	f002 fa1f 	bl	800fbd4 <vPortEnterCritical>
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d79c:	b25b      	sxtb	r3, r3
 800d79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a2:	d103      	bne.n	800d7ac <xQueueGenericSend+0x16c>
 800d7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7b2:	b25b      	sxtb	r3, r3
 800d7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b8:	d103      	bne.n	800d7c2 <xQueueGenericSend+0x182>
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7c2:	f002 fa37 	bl	800fc34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7c6:	1d3a      	adds	r2, r7, #4
 800d7c8:	f107 0314 	add.w	r3, r7, #20
 800d7cc:	4611      	mov	r1, r2
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f001 f9b6 	bl	800eb40 <xTaskCheckForTimeOut>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d124      	bne.n	800d824 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d7da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7dc:	f000 fbc2 	bl	800df64 <prvIsQueueFull>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d018      	beq.n	800d818 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e8:	3310      	adds	r3, #16
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	4611      	mov	r1, r2
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f001 f8de 	bl	800e9b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d7f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7f6:	f000 fb4d 	bl	800de94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d7fa:	f000 fefb 	bl	800e5f4 <xTaskResumeAll>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	f47f af7c 	bne.w	800d6fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d806:	4b0c      	ldr	r3, [pc, #48]	; (800d838 <xQueueGenericSend+0x1f8>)
 800d808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d80c:	601a      	str	r2, [r3, #0]
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	e772      	b.n	800d6fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d81a:	f000 fb3b 	bl	800de94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d81e:	f000 fee9 	bl	800e5f4 <xTaskResumeAll>
 800d822:	e76c      	b.n	800d6fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d826:	f000 fb35 	bl	800de94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d82a:	f000 fee3 	bl	800e5f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d82e:	2300      	movs	r3, #0
		}
	}
}
 800d830:	4618      	mov	r0, r3
 800d832:	3738      	adds	r7, #56	; 0x38
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	e000ed04 	.word	0xe000ed04

0800d83c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b08e      	sub	sp, #56	; 0x38
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10a      	bne.n	800d86a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d103      	bne.n	800d878 <xQueueGenericSendFromISR+0x3c>
 800d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d874:	2b00      	cmp	r3, #0
 800d876:	d101      	bne.n	800d87c <xQueueGenericSendFromISR+0x40>
 800d878:	2301      	movs	r3, #1
 800d87a:	e000      	b.n	800d87e <xQueueGenericSendFromISR+0x42>
 800d87c:	2300      	movs	r3, #0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10a      	bne.n	800d898 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d886:	f383 8811 	msr	BASEPRI, r3
 800d88a:	f3bf 8f6f 	isb	sy
 800d88e:	f3bf 8f4f 	dsb	sy
 800d892:	623b      	str	r3, [r7, #32]
}
 800d894:	bf00      	nop
 800d896:	e7fe      	b.n	800d896 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d103      	bne.n	800d8a6 <xQueueGenericSendFromISR+0x6a>
 800d89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d101      	bne.n	800d8aa <xQueueGenericSendFromISR+0x6e>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e000      	b.n	800d8ac <xQueueGenericSendFromISR+0x70>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10a      	bne.n	800d8c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	61fb      	str	r3, [r7, #28]
}
 800d8c2:	bf00      	nop
 800d8c4:	e7fe      	b.n	800d8c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8c6:	f002 fa67 	bl	800fd98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d8ca:	f3ef 8211 	mrs	r2, BASEPRI
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	61ba      	str	r2, [r7, #24]
 800d8e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d8e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d302      	bcc.n	800d8f8 <xQueueGenericSendFromISR+0xbc>
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d12c      	bne.n	800d952 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d902:	683a      	ldr	r2, [r7, #0]
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d908:	f000 fa34 	bl	800dd74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d90c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d914:	d112      	bne.n	800d93c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d016      	beq.n	800d94c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	3324      	adds	r3, #36	; 0x24
 800d922:	4618      	mov	r0, r3
 800d924:	f001 f894 	bl	800ea50 <xTaskRemoveFromEventList>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00e      	beq.n	800d94c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00b      	beq.n	800d94c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	601a      	str	r2, [r3, #0]
 800d93a:	e007      	b.n	800d94c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d93c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d940:	3301      	adds	r3, #1
 800d942:	b2db      	uxtb	r3, r3
 800d944:	b25a      	sxtb	r2, r3
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d94c:	2301      	movs	r3, #1
 800d94e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d950:	e001      	b.n	800d956 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d952:	2300      	movs	r3, #0
 800d954:	637b      	str	r3, [r7, #52]	; 0x34
 800d956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d958:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d960:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d964:	4618      	mov	r0, r3
 800d966:	3738      	adds	r7, #56	; 0x38
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b08c      	sub	sp, #48	; 0x30
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d978:	2300      	movs	r3, #0
 800d97a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d982:	2b00      	cmp	r3, #0
 800d984:	d10a      	bne.n	800d99c <xQueueReceive+0x30>
	__asm volatile
 800d986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98a:	f383 8811 	msr	BASEPRI, r3
 800d98e:	f3bf 8f6f 	isb	sy
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	623b      	str	r3, [r7, #32]
}
 800d998:	bf00      	nop
 800d99a:	e7fe      	b.n	800d99a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d103      	bne.n	800d9aa <xQueueReceive+0x3e>
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d101      	bne.n	800d9ae <xQueueReceive+0x42>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e000      	b.n	800d9b0 <xQueueReceive+0x44>
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d10a      	bne.n	800d9ca <xQueueReceive+0x5e>
	__asm volatile
 800d9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b8:	f383 8811 	msr	BASEPRI, r3
 800d9bc:	f3bf 8f6f 	isb	sy
 800d9c0:	f3bf 8f4f 	dsb	sy
 800d9c4:	61fb      	str	r3, [r7, #28]
}
 800d9c6:	bf00      	nop
 800d9c8:	e7fe      	b.n	800d9c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9ca:	f001 fa07 	bl	800eddc <xTaskGetSchedulerState>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d102      	bne.n	800d9da <xQueueReceive+0x6e>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d101      	bne.n	800d9de <xQueueReceive+0x72>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e000      	b.n	800d9e0 <xQueueReceive+0x74>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10a      	bne.n	800d9fa <xQueueReceive+0x8e>
	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	61bb      	str	r3, [r7, #24]
}
 800d9f6:	bf00      	nop
 800d9f8:	e7fe      	b.n	800d9f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9fa:	f002 f8eb 	bl	800fbd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da06:	2b00      	cmp	r3, #0
 800da08:	d01f      	beq.n	800da4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da0a:	68b9      	ldr	r1, [r7, #8]
 800da0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da0e:	f000 fa1b 	bl	800de48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da14:	1e5a      	subs	r2, r3, #1
 800da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00f      	beq.n	800da42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	3310      	adds	r3, #16
 800da26:	4618      	mov	r0, r3
 800da28:	f001 f812 	bl	800ea50 <xTaskRemoveFromEventList>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d007      	beq.n	800da42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da32:	4b3d      	ldr	r3, [pc, #244]	; (800db28 <xQueueReceive+0x1bc>)
 800da34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da42:	f002 f8f7 	bl	800fc34 <vPortExitCritical>
				return pdPASS;
 800da46:	2301      	movs	r3, #1
 800da48:	e069      	b.n	800db1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d103      	bne.n	800da58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da50:	f002 f8f0 	bl	800fc34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da54:	2300      	movs	r3, #0
 800da56:	e062      	b.n	800db1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d106      	bne.n	800da6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da5e:	f107 0310 	add.w	r3, r7, #16
 800da62:	4618      	mov	r0, r3
 800da64:	f001 f856 	bl	800eb14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da68:	2301      	movs	r3, #1
 800da6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da6c:	f002 f8e2 	bl	800fc34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da70:	f000 fdb2 	bl	800e5d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da74:	f002 f8ae 	bl	800fbd4 <vPortEnterCritical>
 800da78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da7e:	b25b      	sxtb	r3, r3
 800da80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da84:	d103      	bne.n	800da8e <xQueueReceive+0x122>
 800da86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da88:	2200      	movs	r2, #0
 800da8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da94:	b25b      	sxtb	r3, r3
 800da96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9a:	d103      	bne.n	800daa4 <xQueueReceive+0x138>
 800da9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800daa4:	f002 f8c6 	bl	800fc34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800daa8:	1d3a      	adds	r2, r7, #4
 800daaa:	f107 0310 	add.w	r3, r7, #16
 800daae:	4611      	mov	r1, r2
 800dab0:	4618      	mov	r0, r3
 800dab2:	f001 f845 	bl	800eb40 <xTaskCheckForTimeOut>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d123      	bne.n	800db04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dabc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dabe:	f000 fa3b 	bl	800df38 <prvIsQueueEmpty>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d017      	beq.n	800daf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daca:	3324      	adds	r3, #36	; 0x24
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	4611      	mov	r1, r2
 800dad0:	4618      	mov	r0, r3
 800dad2:	f000 ff6d 	bl	800e9b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dad8:	f000 f9dc 	bl	800de94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dadc:	f000 fd8a 	bl	800e5f4 <xTaskResumeAll>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d189      	bne.n	800d9fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dae6:	4b10      	ldr	r3, [pc, #64]	; (800db28 <xQueueReceive+0x1bc>)
 800dae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daec:	601a      	str	r2, [r3, #0]
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	e780      	b.n	800d9fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800daf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dafa:	f000 f9cb 	bl	800de94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dafe:	f000 fd79 	bl	800e5f4 <xTaskResumeAll>
 800db02:	e77a      	b.n	800d9fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800db04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db06:	f000 f9c5 	bl	800de94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db0a:	f000 fd73 	bl	800e5f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db10:	f000 fa12 	bl	800df38 <prvIsQueueEmpty>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	f43f af6f 	beq.w	800d9fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3730      	adds	r7, #48	; 0x30
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08e      	sub	sp, #56	; 0x38
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800db36:	2300      	movs	r3, #0
 800db38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800db3e:	2300      	movs	r3, #0
 800db40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db44:	2b00      	cmp	r3, #0
 800db46:	d10a      	bne.n	800db5e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800db48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	623b      	str	r3, [r7, #32]
}
 800db5a:	bf00      	nop
 800db5c:	e7fe      	b.n	800db5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800db5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00a      	beq.n	800db7c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800db66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6a:	f383 8811 	msr	BASEPRI, r3
 800db6e:	f3bf 8f6f 	isb	sy
 800db72:	f3bf 8f4f 	dsb	sy
 800db76:	61fb      	str	r3, [r7, #28]
}
 800db78:	bf00      	nop
 800db7a:	e7fe      	b.n	800db7a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db7c:	f001 f92e 	bl	800eddc <xTaskGetSchedulerState>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d102      	bne.n	800db8c <xQueueSemaphoreTake+0x60>
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d101      	bne.n	800db90 <xQueueSemaphoreTake+0x64>
 800db8c:	2301      	movs	r3, #1
 800db8e:	e000      	b.n	800db92 <xQueueSemaphoreTake+0x66>
 800db90:	2300      	movs	r3, #0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10a      	bne.n	800dbac <xQueueSemaphoreTake+0x80>
	__asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	61bb      	str	r3, [r7, #24]
}
 800dba8:	bf00      	nop
 800dbaa:	e7fe      	b.n	800dbaa <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbac:	f002 f812 	bl	800fbd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d024      	beq.n	800dc06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbe:	1e5a      	subs	r2, r3, #1
 800dbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d104      	bne.n	800dbd6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800dbcc:	f001 fad0 	bl	800f170 <pvTaskIncrementMutexHeldCount>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00f      	beq.n	800dbfe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe0:	3310      	adds	r3, #16
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f000 ff34 	bl	800ea50 <xTaskRemoveFromEventList>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d007      	beq.n	800dbfe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbee:	4b54      	ldr	r3, [pc, #336]	; (800dd40 <xQueueSemaphoreTake+0x214>)
 800dbf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbf4:	601a      	str	r2, [r3, #0]
 800dbf6:	f3bf 8f4f 	dsb	sy
 800dbfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dbfe:	f002 f819 	bl	800fc34 <vPortExitCritical>
				return pdPASS;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e097      	b.n	800dd36 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d111      	bne.n	800dc30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00a      	beq.n	800dc28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc16:	f383 8811 	msr	BASEPRI, r3
 800dc1a:	f3bf 8f6f 	isb	sy
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	617b      	str	r3, [r7, #20]
}
 800dc24:	bf00      	nop
 800dc26:	e7fe      	b.n	800dc26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dc28:	f002 f804 	bl	800fc34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	e082      	b.n	800dd36 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d106      	bne.n	800dc44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 ff6a 	bl	800eb14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc40:	2301      	movs	r3, #1
 800dc42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc44:	f001 fff6 	bl	800fc34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc48:	f000 fcc6 	bl	800e5d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc4c:	f001 ffc2 	bl	800fbd4 <vPortEnterCritical>
 800dc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc56:	b25b      	sxtb	r3, r3
 800dc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc5c:	d103      	bne.n	800dc66 <xQueueSemaphoreTake+0x13a>
 800dc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc60:	2200      	movs	r2, #0
 800dc62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc6c:	b25b      	sxtb	r3, r3
 800dc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc72:	d103      	bne.n	800dc7c <xQueueSemaphoreTake+0x150>
 800dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc76:	2200      	movs	r2, #0
 800dc78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc7c:	f001 ffda 	bl	800fc34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc80:	463a      	mov	r2, r7
 800dc82:	f107 030c 	add.w	r3, r7, #12
 800dc86:	4611      	mov	r1, r2
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f000 ff59 	bl	800eb40 <xTaskCheckForTimeOut>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d132      	bne.n	800dcfa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc96:	f000 f94f 	bl	800df38 <prvIsQueueEmpty>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d026      	beq.n	800dcee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d109      	bne.n	800dcbc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800dca8:	f001 ff94 	bl	800fbd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800dcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f001 f8b1 	bl	800ee18 <xTaskPriorityInherit>
 800dcb6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dcb8:	f001 ffbc 	bl	800fc34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbe:	3324      	adds	r3, #36	; 0x24
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 fe73 	bl	800e9b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dccc:	f000 f8e2 	bl	800de94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dcd0:	f000 fc90 	bl	800e5f4 <xTaskResumeAll>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f47f af68 	bne.w	800dbac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dcdc:	4b18      	ldr	r3, [pc, #96]	; (800dd40 <xQueueSemaphoreTake+0x214>)
 800dcde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	f3bf 8f4f 	dsb	sy
 800dce8:	f3bf 8f6f 	isb	sy
 800dcec:	e75e      	b.n	800dbac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dcee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcf0:	f000 f8d0 	bl	800de94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcf4:	f000 fc7e 	bl	800e5f4 <xTaskResumeAll>
 800dcf8:	e758      	b.n	800dbac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dcfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcfc:	f000 f8ca 	bl	800de94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd00:	f000 fc78 	bl	800e5f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd06:	f000 f917 	bl	800df38 <prvIsQueueEmpty>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f43f af4d 	beq.w	800dbac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00d      	beq.n	800dd34 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dd18:	f001 ff5c 	bl	800fbd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dd1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd1e:	f000 f811 	bl	800dd44 <prvGetDisinheritPriorityAfterTimeout>
 800dd22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800dd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f001 f980 	bl	800f030 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dd30:	f001 ff80 	bl	800fc34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3738      	adds	r7, #56	; 0x38
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	e000ed04 	.word	0xe000ed04

0800dd44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d006      	beq.n	800dd62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f1c3 0307 	rsb	r3, r3, #7
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	e001      	b.n	800dd66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dd62:	2300      	movs	r3, #0
 800dd64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dd66:	68fb      	ldr	r3, [r7, #12]
	}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3714      	adds	r7, #20
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b086      	sub	sp, #24
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd80:	2300      	movs	r3, #0
 800dd82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10d      	bne.n	800ddae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d14d      	bne.n	800de36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f001 f8c0 	bl	800ef24 <xTaskPriorityDisinherit>
 800dda4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	605a      	str	r2, [r3, #4]
 800ddac:	e043      	b.n	800de36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d119      	bne.n	800dde8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6898      	ldr	r0, [r3, #8]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	68b9      	ldr	r1, [r7, #8]
 800ddc0:	f002 fc16 	bl	80105f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	689a      	ldr	r2, [r3, #8]
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddcc:	441a      	add	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	689a      	ldr	r2, [r3, #8]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d32b      	bcc.n	800de36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	609a      	str	r2, [r3, #8]
 800dde6:	e026      	b.n	800de36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	68d8      	ldr	r0, [r3, #12]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	68b9      	ldr	r1, [r7, #8]
 800ddf4:	f002 fbfc 	bl	80105f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	68da      	ldr	r2, [r3, #12]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de00:	425b      	negs	r3, r3
 800de02:	441a      	add	r2, r3
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	68da      	ldr	r2, [r3, #12]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	429a      	cmp	r2, r3
 800de12:	d207      	bcs.n	800de24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	685a      	ldr	r2, [r3, #4]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de1c:	425b      	negs	r3, r3
 800de1e:	441a      	add	r2, r3
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2b02      	cmp	r3, #2
 800de28:	d105      	bne.n	800de36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	3b01      	subs	r3, #1
 800de34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800de3e:	697b      	ldr	r3, [r7, #20]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3718      	adds	r7, #24
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de56:	2b00      	cmp	r3, #0
 800de58:	d018      	beq.n	800de8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68da      	ldr	r2, [r3, #12]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de62:	441a      	add	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68da      	ldr	r2, [r3, #12]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	429a      	cmp	r2, r3
 800de72:	d303      	bcc.n	800de7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	68d9      	ldr	r1, [r3, #12]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de84:	461a      	mov	r2, r3
 800de86:	6838      	ldr	r0, [r7, #0]
 800de88:	f002 fbb2 	bl	80105f0 <memcpy>
	}
}
 800de8c:	bf00      	nop
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de9c:	f001 fe9a 	bl	800fbd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dea6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dea8:	e011      	b.n	800dece <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d012      	beq.n	800ded8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	3324      	adds	r3, #36	; 0x24
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 fdca 	bl	800ea50 <xTaskRemoveFromEventList>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dec2:	f000 fe9f 	bl	800ec04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
 800dec8:	3b01      	subs	r3, #1
 800deca:	b2db      	uxtb	r3, r3
 800decc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	dce9      	bgt.n	800deaa <prvUnlockQueue+0x16>
 800ded6:	e000      	b.n	800deda <prvUnlockQueue+0x46>
					break;
 800ded8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	22ff      	movs	r2, #255	; 0xff
 800dede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dee2:	f001 fea7 	bl	800fc34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dee6:	f001 fe75 	bl	800fbd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800def0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800def2:	e011      	b.n	800df18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d012      	beq.n	800df22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	3310      	adds	r3, #16
 800df00:	4618      	mov	r0, r3
 800df02:	f000 fda5 	bl	800ea50 <xTaskRemoveFromEventList>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d001      	beq.n	800df10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df0c:	f000 fe7a 	bl	800ec04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df10:	7bbb      	ldrb	r3, [r7, #14]
 800df12:	3b01      	subs	r3, #1
 800df14:	b2db      	uxtb	r3, r3
 800df16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	dce9      	bgt.n	800def4 <prvUnlockQueue+0x60>
 800df20:	e000      	b.n	800df24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	22ff      	movs	r2, #255	; 0xff
 800df28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df2c:	f001 fe82 	bl	800fc34 <vPortExitCritical>
}
 800df30:	bf00      	nop
 800df32:	3710      	adds	r7, #16
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df40:	f001 fe48 	bl	800fbd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d102      	bne.n	800df52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df4c:	2301      	movs	r3, #1
 800df4e:	60fb      	str	r3, [r7, #12]
 800df50:	e001      	b.n	800df56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df52:	2300      	movs	r3, #0
 800df54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df56:	f001 fe6d 	bl	800fc34 <vPortExitCritical>

	return xReturn;
 800df5a:	68fb      	ldr	r3, [r7, #12]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df6c:	f001 fe32 	bl	800fbd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df78:	429a      	cmp	r2, r3
 800df7a:	d102      	bne.n	800df82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df7c:	2301      	movs	r3, #1
 800df7e:	60fb      	str	r3, [r7, #12]
 800df80:	e001      	b.n	800df86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df82:	2300      	movs	r3, #0
 800df84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df86:	f001 fe55 	bl	800fc34 <vPortExitCritical>

	return xReturn;
 800df8a:	68fb      	ldr	r3, [r7, #12]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60fb      	str	r3, [r7, #12]
 800dfa2:	e014      	b.n	800dfce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dfa4:	4a0f      	ldr	r2, [pc, #60]	; (800dfe4 <vQueueAddToRegistry+0x50>)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10b      	bne.n	800dfc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dfb0:	490c      	ldr	r1, [pc, #48]	; (800dfe4 <vQueueAddToRegistry+0x50>)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dfba:	4a0a      	ldr	r2, [pc, #40]	; (800dfe4 <vQueueAddToRegistry+0x50>)
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	00db      	lsls	r3, r3, #3
 800dfc0:	4413      	add	r3, r2
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dfc6:	e006      	b.n	800dfd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2b07      	cmp	r3, #7
 800dfd2:	d9e7      	bls.n	800dfa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dfd4:	bf00      	nop
 800dfd6:	bf00      	nop
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	20002708 	.word	0x20002708

0800dfe8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b086      	sub	sp, #24
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dff8:	f001 fdec 	bl	800fbd4 <vPortEnterCritical>
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e002:	b25b      	sxtb	r3, r3
 800e004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e008:	d103      	bne.n	800e012 <vQueueWaitForMessageRestricted+0x2a>
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e018:	b25b      	sxtb	r3, r3
 800e01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e01e:	d103      	bne.n	800e028 <vQueueWaitForMessageRestricted+0x40>
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	2200      	movs	r2, #0
 800e024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e028:	f001 fe04 	bl	800fc34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e030:	2b00      	cmp	r3, #0
 800e032:	d106      	bne.n	800e042 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	3324      	adds	r3, #36	; 0x24
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	68b9      	ldr	r1, [r7, #8]
 800e03c:	4618      	mov	r0, r3
 800e03e:	f000 fcdb 	bl	800e9f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e042:	6978      	ldr	r0, [r7, #20]
 800e044:	f7ff ff26 	bl	800de94 <prvUnlockQueue>
	}
 800e048:	bf00      	nop
 800e04a:	3718      	adds	r7, #24
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e050:	b580      	push	{r7, lr}
 800e052:	b08e      	sub	sp, #56	; 0x38
 800e054:	af04      	add	r7, sp, #16
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10a      	bne.n	800e07a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e068:	f383 8811 	msr	BASEPRI, r3
 800e06c:	f3bf 8f6f 	isb	sy
 800e070:	f3bf 8f4f 	dsb	sy
 800e074:	623b      	str	r3, [r7, #32]
}
 800e076:	bf00      	nop
 800e078:	e7fe      	b.n	800e078 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d10a      	bne.n	800e096 <xTaskCreateStatic+0x46>
	__asm volatile
 800e080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	61fb      	str	r3, [r7, #28]
}
 800e092:	bf00      	nop
 800e094:	e7fe      	b.n	800e094 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e096:	23b0      	movs	r3, #176	; 0xb0
 800e098:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	2bb0      	cmp	r3, #176	; 0xb0
 800e09e:	d00a      	beq.n	800e0b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	61bb      	str	r3, [r7, #24]
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01e      	beq.n	800e0fa <xTaskCreateStatic+0xaa>
 800e0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d01b      	beq.n	800e0fa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	2202      	movs	r2, #2
 800e0d0:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	9303      	str	r3, [sp, #12]
 800e0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0da:	9302      	str	r3, [sp, #8]
 800e0dc:	f107 0314 	add.w	r3, r7, #20
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	68b9      	ldr	r1, [r7, #8]
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 f851 	bl	800e194 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0f4:	f000 f8e4 	bl	800e2c0 <prvAddNewTaskToReadyList>
 800e0f8:	e001      	b.n	800e0fe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e0fe:	697b      	ldr	r3, [r7, #20]
	}
 800e100:	4618      	mov	r0, r3
 800e102:	3728      	adds	r7, #40	; 0x28
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08c      	sub	sp, #48	; 0x30
 800e10c:	af04      	add	r7, sp, #16
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	603b      	str	r3, [r7, #0]
 800e114:	4613      	mov	r3, r2
 800e116:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e118:	88fb      	ldrh	r3, [r7, #6]
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4618      	mov	r0, r3
 800e11e:	f001 fe7b 	bl	800fe18 <pvPortMalloc>
 800e122:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00e      	beq.n	800e148 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800e12a:	20b0      	movs	r0, #176	; 0xb0
 800e12c:	f001 fe74 	bl	800fe18 <pvPortMalloc>
 800e130:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d003      	beq.n	800e140 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	697a      	ldr	r2, [r7, #20]
 800e13c:	631a      	str	r2, [r3, #48]	; 0x30
 800e13e:	e005      	b.n	800e14c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e140:	6978      	ldr	r0, [r7, #20]
 800e142:	f001 ff2d 	bl	800ffa0 <vPortFree>
 800e146:	e001      	b.n	800e14c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e148:	2300      	movs	r3, #0
 800e14a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d017      	beq.n	800e182 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	2200      	movs	r2, #0
 800e156:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e15a:	88fa      	ldrh	r2, [r7, #6]
 800e15c:	2300      	movs	r3, #0
 800e15e:	9303      	str	r3, [sp, #12]
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	9302      	str	r3, [sp, #8]
 800e164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e166:	9301      	str	r3, [sp, #4]
 800e168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	68b9      	ldr	r1, [r7, #8]
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 f80f 	bl	800e194 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e176:	69f8      	ldr	r0, [r7, #28]
 800e178:	f000 f8a2 	bl	800e2c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e17c:	2301      	movs	r3, #1
 800e17e:	61bb      	str	r3, [r7, #24]
 800e180:	e002      	b.n	800e188 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e182:	f04f 33ff 	mov.w	r3, #4294967295
 800e186:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e188:	69bb      	ldr	r3, [r7, #24]
	}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3720      	adds	r7, #32
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
	...

0800e194 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b088      	sub	sp, #32
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
 800e1a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	4413      	add	r3, r2
 800e1b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	f023 0307 	bic.w	r3, r3, #7
 800e1ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	f003 0307 	and.w	r3, r3, #7
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00a      	beq.n	800e1dc <prvInitialiseNewTask+0x48>
	__asm volatile
 800e1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ca:	f383 8811 	msr	BASEPRI, r3
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	617b      	str	r3, [r7, #20]
}
 800e1d8:	bf00      	nop
 800e1da:	e7fe      	b.n	800e1da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1dc:	2300      	movs	r3, #0
 800e1de:	61fb      	str	r3, [r7, #28]
 800e1e0:	e012      	b.n	800e208 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1e2:	68ba      	ldr	r2, [r7, #8]
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	7819      	ldrb	r1, [r3, #0]
 800e1ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	3334      	adds	r3, #52	; 0x34
 800e1f2:	460a      	mov	r2, r1
 800e1f4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800e1f6:	68ba      	ldr	r2, [r7, #8]
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d006      	beq.n	800e210 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	3301      	adds	r3, #1
 800e206:	61fb      	str	r3, [r7, #28]
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	2b1f      	cmp	r3, #31
 800e20c:	d9e9      	bls.n	800e1e2 <prvInitialiseNewTask+0x4e>
 800e20e:	e000      	b.n	800e212 <prvInitialiseNewTask+0x7e>
		{
			break;
 800e210:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e214:	2200      	movs	r2, #0
 800e216:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21c:	2b06      	cmp	r3, #6
 800e21e:	d901      	bls.n	800e224 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e220:	2306      	movs	r3, #6
 800e222:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e228:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e22e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800e230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e232:	2200      	movs	r2, #0
 800e234:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e238:	3304      	adds	r3, #4
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe ffe2 	bl	800d204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e242:	3318      	adds	r3, #24
 800e244:	4618      	mov	r0, r3
 800e246:	f7fe ffdd 	bl	800d204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e24e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e252:	f1c3 0207 	rsb	r2, r3, #7
 800e256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e258:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e25e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e262:	2200      	movs	r2, #0
 800e264:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	335c      	adds	r3, #92	; 0x5c
 800e274:	224c      	movs	r2, #76	; 0x4c
 800e276:	2100      	movs	r1, #0
 800e278:	4618      	mov	r0, r3
 800e27a:	f002 f92f 	bl	80104dc <memset>
 800e27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e280:	4a0c      	ldr	r2, [pc, #48]	; (800e2b4 <prvInitialiseNewTask+0x120>)
 800e282:	661a      	str	r2, [r3, #96]	; 0x60
 800e284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e286:	4a0c      	ldr	r2, [pc, #48]	; (800e2b8 <prvInitialiseNewTask+0x124>)
 800e288:	665a      	str	r2, [r3, #100]	; 0x64
 800e28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28c:	4a0b      	ldr	r2, [pc, #44]	; (800e2bc <prvInitialiseNewTask+0x128>)
 800e28e:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e290:	683a      	ldr	r2, [r7, #0]
 800e292:	68f9      	ldr	r1, [r7, #12]
 800e294:	69b8      	ldr	r0, [r7, #24]
 800e296:	f001 fb6d 	bl	800f974 <pxPortInitialiseStack>
 800e29a:	4602      	mov	r2, r0
 800e29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d002      	beq.n	800e2ac <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2ac:	bf00      	nop
 800e2ae:	3720      	adds	r7, #32
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	20002d90 	.word	0x20002d90
 800e2b8:	20002df8 	.word	0x20002df8
 800e2bc:	20002e60 	.word	0x20002e60

0800e2c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e2c8:	f001 fc84 	bl	800fbd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2cc:	4b2a      	ldr	r3, [pc, #168]	; (800e378 <prvAddNewTaskToReadyList+0xb8>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	4a29      	ldr	r2, [pc, #164]	; (800e378 <prvAddNewTaskToReadyList+0xb8>)
 800e2d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2d6:	4b29      	ldr	r3, [pc, #164]	; (800e37c <prvAddNewTaskToReadyList+0xbc>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d109      	bne.n	800e2f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e2de:	4a27      	ldr	r2, [pc, #156]	; (800e37c <prvAddNewTaskToReadyList+0xbc>)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2e4:	4b24      	ldr	r3, [pc, #144]	; (800e378 <prvAddNewTaskToReadyList+0xb8>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d110      	bne.n	800e30e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e2ec:	f000 fcae 	bl	800ec4c <prvInitialiseTaskLists>
 800e2f0:	e00d      	b.n	800e30e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e2f2:	4b23      	ldr	r3, [pc, #140]	; (800e380 <prvAddNewTaskToReadyList+0xc0>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d109      	bne.n	800e30e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2fa:	4b20      	ldr	r3, [pc, #128]	; (800e37c <prvAddNewTaskToReadyList+0xbc>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	429a      	cmp	r2, r3
 800e306:	d802      	bhi.n	800e30e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e308:	4a1c      	ldr	r2, [pc, #112]	; (800e37c <prvAddNewTaskToReadyList+0xbc>)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e30e:	4b1d      	ldr	r3, [pc, #116]	; (800e384 <prvAddNewTaskToReadyList+0xc4>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	3301      	adds	r3, #1
 800e314:	4a1b      	ldr	r2, [pc, #108]	; (800e384 <prvAddNewTaskToReadyList+0xc4>)
 800e316:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e31c:	2201      	movs	r2, #1
 800e31e:	409a      	lsls	r2, r3
 800e320:	4b19      	ldr	r3, [pc, #100]	; (800e388 <prvAddNewTaskToReadyList+0xc8>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4313      	orrs	r3, r2
 800e326:	4a18      	ldr	r2, [pc, #96]	; (800e388 <prvAddNewTaskToReadyList+0xc8>)
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e32e:	4613      	mov	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4a15      	ldr	r2, [pc, #84]	; (800e38c <prvAddNewTaskToReadyList+0xcc>)
 800e338:	441a      	add	r2, r3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	3304      	adds	r3, #4
 800e33e:	4619      	mov	r1, r3
 800e340:	4610      	mov	r0, r2
 800e342:	f7fe ff6c 	bl	800d21e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e346:	f001 fc75 	bl	800fc34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e34a:	4b0d      	ldr	r3, [pc, #52]	; (800e380 <prvAddNewTaskToReadyList+0xc0>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00e      	beq.n	800e370 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e352:	4b0a      	ldr	r3, [pc, #40]	; (800e37c <prvAddNewTaskToReadyList+0xbc>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d207      	bcs.n	800e370 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e360:	4b0b      	ldr	r3, [pc, #44]	; (800e390 <prvAddNewTaskToReadyList+0xd0>)
 800e362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e366:	601a      	str	r2, [r3, #0]
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e370:	bf00      	nop
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	20002848 	.word	0x20002848
 800e37c:	20002748 	.word	0x20002748
 800e380:	20002854 	.word	0x20002854
 800e384:	20002864 	.word	0x20002864
 800e388:	20002850 	.word	0x20002850
 800e38c:	2000274c 	.word	0x2000274c
 800e390:	e000ed04 	.word	0xe000ed04

0800e394 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e394:	b580      	push	{r7, lr}
 800e396:	b08a      	sub	sp, #40	; 0x28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d10a      	bne.n	800e3be <vTaskDelayUntil+0x2a>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	617b      	str	r3, [r7, #20]
}
 800e3ba:	bf00      	nop
 800e3bc:	e7fe      	b.n	800e3bc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10a      	bne.n	800e3da <vTaskDelayUntil+0x46>
	__asm volatile
 800e3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c8:	f383 8811 	msr	BASEPRI, r3
 800e3cc:	f3bf 8f6f 	isb	sy
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	613b      	str	r3, [r7, #16]
}
 800e3d6:	bf00      	nop
 800e3d8:	e7fe      	b.n	800e3d8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e3da:	4b2a      	ldr	r3, [pc, #168]	; (800e484 <vTaskDelayUntil+0xf0>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00a      	beq.n	800e3f8 <vTaskDelayUntil+0x64>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	60fb      	str	r3, [r7, #12]
}
 800e3f4:	bf00      	nop
 800e3f6:	e7fe      	b.n	800e3f6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e3f8:	f000 f8ee 	bl	800e5d8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e3fc:	4b22      	ldr	r3, [pc, #136]	; (800e488 <vTaskDelayUntil+0xf4>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	4413      	add	r3, r2
 800e40a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	6a3a      	ldr	r2, [r7, #32]
 800e412:	429a      	cmp	r2, r3
 800e414:	d20b      	bcs.n	800e42e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	69fa      	ldr	r2, [r7, #28]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d211      	bcs.n	800e444 <vTaskDelayUntil+0xb0>
 800e420:	69fa      	ldr	r2, [r7, #28]
 800e422:	6a3b      	ldr	r3, [r7, #32]
 800e424:	429a      	cmp	r2, r3
 800e426:	d90d      	bls.n	800e444 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e428:	2301      	movs	r3, #1
 800e42a:	627b      	str	r3, [r7, #36]	; 0x24
 800e42c:	e00a      	b.n	800e444 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	69fa      	ldr	r2, [r7, #28]
 800e434:	429a      	cmp	r2, r3
 800e436:	d303      	bcc.n	800e440 <vTaskDelayUntil+0xac>
 800e438:	69fa      	ldr	r2, [r7, #28]
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d901      	bls.n	800e444 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e440:	2301      	movs	r3, #1
 800e442:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	69fa      	ldr	r2, [r7, #28]
 800e448:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d006      	beq.n	800e45e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e450:	69fa      	ldr	r2, [r7, #28]
 800e452:	6a3b      	ldr	r3, [r7, #32]
 800e454:	1ad3      	subs	r3, r2, r3
 800e456:	2100      	movs	r1, #0
 800e458:	4618      	mov	r0, r3
 800e45a:	f000 fe9d 	bl	800f198 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e45e:	f000 f8c9 	bl	800e5f4 <xTaskResumeAll>
 800e462:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d107      	bne.n	800e47a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e46a:	4b08      	ldr	r3, [pc, #32]	; (800e48c <vTaskDelayUntil+0xf8>)
 800e46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e470:	601a      	str	r2, [r3, #0]
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e47a:	bf00      	nop
 800e47c:	3728      	adds	r7, #40	; 0x28
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	20002870 	.word	0x20002870
 800e488:	2000284c 	.word	0x2000284c
 800e48c:	e000ed04 	.word	0xe000ed04

0800e490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e498:	2300      	movs	r3, #0
 800e49a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d017      	beq.n	800e4d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e4a2:	4b13      	ldr	r3, [pc, #76]	; (800e4f0 <vTaskDelay+0x60>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00a      	beq.n	800e4c0 <vTaskDelay+0x30>
	__asm volatile
 800e4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	60bb      	str	r3, [r7, #8]
}
 800e4bc:	bf00      	nop
 800e4be:	e7fe      	b.n	800e4be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e4c0:	f000 f88a 	bl	800e5d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 fe66 	bl	800f198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e4cc:	f000 f892 	bl	800e5f4 <xTaskResumeAll>
 800e4d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d107      	bne.n	800e4e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e4d8:	4b06      	ldr	r3, [pc, #24]	; (800e4f4 <vTaskDelay+0x64>)
 800e4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4e8:	bf00      	nop
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	20002870 	.word	0x20002870
 800e4f4:	e000ed04 	.word	0xe000ed04

0800e4f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08a      	sub	sp, #40	; 0x28
 800e4fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e4fe:	2300      	movs	r3, #0
 800e500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e502:	2300      	movs	r3, #0
 800e504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e506:	463a      	mov	r2, r7
 800e508:	1d39      	adds	r1, r7, #4
 800e50a:	f107 0308 	add.w	r3, r7, #8
 800e50e:	4618      	mov	r0, r3
 800e510:	f7f5 f8aa 	bl	8003668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e514:	6839      	ldr	r1, [r7, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	9202      	str	r2, [sp, #8]
 800e51c:	9301      	str	r3, [sp, #4]
 800e51e:	2300      	movs	r3, #0
 800e520:	9300      	str	r3, [sp, #0]
 800e522:	2300      	movs	r3, #0
 800e524:	460a      	mov	r2, r1
 800e526:	4924      	ldr	r1, [pc, #144]	; (800e5b8 <vTaskStartScheduler+0xc0>)
 800e528:	4824      	ldr	r0, [pc, #144]	; (800e5bc <vTaskStartScheduler+0xc4>)
 800e52a:	f7ff fd91 	bl	800e050 <xTaskCreateStatic>
 800e52e:	4603      	mov	r3, r0
 800e530:	4a23      	ldr	r2, [pc, #140]	; (800e5c0 <vTaskStartScheduler+0xc8>)
 800e532:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e534:	4b22      	ldr	r3, [pc, #136]	; (800e5c0 <vTaskStartScheduler+0xc8>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e53c:	2301      	movs	r3, #1
 800e53e:	617b      	str	r3, [r7, #20]
 800e540:	e001      	b.n	800e546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e542:	2300      	movs	r3, #0
 800e544:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d102      	bne.n	800e552 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e54c:	f000 fe8a 	bl	800f264 <xTimerCreateTimerTask>
 800e550:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	2b01      	cmp	r3, #1
 800e556:	d11b      	bne.n	800e590 <vTaskStartScheduler+0x98>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	613b      	str	r3, [r7, #16]
}
 800e56a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e56c:	4b15      	ldr	r3, [pc, #84]	; (800e5c4 <vTaskStartScheduler+0xcc>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	335c      	adds	r3, #92	; 0x5c
 800e572:	4a15      	ldr	r2, [pc, #84]	; (800e5c8 <vTaskStartScheduler+0xd0>)
 800e574:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e576:	4b15      	ldr	r3, [pc, #84]	; (800e5cc <vTaskStartScheduler+0xd4>)
 800e578:	f04f 32ff 	mov.w	r2, #4294967295
 800e57c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e57e:	4b14      	ldr	r3, [pc, #80]	; (800e5d0 <vTaskStartScheduler+0xd8>)
 800e580:	2201      	movs	r2, #1
 800e582:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e584:	4b13      	ldr	r3, [pc, #76]	; (800e5d4 <vTaskStartScheduler+0xdc>)
 800e586:	2200      	movs	r2, #0
 800e588:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e58a:	f001 fa81 	bl	800fa90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e58e:	e00e      	b.n	800e5ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e596:	d10a      	bne.n	800e5ae <vTaskStartScheduler+0xb6>
	__asm volatile
 800e598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	60fb      	str	r3, [r7, #12]
}
 800e5aa:	bf00      	nop
 800e5ac:	e7fe      	b.n	800e5ac <vTaskStartScheduler+0xb4>
}
 800e5ae:	bf00      	nop
 800e5b0:	3718      	adds	r7, #24
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	08010c0c 	.word	0x08010c0c
 800e5bc:	0800ec1d 	.word	0x0800ec1d
 800e5c0:	2000286c 	.word	0x2000286c
 800e5c4:	20002748 	.word	0x20002748
 800e5c8:	2000010c 	.word	0x2000010c
 800e5cc:	20002868 	.word	0x20002868
 800e5d0:	20002854 	.word	0x20002854
 800e5d4:	2000284c 	.word	0x2000284c

0800e5d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e5d8:	b480      	push	{r7}
 800e5da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e5dc:	4b04      	ldr	r3, [pc, #16]	; (800e5f0 <vTaskSuspendAll+0x18>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	4a03      	ldr	r2, [pc, #12]	; (800e5f0 <vTaskSuspendAll+0x18>)
 800e5e4:	6013      	str	r3, [r2, #0]
}
 800e5e6:	bf00      	nop
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr
 800e5f0:	20002870 	.word	0x20002870

0800e5f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e5fe:	2300      	movs	r3, #0
 800e600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e602:	4b41      	ldr	r3, [pc, #260]	; (800e708 <xTaskResumeAll+0x114>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d10a      	bne.n	800e620 <xTaskResumeAll+0x2c>
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	603b      	str	r3, [r7, #0]
}
 800e61c:	bf00      	nop
 800e61e:	e7fe      	b.n	800e61e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e620:	f001 fad8 	bl	800fbd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e624:	4b38      	ldr	r3, [pc, #224]	; (800e708 <xTaskResumeAll+0x114>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	3b01      	subs	r3, #1
 800e62a:	4a37      	ldr	r2, [pc, #220]	; (800e708 <xTaskResumeAll+0x114>)
 800e62c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e62e:	4b36      	ldr	r3, [pc, #216]	; (800e708 <xTaskResumeAll+0x114>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d161      	bne.n	800e6fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e636:	4b35      	ldr	r3, [pc, #212]	; (800e70c <xTaskResumeAll+0x118>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d05d      	beq.n	800e6fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e63e:	e02e      	b.n	800e69e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e640:	4b33      	ldr	r3, [pc, #204]	; (800e710 <xTaskResumeAll+0x11c>)
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	3318      	adds	r3, #24
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fe fe43 	bl	800d2d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3304      	adds	r3, #4
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fe3e 	bl	800d2d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e660:	2201      	movs	r2, #1
 800e662:	409a      	lsls	r2, r3
 800e664:	4b2b      	ldr	r3, [pc, #172]	; (800e714 <xTaskResumeAll+0x120>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4313      	orrs	r3, r2
 800e66a:	4a2a      	ldr	r2, [pc, #168]	; (800e714 <xTaskResumeAll+0x120>)
 800e66c:	6013      	str	r3, [r2, #0]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e672:	4613      	mov	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4413      	add	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4a27      	ldr	r2, [pc, #156]	; (800e718 <xTaskResumeAll+0x124>)
 800e67c:	441a      	add	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	3304      	adds	r3, #4
 800e682:	4619      	mov	r1, r3
 800e684:	4610      	mov	r0, r2
 800e686:	f7fe fdca 	bl	800d21e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e68e:	4b23      	ldr	r3, [pc, #140]	; (800e71c <xTaskResumeAll+0x128>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e694:	429a      	cmp	r2, r3
 800e696:	d302      	bcc.n	800e69e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e698:	4b21      	ldr	r3, [pc, #132]	; (800e720 <xTaskResumeAll+0x12c>)
 800e69a:	2201      	movs	r2, #1
 800e69c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e69e:	4b1c      	ldr	r3, [pc, #112]	; (800e710 <xTaskResumeAll+0x11c>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1cc      	bne.n	800e640 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d001      	beq.n	800e6b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e6ac:	f000 fb70 	bl	800ed90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e6b0:	4b1c      	ldr	r3, [pc, #112]	; (800e724 <xTaskResumeAll+0x130>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d010      	beq.n	800e6de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e6bc:	f000 f858 	bl	800e770 <xTaskIncrementTick>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d002      	beq.n	800e6cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e6c6:	4b16      	ldr	r3, [pc, #88]	; (800e720 <xTaskResumeAll+0x12c>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1f1      	bne.n	800e6bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e6d8:	4b12      	ldr	r3, [pc, #72]	; (800e724 <xTaskResumeAll+0x130>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e6de:	4b10      	ldr	r3, [pc, #64]	; (800e720 <xTaskResumeAll+0x12c>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d009      	beq.n	800e6fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e6ea:	4b0f      	ldr	r3, [pc, #60]	; (800e728 <xTaskResumeAll+0x134>)
 800e6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f0:	601a      	str	r2, [r3, #0]
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6fa:	f001 fa9b 	bl	800fc34 <vPortExitCritical>

	return xAlreadyYielded;
 800e6fe:	68bb      	ldr	r3, [r7, #8]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	20002870 	.word	0x20002870
 800e70c:	20002848 	.word	0x20002848
 800e710:	20002808 	.word	0x20002808
 800e714:	20002850 	.word	0x20002850
 800e718:	2000274c 	.word	0x2000274c
 800e71c:	20002748 	.word	0x20002748
 800e720:	2000285c 	.word	0x2000285c
 800e724:	20002858 	.word	0x20002858
 800e728:	e000ed04 	.word	0xe000ed04

0800e72c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e732:	4b05      	ldr	r3, [pc, #20]	; (800e748 <xTaskGetTickCount+0x1c>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e738:	687b      	ldr	r3, [r7, #4]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	370c      	adds	r7, #12
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	2000284c 	.word	0x2000284c

0800e74c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e752:	f001 fb21 	bl	800fd98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e756:	2300      	movs	r3, #0
 800e758:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e75a:	4b04      	ldr	r3, [pc, #16]	; (800e76c <xTaskGetTickCountFromISR+0x20>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e760:	683b      	ldr	r3, [r7, #0]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	2000284c 	.word	0x2000284c

0800e770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b086      	sub	sp, #24
 800e774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e776:	2300      	movs	r3, #0
 800e778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e77a:	4b51      	ldr	r3, [pc, #324]	; (800e8c0 <xTaskIncrementTick+0x150>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f040 808d 	bne.w	800e89e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e784:	4b4f      	ldr	r3, [pc, #316]	; (800e8c4 <xTaskIncrementTick+0x154>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	3301      	adds	r3, #1
 800e78a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e78c:	4a4d      	ldr	r2, [pc, #308]	; (800e8c4 <xTaskIncrementTick+0x154>)
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d120      	bne.n	800e7da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e798:	4b4b      	ldr	r3, [pc, #300]	; (800e8c8 <xTaskIncrementTick+0x158>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00a      	beq.n	800e7b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a6:	f383 8811 	msr	BASEPRI, r3
 800e7aa:	f3bf 8f6f 	isb	sy
 800e7ae:	f3bf 8f4f 	dsb	sy
 800e7b2:	603b      	str	r3, [r7, #0]
}
 800e7b4:	bf00      	nop
 800e7b6:	e7fe      	b.n	800e7b6 <xTaskIncrementTick+0x46>
 800e7b8:	4b43      	ldr	r3, [pc, #268]	; (800e8c8 <xTaskIncrementTick+0x158>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	60fb      	str	r3, [r7, #12]
 800e7be:	4b43      	ldr	r3, [pc, #268]	; (800e8cc <xTaskIncrementTick+0x15c>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4a41      	ldr	r2, [pc, #260]	; (800e8c8 <xTaskIncrementTick+0x158>)
 800e7c4:	6013      	str	r3, [r2, #0]
 800e7c6:	4a41      	ldr	r2, [pc, #260]	; (800e8cc <xTaskIncrementTick+0x15c>)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	6013      	str	r3, [r2, #0]
 800e7cc:	4b40      	ldr	r3, [pc, #256]	; (800e8d0 <xTaskIncrementTick+0x160>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	4a3f      	ldr	r2, [pc, #252]	; (800e8d0 <xTaskIncrementTick+0x160>)
 800e7d4:	6013      	str	r3, [r2, #0]
 800e7d6:	f000 fadb 	bl	800ed90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e7da:	4b3e      	ldr	r3, [pc, #248]	; (800e8d4 <xTaskIncrementTick+0x164>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	693a      	ldr	r2, [r7, #16]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d34d      	bcc.n	800e880 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7e4:	4b38      	ldr	r3, [pc, #224]	; (800e8c8 <xTaskIncrementTick+0x158>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d101      	bne.n	800e7f2 <xTaskIncrementTick+0x82>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e000      	b.n	800e7f4 <xTaskIncrementTick+0x84>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d004      	beq.n	800e802 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7f8:	4b36      	ldr	r3, [pc, #216]	; (800e8d4 <xTaskIncrementTick+0x164>)
 800e7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e7fe:	601a      	str	r2, [r3, #0]
					break;
 800e800:	e03e      	b.n	800e880 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e802:	4b31      	ldr	r3, [pc, #196]	; (800e8c8 <xTaskIncrementTick+0x158>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	68db      	ldr	r3, [r3, #12]
 800e80a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e812:	693a      	ldr	r2, [r7, #16]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	429a      	cmp	r2, r3
 800e818:	d203      	bcs.n	800e822 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e81a:	4a2e      	ldr	r2, [pc, #184]	; (800e8d4 <xTaskIncrementTick+0x164>)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6013      	str	r3, [r2, #0]
						break;
 800e820:	e02e      	b.n	800e880 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	3304      	adds	r3, #4
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe fd56 	bl	800d2d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e830:	2b00      	cmp	r3, #0
 800e832:	d004      	beq.n	800e83e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	3318      	adds	r3, #24
 800e838:	4618      	mov	r0, r3
 800e83a:	f7fe fd4d 	bl	800d2d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e842:	2201      	movs	r2, #1
 800e844:	409a      	lsls	r2, r3
 800e846:	4b24      	ldr	r3, [pc, #144]	; (800e8d8 <xTaskIncrementTick+0x168>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4313      	orrs	r3, r2
 800e84c:	4a22      	ldr	r2, [pc, #136]	; (800e8d8 <xTaskIncrementTick+0x168>)
 800e84e:	6013      	str	r3, [r2, #0]
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e854:	4613      	mov	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4a1f      	ldr	r2, [pc, #124]	; (800e8dc <xTaskIncrementTick+0x16c>)
 800e85e:	441a      	add	r2, r3
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	3304      	adds	r3, #4
 800e864:	4619      	mov	r1, r3
 800e866:	4610      	mov	r0, r2
 800e868:	f7fe fcd9 	bl	800d21e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e870:	4b1b      	ldr	r3, [pc, #108]	; (800e8e0 <xTaskIncrementTick+0x170>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e876:	429a      	cmp	r2, r3
 800e878:	d3b4      	bcc.n	800e7e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e87a:	2301      	movs	r3, #1
 800e87c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e87e:	e7b1      	b.n	800e7e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e880:	4b17      	ldr	r3, [pc, #92]	; (800e8e0 <xTaskIncrementTick+0x170>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e886:	4915      	ldr	r1, [pc, #84]	; (800e8dc <xTaskIncrementTick+0x16c>)
 800e888:	4613      	mov	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	4413      	add	r3, r2
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	440b      	add	r3, r1
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d907      	bls.n	800e8a8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800e898:	2301      	movs	r3, #1
 800e89a:	617b      	str	r3, [r7, #20]
 800e89c:	e004      	b.n	800e8a8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e89e:	4b11      	ldr	r3, [pc, #68]	; (800e8e4 <xTaskIncrementTick+0x174>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	4a0f      	ldr	r2, [pc, #60]	; (800e8e4 <xTaskIncrementTick+0x174>)
 800e8a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e8a8:	4b0f      	ldr	r3, [pc, #60]	; (800e8e8 <xTaskIncrementTick+0x178>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d001      	beq.n	800e8b4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e8b4:	697b      	ldr	r3, [r7, #20]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3718      	adds	r7, #24
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20002870 	.word	0x20002870
 800e8c4:	2000284c 	.word	0x2000284c
 800e8c8:	20002800 	.word	0x20002800
 800e8cc:	20002804 	.word	0x20002804
 800e8d0:	20002860 	.word	0x20002860
 800e8d4:	20002868 	.word	0x20002868
 800e8d8:	20002850 	.word	0x20002850
 800e8dc:	2000274c 	.word	0x2000274c
 800e8e0:	20002748 	.word	0x20002748
 800e8e4:	20002858 	.word	0x20002858
 800e8e8:	2000285c 	.word	0x2000285c

0800e8ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b087      	sub	sp, #28
 800e8f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8f2:	4b29      	ldr	r3, [pc, #164]	; (800e998 <vTaskSwitchContext+0xac>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d003      	beq.n	800e902 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e8fa:	4b28      	ldr	r3, [pc, #160]	; (800e99c <vTaskSwitchContext+0xb0>)
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e900:	e044      	b.n	800e98c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e902:	4b26      	ldr	r3, [pc, #152]	; (800e99c <vTaskSwitchContext+0xb0>)
 800e904:	2200      	movs	r2, #0
 800e906:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e908:	4b25      	ldr	r3, [pc, #148]	; (800e9a0 <vTaskSwitchContext+0xb4>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	fab3 f383 	clz	r3, r3
 800e914:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e916:	7afb      	ldrb	r3, [r7, #11]
 800e918:	f1c3 031f 	rsb	r3, r3, #31
 800e91c:	617b      	str	r3, [r7, #20]
 800e91e:	4921      	ldr	r1, [pc, #132]	; (800e9a4 <vTaskSwitchContext+0xb8>)
 800e920:	697a      	ldr	r2, [r7, #20]
 800e922:	4613      	mov	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4413      	add	r3, r2
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	440b      	add	r3, r1
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10a      	bne.n	800e948 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	607b      	str	r3, [r7, #4]
}
 800e944:	bf00      	nop
 800e946:	e7fe      	b.n	800e946 <vTaskSwitchContext+0x5a>
 800e948:	697a      	ldr	r2, [r7, #20]
 800e94a:	4613      	mov	r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4413      	add	r3, r2
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	4a14      	ldr	r2, [pc, #80]	; (800e9a4 <vTaskSwitchContext+0xb8>)
 800e954:	4413      	add	r3, r2
 800e956:	613b      	str	r3, [r7, #16]
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	685a      	ldr	r2, [r3, #4]
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	605a      	str	r2, [r3, #4]
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	685a      	ldr	r2, [r3, #4]
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	3308      	adds	r3, #8
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d104      	bne.n	800e978 <vTaskSwitchContext+0x8c>
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	685a      	ldr	r2, [r3, #4]
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	605a      	str	r2, [r3, #4]
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	4a0a      	ldr	r2, [pc, #40]	; (800e9a8 <vTaskSwitchContext+0xbc>)
 800e980:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e982:	4b09      	ldr	r3, [pc, #36]	; (800e9a8 <vTaskSwitchContext+0xbc>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	335c      	adds	r3, #92	; 0x5c
 800e988:	4a08      	ldr	r2, [pc, #32]	; (800e9ac <vTaskSwitchContext+0xc0>)
 800e98a:	6013      	str	r3, [r2, #0]
}
 800e98c:	bf00      	nop
 800e98e:	371c      	adds	r7, #28
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr
 800e998:	20002870 	.word	0x20002870
 800e99c:	2000285c 	.word	0x2000285c
 800e9a0:	20002850 	.word	0x20002850
 800e9a4:	2000274c 	.word	0x2000274c
 800e9a8:	20002748 	.word	0x20002748
 800e9ac:	2000010c 	.word	0x2000010c

0800e9b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d10a      	bne.n	800e9d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	60fb      	str	r3, [r7, #12]
}
 800e9d2:	bf00      	nop
 800e9d4:	e7fe      	b.n	800e9d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9d6:	4b07      	ldr	r3, [pc, #28]	; (800e9f4 <vTaskPlaceOnEventList+0x44>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	3318      	adds	r3, #24
 800e9dc:	4619      	mov	r1, r3
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7fe fc41 	bl	800d266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9e4:	2101      	movs	r1, #1
 800e9e6:	6838      	ldr	r0, [r7, #0]
 800e9e8:	f000 fbd6 	bl	800f198 <prvAddCurrentTaskToDelayedList>
}
 800e9ec:	bf00      	nop
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	20002748 	.word	0x20002748

0800e9f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d10a      	bne.n	800ea20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ea0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	617b      	str	r3, [r7, #20]
}
 800ea1c:	bf00      	nop
 800ea1e:	e7fe      	b.n	800ea1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea20:	4b0a      	ldr	r3, [pc, #40]	; (800ea4c <vTaskPlaceOnEventListRestricted+0x54>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	3318      	adds	r3, #24
 800ea26:	4619      	mov	r1, r3
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f7fe fbf8 	bl	800d21e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d002      	beq.n	800ea3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ea34:	f04f 33ff 	mov.w	r3, #4294967295
 800ea38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ea3a:	6879      	ldr	r1, [r7, #4]
 800ea3c:	68b8      	ldr	r0, [r7, #8]
 800ea3e:	f000 fbab 	bl	800f198 <prvAddCurrentTaskToDelayedList>
	}
 800ea42:	bf00      	nop
 800ea44:	3718      	adds	r7, #24
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20002748 	.word	0x20002748

0800ea50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b086      	sub	sp, #24
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d10a      	bne.n	800ea7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ea66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6a:	f383 8811 	msr	BASEPRI, r3
 800ea6e:	f3bf 8f6f 	isb	sy
 800ea72:	f3bf 8f4f 	dsb	sy
 800ea76:	60fb      	str	r3, [r7, #12]
}
 800ea78:	bf00      	nop
 800ea7a:	e7fe      	b.n	800ea7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	3318      	adds	r3, #24
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fe fc29 	bl	800d2d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea86:	4b1d      	ldr	r3, [pc, #116]	; (800eafc <xTaskRemoveFromEventList+0xac>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d11c      	bne.n	800eac8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	3304      	adds	r3, #4
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fe fc20 	bl	800d2d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	409a      	lsls	r2, r3
 800eaa0:	4b17      	ldr	r3, [pc, #92]	; (800eb00 <xTaskRemoveFromEventList+0xb0>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	4a16      	ldr	r2, [pc, #88]	; (800eb00 <xTaskRemoveFromEventList+0xb0>)
 800eaa8:	6013      	str	r3, [r2, #0]
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaae:	4613      	mov	r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4413      	add	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	4a13      	ldr	r2, [pc, #76]	; (800eb04 <xTaskRemoveFromEventList+0xb4>)
 800eab8:	441a      	add	r2, r3
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	3304      	adds	r3, #4
 800eabe:	4619      	mov	r1, r3
 800eac0:	4610      	mov	r0, r2
 800eac2:	f7fe fbac 	bl	800d21e <vListInsertEnd>
 800eac6:	e005      	b.n	800ead4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	3318      	adds	r3, #24
 800eacc:	4619      	mov	r1, r3
 800eace:	480e      	ldr	r0, [pc, #56]	; (800eb08 <xTaskRemoveFromEventList+0xb8>)
 800ead0:	f7fe fba5 	bl	800d21e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead8:	4b0c      	ldr	r3, [pc, #48]	; (800eb0c <xTaskRemoveFromEventList+0xbc>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eade:	429a      	cmp	r2, r3
 800eae0:	d905      	bls.n	800eaee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eae2:	2301      	movs	r3, #1
 800eae4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eae6:	4b0a      	ldr	r3, [pc, #40]	; (800eb10 <xTaskRemoveFromEventList+0xc0>)
 800eae8:	2201      	movs	r2, #1
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	e001      	b.n	800eaf2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800eaf2:	697b      	ldr	r3, [r7, #20]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3718      	adds	r7, #24
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	20002870 	.word	0x20002870
 800eb00:	20002850 	.word	0x20002850
 800eb04:	2000274c 	.word	0x2000274c
 800eb08:	20002808 	.word	0x20002808
 800eb0c:	20002748 	.word	0x20002748
 800eb10:	2000285c 	.word	0x2000285c

0800eb14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb1c:	4b06      	ldr	r3, [pc, #24]	; (800eb38 <vTaskInternalSetTimeOutState+0x24>)
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb24:	4b05      	ldr	r3, [pc, #20]	; (800eb3c <vTaskInternalSetTimeOutState+0x28>)
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	605a      	str	r2, [r3, #4]
}
 800eb2c:	bf00      	nop
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	20002860 	.word	0x20002860
 800eb3c:	2000284c 	.word	0x2000284c

0800eb40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b088      	sub	sp, #32
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10a      	bne.n	800eb66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	613b      	str	r3, [r7, #16]
}
 800eb62:	bf00      	nop
 800eb64:	e7fe      	b.n	800eb64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10a      	bne.n	800eb82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb70:	f383 8811 	msr	BASEPRI, r3
 800eb74:	f3bf 8f6f 	isb	sy
 800eb78:	f3bf 8f4f 	dsb	sy
 800eb7c:	60fb      	str	r3, [r7, #12]
}
 800eb7e:	bf00      	nop
 800eb80:	e7fe      	b.n	800eb80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eb82:	f001 f827 	bl	800fbd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb86:	4b1d      	ldr	r3, [pc, #116]	; (800ebfc <xTaskCheckForTimeOut+0xbc>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	69ba      	ldr	r2, [r7, #24]
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb9e:	d102      	bne.n	800eba6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eba0:	2300      	movs	r3, #0
 800eba2:	61fb      	str	r3, [r7, #28]
 800eba4:	e023      	b.n	800ebee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	4b15      	ldr	r3, [pc, #84]	; (800ec00 <xTaskCheckForTimeOut+0xc0>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d007      	beq.n	800ebc2 <xTaskCheckForTimeOut+0x82>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	69ba      	ldr	r2, [r7, #24]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d302      	bcc.n	800ebc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	61fb      	str	r3, [r7, #28]
 800ebc0:	e015      	b.n	800ebee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	697a      	ldr	r2, [r7, #20]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d20b      	bcs.n	800ebe4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	1ad2      	subs	r2, r2, r3
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7ff ff9b 	bl	800eb14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	61fb      	str	r3, [r7, #28]
 800ebe2:	e004      	b.n	800ebee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ebea:	2301      	movs	r3, #1
 800ebec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ebee:	f001 f821 	bl	800fc34 <vPortExitCritical>

	return xReturn;
 800ebf2:	69fb      	ldr	r3, [r7, #28]
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3720      	adds	r7, #32
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	2000284c 	.word	0x2000284c
 800ec00:	20002860 	.word	0x20002860

0800ec04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec04:	b480      	push	{r7}
 800ec06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec08:	4b03      	ldr	r3, [pc, #12]	; (800ec18 <vTaskMissedYield+0x14>)
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	601a      	str	r2, [r3, #0]
}
 800ec0e:	bf00      	nop
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	2000285c 	.word	0x2000285c

0800ec1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec24:	f000 f852 	bl	800eccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec28:	4b06      	ldr	r3, [pc, #24]	; (800ec44 <prvIdleTask+0x28>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d9f9      	bls.n	800ec24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ec30:	4b05      	ldr	r3, [pc, #20]	; (800ec48 <prvIdleTask+0x2c>)
 800ec32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec36:	601a      	str	r2, [r3, #0]
 800ec38:	f3bf 8f4f 	dsb	sy
 800ec3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ec40:	e7f0      	b.n	800ec24 <prvIdleTask+0x8>
 800ec42:	bf00      	nop
 800ec44:	2000274c 	.word	0x2000274c
 800ec48:	e000ed04 	.word	0xe000ed04

0800ec4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec52:	2300      	movs	r3, #0
 800ec54:	607b      	str	r3, [r7, #4]
 800ec56:	e00c      	b.n	800ec72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4413      	add	r3, r2
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	4a12      	ldr	r2, [pc, #72]	; (800ecac <prvInitialiseTaskLists+0x60>)
 800ec64:	4413      	add	r3, r2
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fe faac 	bl	800d1c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	607b      	str	r3, [r7, #4]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b06      	cmp	r3, #6
 800ec76:	d9ef      	bls.n	800ec58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec78:	480d      	ldr	r0, [pc, #52]	; (800ecb0 <prvInitialiseTaskLists+0x64>)
 800ec7a:	f7fe faa3 	bl	800d1c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec7e:	480d      	ldr	r0, [pc, #52]	; (800ecb4 <prvInitialiseTaskLists+0x68>)
 800ec80:	f7fe faa0 	bl	800d1c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec84:	480c      	ldr	r0, [pc, #48]	; (800ecb8 <prvInitialiseTaskLists+0x6c>)
 800ec86:	f7fe fa9d 	bl	800d1c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec8a:	480c      	ldr	r0, [pc, #48]	; (800ecbc <prvInitialiseTaskLists+0x70>)
 800ec8c:	f7fe fa9a 	bl	800d1c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec90:	480b      	ldr	r0, [pc, #44]	; (800ecc0 <prvInitialiseTaskLists+0x74>)
 800ec92:	f7fe fa97 	bl	800d1c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec96:	4b0b      	ldr	r3, [pc, #44]	; (800ecc4 <prvInitialiseTaskLists+0x78>)
 800ec98:	4a05      	ldr	r2, [pc, #20]	; (800ecb0 <prvInitialiseTaskLists+0x64>)
 800ec9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec9c:	4b0a      	ldr	r3, [pc, #40]	; (800ecc8 <prvInitialiseTaskLists+0x7c>)
 800ec9e:	4a05      	ldr	r2, [pc, #20]	; (800ecb4 <prvInitialiseTaskLists+0x68>)
 800eca0:	601a      	str	r2, [r3, #0]
}
 800eca2:	bf00      	nop
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	2000274c 	.word	0x2000274c
 800ecb0:	200027d8 	.word	0x200027d8
 800ecb4:	200027ec 	.word	0x200027ec
 800ecb8:	20002808 	.word	0x20002808
 800ecbc:	2000281c 	.word	0x2000281c
 800ecc0:	20002834 	.word	0x20002834
 800ecc4:	20002800 	.word	0x20002800
 800ecc8:	20002804 	.word	0x20002804

0800eccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecd2:	e019      	b.n	800ed08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ecd4:	f000 ff7e 	bl	800fbd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ecd8:	4b10      	ldr	r3, [pc, #64]	; (800ed1c <prvCheckTasksWaitingTermination+0x50>)
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	3304      	adds	r3, #4
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fe faf7 	bl	800d2d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ecea:	4b0d      	ldr	r3, [pc, #52]	; (800ed20 <prvCheckTasksWaitingTermination+0x54>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	4a0b      	ldr	r2, [pc, #44]	; (800ed20 <prvCheckTasksWaitingTermination+0x54>)
 800ecf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ecf4:	4b0b      	ldr	r3, [pc, #44]	; (800ed24 <prvCheckTasksWaitingTermination+0x58>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	4a0a      	ldr	r2, [pc, #40]	; (800ed24 <prvCheckTasksWaitingTermination+0x58>)
 800ecfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ecfe:	f000 ff99 	bl	800fc34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f810 	bl	800ed28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed08:	4b06      	ldr	r3, [pc, #24]	; (800ed24 <prvCheckTasksWaitingTermination+0x58>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d1e1      	bne.n	800ecd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed10:	bf00      	nop
 800ed12:	bf00      	nop
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	2000281c 	.word	0x2000281c
 800ed20:	20002848 	.word	0x20002848
 800ed24:	20002830 	.word	0x20002830

0800ed28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	335c      	adds	r3, #92	; 0x5c
 800ed34:	4618      	mov	r0, r3
 800ed36:	f001 fbd9 	bl	80104ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d108      	bne.n	800ed56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f001 f929 	bl	800ffa0 <vPortFree>
				vPortFree( pxTCB );
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f001 f926 	bl	800ffa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed54:	e018      	b.n	800ed88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d103      	bne.n	800ed68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f001 f91d 	bl	800ffa0 <vPortFree>
	}
 800ed66:	e00f      	b.n	800ed88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d00a      	beq.n	800ed88 <prvDeleteTCB+0x60>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	60fb      	str	r3, [r7, #12]
}
 800ed84:	bf00      	nop
 800ed86:	e7fe      	b.n	800ed86 <prvDeleteTCB+0x5e>
	}
 800ed88:	bf00      	nop
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed96:	4b0f      	ldr	r3, [pc, #60]	; (800edd4 <prvResetNextTaskUnblockTime+0x44>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d101      	bne.n	800eda4 <prvResetNextTaskUnblockTime+0x14>
 800eda0:	2301      	movs	r3, #1
 800eda2:	e000      	b.n	800eda6 <prvResetNextTaskUnblockTime+0x16>
 800eda4:	2300      	movs	r3, #0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d004      	beq.n	800edb4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800edaa:	4b0b      	ldr	r3, [pc, #44]	; (800edd8 <prvResetNextTaskUnblockTime+0x48>)
 800edac:	f04f 32ff 	mov.w	r2, #4294967295
 800edb0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800edb2:	e008      	b.n	800edc6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800edb4:	4b07      	ldr	r3, [pc, #28]	; (800edd4 <prvResetNextTaskUnblockTime+0x44>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	4a05      	ldr	r2, [pc, #20]	; (800edd8 <prvResetNextTaskUnblockTime+0x48>)
 800edc4:	6013      	str	r3, [r2, #0]
}
 800edc6:	bf00      	nop
 800edc8:	370c      	adds	r7, #12
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	20002800 	.word	0x20002800
 800edd8:	20002868 	.word	0x20002868

0800eddc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ede2:	4b0b      	ldr	r3, [pc, #44]	; (800ee10 <xTaskGetSchedulerState+0x34>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d102      	bne.n	800edf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800edea:	2301      	movs	r3, #1
 800edec:	607b      	str	r3, [r7, #4]
 800edee:	e008      	b.n	800ee02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edf0:	4b08      	ldr	r3, [pc, #32]	; (800ee14 <xTaskGetSchedulerState+0x38>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d102      	bne.n	800edfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800edf8:	2302      	movs	r3, #2
 800edfa:	607b      	str	r3, [r7, #4]
 800edfc:	e001      	b.n	800ee02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800edfe:	2300      	movs	r3, #0
 800ee00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee02:	687b      	ldr	r3, [r7, #4]
	}
 800ee04:	4618      	mov	r0, r3
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	20002854 	.word	0x20002854
 800ee14:	20002870 	.word	0x20002870

0800ee18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee24:	2300      	movs	r3, #0
 800ee26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d06e      	beq.n	800ef0c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee32:	4b39      	ldr	r3, [pc, #228]	; (800ef18 <xTaskPriorityInherit+0x100>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d25e      	bcs.n	800eefa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	699b      	ldr	r3, [r3, #24]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	db06      	blt.n	800ee52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee44:	4b34      	ldr	r3, [pc, #208]	; (800ef18 <xTaskPriorityInherit+0x100>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4a:	f1c3 0207 	rsb	r2, r3, #7
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	6959      	ldr	r1, [r3, #20]
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	4413      	add	r3, r2
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	4a2e      	ldr	r2, [pc, #184]	; (800ef1c <xTaskPriorityInherit+0x104>)
 800ee64:	4413      	add	r3, r2
 800ee66:	4299      	cmp	r1, r3
 800ee68:	d101      	bne.n	800ee6e <xTaskPriorityInherit+0x56>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	e000      	b.n	800ee70 <xTaskPriorityInherit+0x58>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d03a      	beq.n	800eeea <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	3304      	adds	r3, #4
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fe fa2d 	bl	800d2d8 <uxListRemove>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d115      	bne.n	800eeb0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee88:	4924      	ldr	r1, [pc, #144]	; (800ef1c <xTaskPriorityInherit+0x104>)
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	4413      	add	r3, r2
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	440b      	add	r3, r1
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d10a      	bne.n	800eeb0 <xTaskPriorityInherit+0x98>
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee9e:	2201      	movs	r2, #1
 800eea0:	fa02 f303 	lsl.w	r3, r2, r3
 800eea4:	43da      	mvns	r2, r3
 800eea6:	4b1e      	ldr	r3, [pc, #120]	; (800ef20 <xTaskPriorityInherit+0x108>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4013      	ands	r3, r2
 800eeac:	4a1c      	ldr	r2, [pc, #112]	; (800ef20 <xTaskPriorityInherit+0x108>)
 800eeae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eeb0:	4b19      	ldr	r3, [pc, #100]	; (800ef18 <xTaskPriorityInherit+0x100>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebe:	2201      	movs	r2, #1
 800eec0:	409a      	lsls	r2, r3
 800eec2:	4b17      	ldr	r3, [pc, #92]	; (800ef20 <xTaskPriorityInherit+0x108>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4313      	orrs	r3, r2
 800eec8:	4a15      	ldr	r2, [pc, #84]	; (800ef20 <xTaskPriorityInherit+0x108>)
 800eeca:	6013      	str	r3, [r2, #0]
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed0:	4613      	mov	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4413      	add	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4a10      	ldr	r2, [pc, #64]	; (800ef1c <xTaskPriorityInherit+0x104>)
 800eeda:	441a      	add	r2, r3
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	3304      	adds	r3, #4
 800eee0:	4619      	mov	r1, r3
 800eee2:	4610      	mov	r0, r2
 800eee4:	f7fe f99b 	bl	800d21e <vListInsertEnd>
 800eee8:	e004      	b.n	800eef4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eeea:	4b0b      	ldr	r3, [pc, #44]	; (800ef18 <xTaskPriorityInherit+0x100>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eef4:	2301      	movs	r3, #1
 800eef6:	60fb      	str	r3, [r7, #12]
 800eef8:	e008      	b.n	800ef0c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eefe:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <xTaskPriorityInherit+0x100>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d201      	bcs.n	800ef0c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
	}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	20002748 	.word	0x20002748
 800ef1c:	2000274c 	.word	0x2000274c
 800ef20:	20002850 	.word	0x20002850

0800ef24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b086      	sub	sp, #24
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef30:	2300      	movs	r3, #0
 800ef32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d06e      	beq.n	800f018 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef3a:	4b3a      	ldr	r3, [pc, #232]	; (800f024 <xTaskPriorityDisinherit+0x100>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	693a      	ldr	r2, [r7, #16]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d00a      	beq.n	800ef5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ef44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	60fb      	str	r3, [r7, #12]
}
 800ef56:	bf00      	nop
 800ef58:	e7fe      	b.n	800ef58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d10a      	bne.n	800ef78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ef62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef66:	f383 8811 	msr	BASEPRI, r3
 800ef6a:	f3bf 8f6f 	isb	sy
 800ef6e:	f3bf 8f4f 	dsb	sy
 800ef72:	60bb      	str	r3, [r7, #8]
}
 800ef74:	bf00      	nop
 800ef76:	e7fe      	b.n	800ef76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef7c:	1e5a      	subs	r2, r3, #1
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d044      	beq.n	800f018 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d140      	bne.n	800f018 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	3304      	adds	r3, #4
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fe f99c 	bl	800d2d8 <uxListRemove>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d115      	bne.n	800efd2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efaa:	491f      	ldr	r1, [pc, #124]	; (800f028 <xTaskPriorityDisinherit+0x104>)
 800efac:	4613      	mov	r3, r2
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	4413      	add	r3, r2
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	440b      	add	r3, r1
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d10a      	bne.n	800efd2 <xTaskPriorityDisinherit+0xae>
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc0:	2201      	movs	r2, #1
 800efc2:	fa02 f303 	lsl.w	r3, r2, r3
 800efc6:	43da      	mvns	r2, r3
 800efc8:	4b18      	ldr	r3, [pc, #96]	; (800f02c <xTaskPriorityDisinherit+0x108>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4013      	ands	r3, r2
 800efce:	4a17      	ldr	r2, [pc, #92]	; (800f02c <xTaskPriorityDisinherit+0x108>)
 800efd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efde:	f1c3 0207 	rsb	r2, r3, #7
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efea:	2201      	movs	r2, #1
 800efec:	409a      	lsls	r2, r3
 800efee:	4b0f      	ldr	r3, [pc, #60]	; (800f02c <xTaskPriorityDisinherit+0x108>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4313      	orrs	r3, r2
 800eff4:	4a0d      	ldr	r2, [pc, #52]	; (800f02c <xTaskPriorityDisinherit+0x108>)
 800eff6:	6013      	str	r3, [r2, #0]
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800effc:	4613      	mov	r3, r2
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4a08      	ldr	r2, [pc, #32]	; (800f028 <xTaskPriorityDisinherit+0x104>)
 800f006:	441a      	add	r2, r3
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	3304      	adds	r3, #4
 800f00c:	4619      	mov	r1, r3
 800f00e:	4610      	mov	r0, r2
 800f010:	f7fe f905 	bl	800d21e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f014:	2301      	movs	r3, #1
 800f016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f018:	697b      	ldr	r3, [r7, #20]
	}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3718      	adds	r7, #24
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	20002748 	.word	0x20002748
 800f028:	2000274c 	.word	0x2000274c
 800f02c:	20002850 	.word	0x20002850

0800f030 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f030:	b580      	push	{r7, lr}
 800f032:	b088      	sub	sp, #32
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f03e:	2301      	movs	r3, #1
 800f040:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	f000 8088 	beq.w	800f15a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d10a      	bne.n	800f068 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f056:	f383 8811 	msr	BASEPRI, r3
 800f05a:	f3bf 8f6f 	isb	sy
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	60fb      	str	r3, [r7, #12]
}
 800f064:	bf00      	nop
 800f066:	e7fe      	b.n	800f066 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f06c:	683a      	ldr	r2, [r7, #0]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d902      	bls.n	800f078 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	61fb      	str	r3, [r7, #28]
 800f076:	e002      	b.n	800f07e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f07c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f082:	69fa      	ldr	r2, [r7, #28]
 800f084:	429a      	cmp	r2, r3
 800f086:	d068      	beq.n	800f15a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f08c:	697a      	ldr	r2, [r7, #20]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d163      	bne.n	800f15a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f092:	4b34      	ldr	r3, [pc, #208]	; (800f164 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	69ba      	ldr	r2, [r7, #24]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d10a      	bne.n	800f0b2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800f09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a0:	f383 8811 	msr	BASEPRI, r3
 800f0a4:	f3bf 8f6f 	isb	sy
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	60bb      	str	r3, [r7, #8]
}
 800f0ae:	bf00      	nop
 800f0b0:	e7fe      	b.n	800f0b0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	69fa      	ldr	r2, [r7, #28]
 800f0bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	699b      	ldr	r3, [r3, #24]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	db04      	blt.n	800f0d0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	f1c3 0207 	rsb	r2, r3, #7
 800f0cc:	69bb      	ldr	r3, [r7, #24]
 800f0ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	6959      	ldr	r1, [r3, #20]
 800f0d4:	693a      	ldr	r2, [r7, #16]
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	4413      	add	r3, r2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4a22      	ldr	r2, [pc, #136]	; (800f168 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f0e0:	4413      	add	r3, r2
 800f0e2:	4299      	cmp	r1, r3
 800f0e4:	d101      	bne.n	800f0ea <vTaskPriorityDisinheritAfterTimeout+0xba>
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	e000      	b.n	800f0ec <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d034      	beq.n	800f15a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fe f8ef 	bl	800d2d8 <uxListRemove>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d115      	bne.n	800f12c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f104:	4918      	ldr	r1, [pc, #96]	; (800f168 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f106:	4613      	mov	r3, r2
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	4413      	add	r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	440b      	add	r3, r1
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d10a      	bne.n	800f12c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f11a:	2201      	movs	r2, #1
 800f11c:	fa02 f303 	lsl.w	r3, r2, r3
 800f120:	43da      	mvns	r2, r3
 800f122:	4b12      	ldr	r3, [pc, #72]	; (800f16c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4013      	ands	r3, r2
 800f128:	4a10      	ldr	r2, [pc, #64]	; (800f16c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f12a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f130:	2201      	movs	r2, #1
 800f132:	409a      	lsls	r2, r3
 800f134:	4b0d      	ldr	r3, [pc, #52]	; (800f16c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4313      	orrs	r3, r2
 800f13a:	4a0c      	ldr	r2, [pc, #48]	; (800f16c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f13c:	6013      	str	r3, [r2, #0]
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f142:	4613      	mov	r3, r2
 800f144:	009b      	lsls	r3, r3, #2
 800f146:	4413      	add	r3, r2
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	4a07      	ldr	r2, [pc, #28]	; (800f168 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f14c:	441a      	add	r2, r3
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	3304      	adds	r3, #4
 800f152:	4619      	mov	r1, r3
 800f154:	4610      	mov	r0, r2
 800f156:	f7fe f862 	bl	800d21e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f15a:	bf00      	nop
 800f15c:	3720      	adds	r7, #32
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	20002748 	.word	0x20002748
 800f168:	2000274c 	.word	0x2000274c
 800f16c:	20002850 	.word	0x20002850

0800f170 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800f170:	b480      	push	{r7}
 800f172:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f174:	4b07      	ldr	r3, [pc, #28]	; (800f194 <pvTaskIncrementMutexHeldCount+0x24>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d004      	beq.n	800f186 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f17c:	4b05      	ldr	r3, [pc, #20]	; (800f194 <pvTaskIncrementMutexHeldCount+0x24>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f182:	3201      	adds	r2, #1
 800f184:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800f186:	4b03      	ldr	r3, [pc, #12]	; (800f194 <pvTaskIncrementMutexHeldCount+0x24>)
 800f188:	681b      	ldr	r3, [r3, #0]
	}
 800f18a:	4618      	mov	r0, r3
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr
 800f194:	20002748 	.word	0x20002748

0800f198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f1a2:	4b29      	ldr	r3, [pc, #164]	; (800f248 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1a8:	4b28      	ldr	r3, [pc, #160]	; (800f24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7fe f892 	bl	800d2d8 <uxListRemove>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d10b      	bne.n	800f1d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800f1ba:	4b24      	ldr	r3, [pc, #144]	; (800f24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800f1c6:	43da      	mvns	r2, r3
 800f1c8:	4b21      	ldr	r3, [pc, #132]	; (800f250 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4013      	ands	r3, r2
 800f1ce:	4a20      	ldr	r2, [pc, #128]	; (800f250 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d8:	d10a      	bne.n	800f1f0 <prvAddCurrentTaskToDelayedList+0x58>
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d007      	beq.n	800f1f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1e0:	4b1a      	ldr	r3, [pc, #104]	; (800f24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	3304      	adds	r3, #4
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	481a      	ldr	r0, [pc, #104]	; (800f254 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f1ea:	f7fe f818 	bl	800d21e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1ee:	e026      	b.n	800f23e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1f8:	4b14      	ldr	r3, [pc, #80]	; (800f24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	68ba      	ldr	r2, [r7, #8]
 800f1fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f200:	68ba      	ldr	r2, [r7, #8]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	429a      	cmp	r2, r3
 800f206:	d209      	bcs.n	800f21c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f208:	4b13      	ldr	r3, [pc, #76]	; (800f258 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	3304      	adds	r3, #4
 800f212:	4619      	mov	r1, r3
 800f214:	4610      	mov	r0, r2
 800f216:	f7fe f826 	bl	800d266 <vListInsert>
}
 800f21a:	e010      	b.n	800f23e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f21c:	4b0f      	ldr	r3, [pc, #60]	; (800f25c <prvAddCurrentTaskToDelayedList+0xc4>)
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	4b0a      	ldr	r3, [pc, #40]	; (800f24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	3304      	adds	r3, #4
 800f226:	4619      	mov	r1, r3
 800f228:	4610      	mov	r0, r2
 800f22a:	f7fe f81c 	bl	800d266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f22e:	4b0c      	ldr	r3, [pc, #48]	; (800f260 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	68ba      	ldr	r2, [r7, #8]
 800f234:	429a      	cmp	r2, r3
 800f236:	d202      	bcs.n	800f23e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f238:	4a09      	ldr	r2, [pc, #36]	; (800f260 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6013      	str	r3, [r2, #0]
}
 800f23e:	bf00      	nop
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	2000284c 	.word	0x2000284c
 800f24c:	20002748 	.word	0x20002748
 800f250:	20002850 	.word	0x20002850
 800f254:	20002834 	.word	0x20002834
 800f258:	20002804 	.word	0x20002804
 800f25c:	20002800 	.word	0x20002800
 800f260:	20002868 	.word	0x20002868

0800f264 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b08a      	sub	sp, #40	; 0x28
 800f268:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f26a:	2300      	movs	r3, #0
 800f26c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f26e:	f000 fb41 	bl	800f8f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f272:	4b1c      	ldr	r3, [pc, #112]	; (800f2e4 <xTimerCreateTimerTask+0x80>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d021      	beq.n	800f2be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f27a:	2300      	movs	r3, #0
 800f27c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f27e:	2300      	movs	r3, #0
 800f280:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f282:	1d3a      	adds	r2, r7, #4
 800f284:	f107 0108 	add.w	r1, r7, #8
 800f288:	f107 030c 	add.w	r3, r7, #12
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7f4 fa05 	bl	800369c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f292:	6879      	ldr	r1, [r7, #4]
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	9202      	str	r2, [sp, #8]
 800f29a:	9301      	str	r3, [sp, #4]
 800f29c:	2302      	movs	r3, #2
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	460a      	mov	r2, r1
 800f2a4:	4910      	ldr	r1, [pc, #64]	; (800f2e8 <xTimerCreateTimerTask+0x84>)
 800f2a6:	4811      	ldr	r0, [pc, #68]	; (800f2ec <xTimerCreateTimerTask+0x88>)
 800f2a8:	f7fe fed2 	bl	800e050 <xTaskCreateStatic>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	4a10      	ldr	r2, [pc, #64]	; (800f2f0 <xTimerCreateTimerTask+0x8c>)
 800f2b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f2b2:	4b0f      	ldr	r3, [pc, #60]	; (800f2f0 <xTimerCreateTimerTask+0x8c>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d10a      	bne.n	800f2da <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c8:	f383 8811 	msr	BASEPRI, r3
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	613b      	str	r3, [r7, #16]
}
 800f2d6:	bf00      	nop
 800f2d8:	e7fe      	b.n	800f2d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f2da:	697b      	ldr	r3, [r7, #20]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3718      	adds	r7, #24
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}
 800f2e4:	200028a4 	.word	0x200028a4
 800f2e8:	08010c14 	.word	0x08010c14
 800f2ec:	0800f531 	.word	0x0800f531
 800f2f0:	200028a8 	.word	0x200028a8

0800f2f4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b088      	sub	sp, #32
 800f2f8:	af02      	add	r7, sp, #8
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
 800f300:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f302:	202c      	movs	r0, #44	; 0x2c
 800f304:	f000 fd88 	bl	800fe18 <pvPortMalloc>
 800f308:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00d      	beq.n	800f32c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	9301      	str	r3, [sp, #4]
 800f314:	6a3b      	ldr	r3, [r7, #32]
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	68b9      	ldr	r1, [r7, #8]
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f000 f846 	bl	800f3b0 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	2200      	movs	r2, #0
 800f328:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800f32c:	697b      	ldr	r3, [r7, #20]
	}
 800f32e:	4618      	mov	r0, r3
 800f330:	3718      	adds	r7, #24
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f336:	b580      	push	{r7, lr}
 800f338:	b08a      	sub	sp, #40	; 0x28
 800f33a:	af02      	add	r7, sp, #8
 800f33c:	60f8      	str	r0, [r7, #12]
 800f33e:	60b9      	str	r1, [r7, #8]
 800f340:	607a      	str	r2, [r7, #4]
 800f342:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f344:	232c      	movs	r3, #44	; 0x2c
 800f346:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	2b2c      	cmp	r3, #44	; 0x2c
 800f34c:	d00a      	beq.n	800f364 <xTimerCreateStatic+0x2e>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	61bb      	str	r3, [r7, #24]
}
 800f360:	bf00      	nop
 800f362:	e7fe      	b.n	800f362 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10a      	bne.n	800f380 <xTimerCreateStatic+0x4a>
	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	617b      	str	r3, [r7, #20]
}
 800f37c:	bf00      	nop
 800f37e:	e7fe      	b.n	800f37e <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f382:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00d      	beq.n	800f3a6 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	9301      	str	r3, [sp, #4]
 800f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	68b9      	ldr	r1, [r7, #8]
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f000 f809 	bl	800f3b0 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800f3a6:	69fb      	ldr	r3, [r7, #28]
	}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3720      	adds	r7, #32
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b086      	sub	sp, #24
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	60f8      	str	r0, [r7, #12]
 800f3b8:	60b9      	str	r1, [r7, #8]
 800f3ba:	607a      	str	r2, [r7, #4]
 800f3bc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d10a      	bne.n	800f3da <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c8:	f383 8811 	msr	BASEPRI, r3
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f3bf 8f4f 	dsb	sy
 800f3d4:	617b      	str	r3, [r7, #20]
}
 800f3d6:	bf00      	nop
 800f3d8:	e7fe      	b.n	800f3d8 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d015      	beq.n	800f40c <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f3e0:	f000 fa88 	bl	800f8f4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e6:	68fa      	ldr	r2, [r7, #12]
 800f3e8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	68ba      	ldr	r2, [r7, #8]
 800f3ee:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f8:	683a      	ldr	r2, [r7, #0]
 800f3fa:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fe:	6a3a      	ldr	r2, [r7, #32]
 800f400:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f404:	3304      	adds	r3, #4
 800f406:	4618      	mov	r0, r3
 800f408:	f7fd fefc 	bl	800d204 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f40c:	bf00      	nop
 800f40e:	3718      	adds	r7, #24
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b08a      	sub	sp, #40	; 0x28
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	607a      	str	r2, [r7, #4]
 800f420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f422:	2300      	movs	r3, #0
 800f424:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d10a      	bne.n	800f442 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f430:	f383 8811 	msr	BASEPRI, r3
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	f3bf 8f4f 	dsb	sy
 800f43c:	623b      	str	r3, [r7, #32]
}
 800f43e:	bf00      	nop
 800f440:	e7fe      	b.n	800f440 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f442:	4b1a      	ldr	r3, [pc, #104]	; (800f4ac <xTimerGenericCommand+0x98>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d02a      	beq.n	800f4a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	2b05      	cmp	r3, #5
 800f45a:	dc18      	bgt.n	800f48e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f45c:	f7ff fcbe 	bl	800eddc <xTaskGetSchedulerState>
 800f460:	4603      	mov	r3, r0
 800f462:	2b02      	cmp	r3, #2
 800f464:	d109      	bne.n	800f47a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f466:	4b11      	ldr	r3, [pc, #68]	; (800f4ac <xTimerGenericCommand+0x98>)
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	f107 0114 	add.w	r1, r7, #20
 800f46e:	2300      	movs	r3, #0
 800f470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f472:	f7fe f8e5 	bl	800d640 <xQueueGenericSend>
 800f476:	6278      	str	r0, [r7, #36]	; 0x24
 800f478:	e012      	b.n	800f4a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f47a:	4b0c      	ldr	r3, [pc, #48]	; (800f4ac <xTimerGenericCommand+0x98>)
 800f47c:	6818      	ldr	r0, [r3, #0]
 800f47e:	f107 0114 	add.w	r1, r7, #20
 800f482:	2300      	movs	r3, #0
 800f484:	2200      	movs	r2, #0
 800f486:	f7fe f8db 	bl	800d640 <xQueueGenericSend>
 800f48a:	6278      	str	r0, [r7, #36]	; 0x24
 800f48c:	e008      	b.n	800f4a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f48e:	4b07      	ldr	r3, [pc, #28]	; (800f4ac <xTimerGenericCommand+0x98>)
 800f490:	6818      	ldr	r0, [r3, #0]
 800f492:	f107 0114 	add.w	r1, r7, #20
 800f496:	2300      	movs	r3, #0
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	f7fe f9cf 	bl	800d83c <xQueueGenericSendFromISR>
 800f49e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3728      	adds	r7, #40	; 0x28
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	200028a4 	.word	0x200028a4

0800f4b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b088      	sub	sp, #32
 800f4b4:	af02      	add	r7, sp, #8
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f4ba:	4b1c      	ldr	r3, [pc, #112]	; (800f52c <prvProcessExpiredTimer+0x7c>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	3304      	adds	r3, #4
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fd ff05 	bl	800d2d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	69db      	ldr	r3, [r3, #28]
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d122      	bne.n	800f51c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	699a      	ldr	r2, [r3, #24]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	18d1      	adds	r1, r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	683a      	ldr	r2, [r7, #0]
 800f4e2:	6978      	ldr	r0, [r7, #20]
 800f4e4:	f000 f8c8 	bl	800f678 <prvInsertTimerInActiveList>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d016      	beq.n	800f51c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	687a      	ldr	r2, [r7, #4]
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	6978      	ldr	r0, [r7, #20]
 800f4fa:	f7ff ff8b 	bl	800f414 <xTimerGenericCommand>
 800f4fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d10a      	bne.n	800f51c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800f506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50a:	f383 8811 	msr	BASEPRI, r3
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	f3bf 8f4f 	dsb	sy
 800f516:	60fb      	str	r3, [r7, #12]
}
 800f518:	bf00      	nop
 800f51a:	e7fe      	b.n	800f51a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f520:	6978      	ldr	r0, [r7, #20]
 800f522:	4798      	blx	r3
}
 800f524:	bf00      	nop
 800f526:	3718      	adds	r7, #24
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	2000289c 	.word	0x2000289c

0800f530 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f538:	f107 0308 	add.w	r3, r7, #8
 800f53c:	4618      	mov	r0, r3
 800f53e:	f000 f857 	bl	800f5f0 <prvGetNextExpireTime>
 800f542:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	4619      	mov	r1, r3
 800f548:	68f8      	ldr	r0, [r7, #12]
 800f54a:	f000 f803 	bl	800f554 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f54e:	f000 f8d5 	bl	800f6fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f552:	e7f1      	b.n	800f538 <prvTimerTask+0x8>

0800f554 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f55e:	f7ff f83b 	bl	800e5d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f562:	f107 0308 	add.w	r3, r7, #8
 800f566:	4618      	mov	r0, r3
 800f568:	f000 f866 	bl	800f638 <prvSampleTimeNow>
 800f56c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d130      	bne.n	800f5d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d10a      	bne.n	800f590 <prvProcessTimerOrBlockTask+0x3c>
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d806      	bhi.n	800f590 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f582:	f7ff f837 	bl	800e5f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f586:	68f9      	ldr	r1, [r7, #12]
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7ff ff91 	bl	800f4b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f58e:	e024      	b.n	800f5da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d008      	beq.n	800f5a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f596:	4b13      	ldr	r3, [pc, #76]	; (800f5e4 <prvProcessTimerOrBlockTask+0x90>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	bf0c      	ite	eq
 800f5a0:	2301      	moveq	r3, #1
 800f5a2:	2300      	movne	r3, #0
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f5a8:	4b0f      	ldr	r3, [pc, #60]	; (800f5e8 <prvProcessTimerOrBlockTask+0x94>)
 800f5aa:	6818      	ldr	r0, [r3, #0]
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	683a      	ldr	r2, [r7, #0]
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	f7fe fd17 	bl	800dfe8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f5ba:	f7ff f81b 	bl	800e5f4 <xTaskResumeAll>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d10a      	bne.n	800f5da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f5c4:	4b09      	ldr	r3, [pc, #36]	; (800f5ec <prvProcessTimerOrBlockTask+0x98>)
 800f5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ca:	601a      	str	r2, [r3, #0]
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	f3bf 8f6f 	isb	sy
}
 800f5d4:	e001      	b.n	800f5da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f5d6:	f7ff f80d 	bl	800e5f4 <xTaskResumeAll>
}
 800f5da:	bf00      	nop
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	200028a0 	.word	0x200028a0
 800f5e8:	200028a4 	.word	0x200028a4
 800f5ec:	e000ed04 	.word	0xe000ed04

0800f5f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b085      	sub	sp, #20
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f5f8:	4b0e      	ldr	r3, [pc, #56]	; (800f634 <prvGetNextExpireTime+0x44>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	bf0c      	ite	eq
 800f602:	2301      	moveq	r3, #1
 800f604:	2300      	movne	r3, #0
 800f606:	b2db      	uxtb	r3, r3
 800f608:	461a      	mov	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d105      	bne.n	800f622 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f616:	4b07      	ldr	r3, [pc, #28]	; (800f634 <prvGetNextExpireTime+0x44>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	60fb      	str	r3, [r7, #12]
 800f620:	e001      	b.n	800f626 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f622:	2300      	movs	r3, #0
 800f624:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f626:	68fb      	ldr	r3, [r7, #12]
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3714      	adds	r7, #20
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	2000289c 	.word	0x2000289c

0800f638 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f640:	f7ff f874 	bl	800e72c <xTaskGetTickCount>
 800f644:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f646:	4b0b      	ldr	r3, [pc, #44]	; (800f674 <prvSampleTimeNow+0x3c>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d205      	bcs.n	800f65c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f650:	f000 f8ee 	bl	800f830 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2201      	movs	r2, #1
 800f658:	601a      	str	r2, [r3, #0]
 800f65a:	e002      	b.n	800f662 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f662:	4a04      	ldr	r2, [pc, #16]	; (800f674 <prvSampleTimeNow+0x3c>)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f668:	68fb      	ldr	r3, [r7, #12]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	200028ac 	.word	0x200028ac

0800f678 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
 800f684:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f686:	2300      	movs	r3, #0
 800f688:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f696:	68ba      	ldr	r2, [r7, #8]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d812      	bhi.n	800f6c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	1ad2      	subs	r2, r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	699b      	ldr	r3, [r3, #24]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d302      	bcc.n	800f6b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	617b      	str	r3, [r7, #20]
 800f6b0:	e01b      	b.n	800f6ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f6b2:	4b10      	ldr	r3, [pc, #64]	; (800f6f4 <prvInsertTimerInActiveList+0x7c>)
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	3304      	adds	r3, #4
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	4610      	mov	r0, r2
 800f6be:	f7fd fdd2 	bl	800d266 <vListInsert>
 800f6c2:	e012      	b.n	800f6ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d206      	bcs.n	800f6da <prvInsertTimerInActiveList+0x62>
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d302      	bcc.n	800f6da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	617b      	str	r3, [r7, #20]
 800f6d8:	e007      	b.n	800f6ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6da:	4b07      	ldr	r3, [pc, #28]	; (800f6f8 <prvInsertTimerInActiveList+0x80>)
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	3304      	adds	r3, #4
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	4610      	mov	r0, r2
 800f6e6:	f7fd fdbe 	bl	800d266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f6ea:	697b      	ldr	r3, [r7, #20]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3718      	adds	r7, #24
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	200028a0 	.word	0x200028a0
 800f6f8:	2000289c 	.word	0x2000289c

0800f6fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b08c      	sub	sp, #48	; 0x30
 800f700:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f702:	e081      	b.n	800f808 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	2b00      	cmp	r3, #0
 800f708:	db7e      	blt.n	800f808 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f710:	695b      	ldr	r3, [r3, #20]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d004      	beq.n	800f720 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	3304      	adds	r3, #4
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fd fddc 	bl	800d2d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f720:	1d3b      	adds	r3, r7, #4
 800f722:	4618      	mov	r0, r3
 800f724:	f7ff ff88 	bl	800f638 <prvSampleTimeNow>
 800f728:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	2b09      	cmp	r3, #9
 800f72e:	d86a      	bhi.n	800f806 <prvProcessReceivedCommands+0x10a>
 800f730:	a201      	add	r2, pc, #4	; (adr r2, 800f738 <prvProcessReceivedCommands+0x3c>)
 800f732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f736:	bf00      	nop
 800f738:	0800f761 	.word	0x0800f761
 800f73c:	0800f761 	.word	0x0800f761
 800f740:	0800f761 	.word	0x0800f761
 800f744:	0800f809 	.word	0x0800f809
 800f748:	0800f7bd 	.word	0x0800f7bd
 800f74c:	0800f7f5 	.word	0x0800f7f5
 800f750:	0800f761 	.word	0x0800f761
 800f754:	0800f761 	.word	0x0800f761
 800f758:	0800f809 	.word	0x0800f809
 800f75c:	0800f7bd 	.word	0x0800f7bd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f760:	68fa      	ldr	r2, [r7, #12]
 800f762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f764:	699b      	ldr	r3, [r3, #24]
 800f766:	18d1      	adds	r1, r2, r3
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	6a3a      	ldr	r2, [r7, #32]
 800f76c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f76e:	f7ff ff83 	bl	800f678 <prvInsertTimerInActiveList>
 800f772:	4603      	mov	r3, r0
 800f774:	2b00      	cmp	r3, #0
 800f776:	d047      	beq.n	800f808 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f77e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f782:	69db      	ldr	r3, [r3, #28]
 800f784:	2b01      	cmp	r3, #1
 800f786:	d13f      	bne.n	800f808 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f788:	68fa      	ldr	r2, [r7, #12]
 800f78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78c:	699b      	ldr	r3, [r3, #24]
 800f78e:	441a      	add	r2, r3
 800f790:	2300      	movs	r3, #0
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	2300      	movs	r3, #0
 800f796:	2100      	movs	r1, #0
 800f798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f79a:	f7ff fe3b 	bl	800f414 <xTimerGenericCommand>
 800f79e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d130      	bne.n	800f808 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800f7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7aa:	f383 8811 	msr	BASEPRI, r3
 800f7ae:	f3bf 8f6f 	isb	sy
 800f7b2:	f3bf 8f4f 	dsb	sy
 800f7b6:	61bb      	str	r3, [r7, #24]
}
 800f7b8:	bf00      	nop
 800f7ba:	e7fe      	b.n	800f7ba <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	699b      	ldr	r3, [r3, #24]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d10a      	bne.n	800f7e0 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800f7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ce:	f383 8811 	msr	BASEPRI, r3
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	f3bf 8f4f 	dsb	sy
 800f7da:	617b      	str	r3, [r7, #20]
}
 800f7dc:	bf00      	nop
 800f7de:	e7fe      	b.n	800f7de <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	699a      	ldr	r2, [r3, #24]
 800f7e4:	6a3b      	ldr	r3, [r7, #32]
 800f7e6:	18d1      	adds	r1, r2, r3
 800f7e8:	6a3b      	ldr	r3, [r7, #32]
 800f7ea:	6a3a      	ldr	r2, [r7, #32]
 800f7ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7ee:	f7ff ff43 	bl	800f678 <prvInsertTimerInActiveList>
					break;
 800f7f2:	e009      	b.n	800f808 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d104      	bne.n	800f808 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800f7fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f800:	f000 fbce 	bl	800ffa0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f804:	e000      	b.n	800f808 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800f806:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f808:	4b08      	ldr	r3, [pc, #32]	; (800f82c <prvProcessReceivedCommands+0x130>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f107 0108 	add.w	r1, r7, #8
 800f810:	2200      	movs	r2, #0
 800f812:	4618      	mov	r0, r3
 800f814:	f7fe f8aa 	bl	800d96c <xQueueReceive>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f47f af72 	bne.w	800f704 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f820:	bf00      	nop
 800f822:	bf00      	nop
 800f824:	3728      	adds	r7, #40	; 0x28
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	200028a4 	.word	0x200028a4

0800f830 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b088      	sub	sp, #32
 800f834:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f836:	e045      	b.n	800f8c4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f838:	4b2c      	ldr	r3, [pc, #176]	; (800f8ec <prvSwitchTimerLists+0xbc>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f842:	4b2a      	ldr	r3, [pc, #168]	; (800f8ec <prvSwitchTimerLists+0xbc>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	3304      	adds	r3, #4
 800f850:	4618      	mov	r0, r3
 800f852:	f7fd fd41 	bl	800d2d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	69db      	ldr	r3, [r3, #28]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d12e      	bne.n	800f8c4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	699b      	ldr	r3, [r3, #24]
 800f86a:	693a      	ldr	r2, [r7, #16]
 800f86c:	4413      	add	r3, r2
 800f86e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f870:	68ba      	ldr	r2, [r7, #8]
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	429a      	cmp	r2, r3
 800f876:	d90e      	bls.n	800f896 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	68ba      	ldr	r2, [r7, #8]
 800f87c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f884:	4b19      	ldr	r3, [pc, #100]	; (800f8ec <prvSwitchTimerLists+0xbc>)
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	3304      	adds	r3, #4
 800f88c:	4619      	mov	r1, r3
 800f88e:	4610      	mov	r0, r2
 800f890:	f7fd fce9 	bl	800d266 <vListInsert>
 800f894:	e016      	b.n	800f8c4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f896:	2300      	movs	r3, #0
 800f898:	9300      	str	r3, [sp, #0]
 800f89a:	2300      	movs	r3, #0
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	2100      	movs	r1, #0
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f7ff fdb7 	bl	800f414 <xTimerGenericCommand>
 800f8a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d10a      	bne.n	800f8c4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800f8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	603b      	str	r3, [r7, #0]
}
 800f8c0:	bf00      	nop
 800f8c2:	e7fe      	b.n	800f8c2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8c4:	4b09      	ldr	r3, [pc, #36]	; (800f8ec <prvSwitchTimerLists+0xbc>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d1b4      	bne.n	800f838 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f8ce:	4b07      	ldr	r3, [pc, #28]	; (800f8ec <prvSwitchTimerLists+0xbc>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f8d4:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <prvSwitchTimerLists+0xc0>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4a04      	ldr	r2, [pc, #16]	; (800f8ec <prvSwitchTimerLists+0xbc>)
 800f8da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f8dc:	4a04      	ldr	r2, [pc, #16]	; (800f8f0 <prvSwitchTimerLists+0xc0>)
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	6013      	str	r3, [r2, #0]
}
 800f8e2:	bf00      	nop
 800f8e4:	3718      	adds	r7, #24
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	2000289c 	.word	0x2000289c
 800f8f0:	200028a0 	.word	0x200028a0

0800f8f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f8fa:	f000 f96b 	bl	800fbd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f8fe:	4b15      	ldr	r3, [pc, #84]	; (800f954 <prvCheckForValidListAndQueue+0x60>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d120      	bne.n	800f948 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f906:	4814      	ldr	r0, [pc, #80]	; (800f958 <prvCheckForValidListAndQueue+0x64>)
 800f908:	f7fd fc5c 	bl	800d1c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f90c:	4813      	ldr	r0, [pc, #76]	; (800f95c <prvCheckForValidListAndQueue+0x68>)
 800f90e:	f7fd fc59 	bl	800d1c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f912:	4b13      	ldr	r3, [pc, #76]	; (800f960 <prvCheckForValidListAndQueue+0x6c>)
 800f914:	4a10      	ldr	r2, [pc, #64]	; (800f958 <prvCheckForValidListAndQueue+0x64>)
 800f916:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f918:	4b12      	ldr	r3, [pc, #72]	; (800f964 <prvCheckForValidListAndQueue+0x70>)
 800f91a:	4a10      	ldr	r2, [pc, #64]	; (800f95c <prvCheckForValidListAndQueue+0x68>)
 800f91c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f91e:	2300      	movs	r3, #0
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	4b11      	ldr	r3, [pc, #68]	; (800f968 <prvCheckForValidListAndQueue+0x74>)
 800f924:	4a11      	ldr	r2, [pc, #68]	; (800f96c <prvCheckForValidListAndQueue+0x78>)
 800f926:	210c      	movs	r1, #12
 800f928:	200a      	movs	r0, #10
 800f92a:	f7fd fd67 	bl	800d3fc <xQueueGenericCreateStatic>
 800f92e:	4603      	mov	r3, r0
 800f930:	4a08      	ldr	r2, [pc, #32]	; (800f954 <prvCheckForValidListAndQueue+0x60>)
 800f932:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f934:	4b07      	ldr	r3, [pc, #28]	; (800f954 <prvCheckForValidListAndQueue+0x60>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d005      	beq.n	800f948 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f93c:	4b05      	ldr	r3, [pc, #20]	; (800f954 <prvCheckForValidListAndQueue+0x60>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	490b      	ldr	r1, [pc, #44]	; (800f970 <prvCheckForValidListAndQueue+0x7c>)
 800f942:	4618      	mov	r0, r3
 800f944:	f7fe fb26 	bl	800df94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f948:	f000 f974 	bl	800fc34 <vPortExitCritical>
}
 800f94c:	bf00      	nop
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}
 800f952:	bf00      	nop
 800f954:	200028a4 	.word	0x200028a4
 800f958:	20002874 	.word	0x20002874
 800f95c:	20002888 	.word	0x20002888
 800f960:	2000289c 	.word	0x2000289c
 800f964:	200028a0 	.word	0x200028a0
 800f968:	20002928 	.word	0x20002928
 800f96c:	200028b0 	.word	0x200028b0
 800f970:	08010c1c 	.word	0x08010c1c

0800f974 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f974:	b480      	push	{r7}
 800f976:	b085      	sub	sp, #20
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	3b04      	subs	r3, #4
 800f984:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f98c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	3b04      	subs	r3, #4
 800f992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	f023 0201 	bic.w	r2, r3, #1
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	3b04      	subs	r3, #4
 800f9a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f9a4:	4a0c      	ldr	r2, [pc, #48]	; (800f9d8 <pxPortInitialiseStack+0x64>)
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	3b14      	subs	r3, #20
 800f9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	3b04      	subs	r3, #4
 800f9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f06f 0202 	mvn.w	r2, #2
 800f9c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	3b20      	subs	r3, #32
 800f9c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3714      	adds	r7, #20
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr
 800f9d8:	0800f9dd 	.word	0x0800f9dd

0800f9dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b085      	sub	sp, #20
 800f9e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f9e6:	4b12      	ldr	r3, [pc, #72]	; (800fa30 <prvTaskExitError+0x54>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ee:	d00a      	beq.n	800fa06 <prvTaskExitError+0x2a>
	__asm volatile
 800f9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f4:	f383 8811 	msr	BASEPRI, r3
 800f9f8:	f3bf 8f6f 	isb	sy
 800f9fc:	f3bf 8f4f 	dsb	sy
 800fa00:	60fb      	str	r3, [r7, #12]
}
 800fa02:	bf00      	nop
 800fa04:	e7fe      	b.n	800fa04 <prvTaskExitError+0x28>
	__asm volatile
 800fa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0a:	f383 8811 	msr	BASEPRI, r3
 800fa0e:	f3bf 8f6f 	isb	sy
 800fa12:	f3bf 8f4f 	dsb	sy
 800fa16:	60bb      	str	r3, [r7, #8]
}
 800fa18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fa1a:	bf00      	nop
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d0fc      	beq.n	800fa1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fa22:	bf00      	nop
 800fa24:	bf00      	nop
 800fa26:	3714      	adds	r7, #20
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr
 800fa30:	200000bc 	.word	0x200000bc
	...

0800fa40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fa40:	4b07      	ldr	r3, [pc, #28]	; (800fa60 <pxCurrentTCBConst2>)
 800fa42:	6819      	ldr	r1, [r3, #0]
 800fa44:	6808      	ldr	r0, [r1, #0]
 800fa46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4a:	f380 8809 	msr	PSP, r0
 800fa4e:	f3bf 8f6f 	isb	sy
 800fa52:	f04f 0000 	mov.w	r0, #0
 800fa56:	f380 8811 	msr	BASEPRI, r0
 800fa5a:	4770      	bx	lr
 800fa5c:	f3af 8000 	nop.w

0800fa60 <pxCurrentTCBConst2>:
 800fa60:	20002748 	.word	0x20002748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa64:	bf00      	nop
 800fa66:	bf00      	nop

0800fa68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fa68:	4808      	ldr	r0, [pc, #32]	; (800fa8c <prvPortStartFirstTask+0x24>)
 800fa6a:	6800      	ldr	r0, [r0, #0]
 800fa6c:	6800      	ldr	r0, [r0, #0]
 800fa6e:	f380 8808 	msr	MSP, r0
 800fa72:	f04f 0000 	mov.w	r0, #0
 800fa76:	f380 8814 	msr	CONTROL, r0
 800fa7a:	b662      	cpsie	i
 800fa7c:	b661      	cpsie	f
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	f3bf 8f6f 	isb	sy
 800fa86:	df00      	svc	0
 800fa88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa8a:	bf00      	nop
 800fa8c:	e000ed08 	.word	0xe000ed08

0800fa90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b086      	sub	sp, #24
 800fa94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fa96:	4b46      	ldr	r3, [pc, #280]	; (800fbb0 <xPortStartScheduler+0x120>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	4a46      	ldr	r2, [pc, #280]	; (800fbb4 <xPortStartScheduler+0x124>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d10a      	bne.n	800fab6 <xPortStartScheduler+0x26>
	__asm volatile
 800faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	613b      	str	r3, [r7, #16]
}
 800fab2:	bf00      	nop
 800fab4:	e7fe      	b.n	800fab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fab6:	4b3e      	ldr	r3, [pc, #248]	; (800fbb0 <xPortStartScheduler+0x120>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a3f      	ldr	r2, [pc, #252]	; (800fbb8 <xPortStartScheduler+0x128>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d10a      	bne.n	800fad6 <xPortStartScheduler+0x46>
	__asm volatile
 800fac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac4:	f383 8811 	msr	BASEPRI, r3
 800fac8:	f3bf 8f6f 	isb	sy
 800facc:	f3bf 8f4f 	dsb	sy
 800fad0:	60fb      	str	r3, [r7, #12]
}
 800fad2:	bf00      	nop
 800fad4:	e7fe      	b.n	800fad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fad6:	4b39      	ldr	r3, [pc, #228]	; (800fbbc <xPortStartScheduler+0x12c>)
 800fad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	22ff      	movs	r2, #255	; 0xff
 800fae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	b2db      	uxtb	r3, r3
 800faee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800faf0:	78fb      	ldrb	r3, [r7, #3]
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800faf8:	b2da      	uxtb	r2, r3
 800fafa:	4b31      	ldr	r3, [pc, #196]	; (800fbc0 <xPortStartScheduler+0x130>)
 800fafc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fafe:	4b31      	ldr	r3, [pc, #196]	; (800fbc4 <xPortStartScheduler+0x134>)
 800fb00:	2207      	movs	r2, #7
 800fb02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb04:	e009      	b.n	800fb1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fb06:	4b2f      	ldr	r3, [pc, #188]	; (800fbc4 <xPortStartScheduler+0x134>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	3b01      	subs	r3, #1
 800fb0c:	4a2d      	ldr	r2, [pc, #180]	; (800fbc4 <xPortStartScheduler+0x134>)
 800fb0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fb10:	78fb      	ldrb	r3, [r7, #3]
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	005b      	lsls	r3, r3, #1
 800fb16:	b2db      	uxtb	r3, r3
 800fb18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb1a:	78fb      	ldrb	r3, [r7, #3]
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb22:	2b80      	cmp	r3, #128	; 0x80
 800fb24:	d0ef      	beq.n	800fb06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fb26:	4b27      	ldr	r3, [pc, #156]	; (800fbc4 <xPortStartScheduler+0x134>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f1c3 0307 	rsb	r3, r3, #7
 800fb2e:	2b04      	cmp	r3, #4
 800fb30:	d00a      	beq.n	800fb48 <xPortStartScheduler+0xb8>
	__asm volatile
 800fb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	60bb      	str	r3, [r7, #8]
}
 800fb44:	bf00      	nop
 800fb46:	e7fe      	b.n	800fb46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fb48:	4b1e      	ldr	r3, [pc, #120]	; (800fbc4 <xPortStartScheduler+0x134>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	021b      	lsls	r3, r3, #8
 800fb4e:	4a1d      	ldr	r2, [pc, #116]	; (800fbc4 <xPortStartScheduler+0x134>)
 800fb50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fb52:	4b1c      	ldr	r3, [pc, #112]	; (800fbc4 <xPortStartScheduler+0x134>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb5a:	4a1a      	ldr	r2, [pc, #104]	; (800fbc4 <xPortStartScheduler+0x134>)
 800fb5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	b2da      	uxtb	r2, r3
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fb66:	4b18      	ldr	r3, [pc, #96]	; (800fbc8 <xPortStartScheduler+0x138>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a17      	ldr	r2, [pc, #92]	; (800fbc8 <xPortStartScheduler+0x138>)
 800fb6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fb70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fb72:	4b15      	ldr	r3, [pc, #84]	; (800fbc8 <xPortStartScheduler+0x138>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4a14      	ldr	r2, [pc, #80]	; (800fbc8 <xPortStartScheduler+0x138>)
 800fb78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fb7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb7e:	f000 f8dd 	bl	800fd3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb82:	4b12      	ldr	r3, [pc, #72]	; (800fbcc <xPortStartScheduler+0x13c>)
 800fb84:	2200      	movs	r2, #0
 800fb86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb88:	f000 f8fc 	bl	800fd84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fb8c:	4b10      	ldr	r3, [pc, #64]	; (800fbd0 <xPortStartScheduler+0x140>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4a0f      	ldr	r2, [pc, #60]	; (800fbd0 <xPortStartScheduler+0x140>)
 800fb92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fb96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb98:	f7ff ff66 	bl	800fa68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb9c:	f7fe fea6 	bl	800e8ec <vTaskSwitchContext>
	prvTaskExitError();
 800fba0:	f7ff ff1c 	bl	800f9dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3718      	adds	r7, #24
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	e000ed00 	.word	0xe000ed00
 800fbb4:	410fc271 	.word	0x410fc271
 800fbb8:	410fc270 	.word	0x410fc270
 800fbbc:	e000e400 	.word	0xe000e400
 800fbc0:	20002970 	.word	0x20002970
 800fbc4:	20002974 	.word	0x20002974
 800fbc8:	e000ed20 	.word	0xe000ed20
 800fbcc:	200000bc 	.word	0x200000bc
 800fbd0:	e000ef34 	.word	0xe000ef34

0800fbd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
	__asm volatile
 800fbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbde:	f383 8811 	msr	BASEPRI, r3
 800fbe2:	f3bf 8f6f 	isb	sy
 800fbe6:	f3bf 8f4f 	dsb	sy
 800fbea:	607b      	str	r3, [r7, #4]
}
 800fbec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fbee:	4b0f      	ldr	r3, [pc, #60]	; (800fc2c <vPortEnterCritical+0x58>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	4a0d      	ldr	r2, [pc, #52]	; (800fc2c <vPortEnterCritical+0x58>)
 800fbf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fbf8:	4b0c      	ldr	r3, [pc, #48]	; (800fc2c <vPortEnterCritical+0x58>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d10f      	bne.n	800fc20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fc00:	4b0b      	ldr	r3, [pc, #44]	; (800fc30 <vPortEnterCritical+0x5c>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00a      	beq.n	800fc20 <vPortEnterCritical+0x4c>
	__asm volatile
 800fc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0e:	f383 8811 	msr	BASEPRI, r3
 800fc12:	f3bf 8f6f 	isb	sy
 800fc16:	f3bf 8f4f 	dsb	sy
 800fc1a:	603b      	str	r3, [r7, #0]
}
 800fc1c:	bf00      	nop
 800fc1e:	e7fe      	b.n	800fc1e <vPortEnterCritical+0x4a>
	}
}
 800fc20:	bf00      	nop
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr
 800fc2c:	200000bc 	.word	0x200000bc
 800fc30:	e000ed04 	.word	0xe000ed04

0800fc34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fc3a:	4b12      	ldr	r3, [pc, #72]	; (800fc84 <vPortExitCritical+0x50>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10a      	bne.n	800fc58 <vPortExitCritical+0x24>
	__asm volatile
 800fc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc46:	f383 8811 	msr	BASEPRI, r3
 800fc4a:	f3bf 8f6f 	isb	sy
 800fc4e:	f3bf 8f4f 	dsb	sy
 800fc52:	607b      	str	r3, [r7, #4]
}
 800fc54:	bf00      	nop
 800fc56:	e7fe      	b.n	800fc56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fc58:	4b0a      	ldr	r3, [pc, #40]	; (800fc84 <vPortExitCritical+0x50>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	4a09      	ldr	r2, [pc, #36]	; (800fc84 <vPortExitCritical+0x50>)
 800fc60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc62:	4b08      	ldr	r3, [pc, #32]	; (800fc84 <vPortExitCritical+0x50>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d105      	bne.n	800fc76 <vPortExitCritical+0x42>
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	f383 8811 	msr	BASEPRI, r3
}
 800fc74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc76:	bf00      	nop
 800fc78:	370c      	adds	r7, #12
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	200000bc 	.word	0x200000bc
	...

0800fc90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc90:	f3ef 8009 	mrs	r0, PSP
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	4b15      	ldr	r3, [pc, #84]	; (800fcf0 <pxCurrentTCBConst>)
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	f01e 0f10 	tst.w	lr, #16
 800fca0:	bf08      	it	eq
 800fca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcaa:	6010      	str	r0, [r2, #0]
 800fcac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fcb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fcb4:	f380 8811 	msr	BASEPRI, r0
 800fcb8:	f3bf 8f4f 	dsb	sy
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f7fe fe14 	bl	800e8ec <vTaskSwitchContext>
 800fcc4:	f04f 0000 	mov.w	r0, #0
 800fcc8:	f380 8811 	msr	BASEPRI, r0
 800fccc:	bc09      	pop	{r0, r3}
 800fcce:	6819      	ldr	r1, [r3, #0]
 800fcd0:	6808      	ldr	r0, [r1, #0]
 800fcd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd6:	f01e 0f10 	tst.w	lr, #16
 800fcda:	bf08      	it	eq
 800fcdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fce0:	f380 8809 	msr	PSP, r0
 800fce4:	f3bf 8f6f 	isb	sy
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	f3af 8000 	nop.w

0800fcf0 <pxCurrentTCBConst>:
 800fcf0:	20002748 	.word	0x20002748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fcf4:	bf00      	nop
 800fcf6:	bf00      	nop

0800fcf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	607b      	str	r3, [r7, #4]
}
 800fd10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fd12:	f7fe fd2d 	bl	800e770 <xTaskIncrementTick>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d003      	beq.n	800fd24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fd1c:	4b06      	ldr	r3, [pc, #24]	; (800fd38 <SysTick_Handler+0x40>)
 800fd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	2300      	movs	r3, #0
 800fd26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	f383 8811 	msr	BASEPRI, r3
}
 800fd2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fd30:	bf00      	nop
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	e000ed04 	.word	0xe000ed04

0800fd3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd40:	4b0b      	ldr	r3, [pc, #44]	; (800fd70 <vPortSetupTimerInterrupt+0x34>)
 800fd42:	2200      	movs	r2, #0
 800fd44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd46:	4b0b      	ldr	r3, [pc, #44]	; (800fd74 <vPortSetupTimerInterrupt+0x38>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd4c:	4b0a      	ldr	r3, [pc, #40]	; (800fd78 <vPortSetupTimerInterrupt+0x3c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4a0a      	ldr	r2, [pc, #40]	; (800fd7c <vPortSetupTimerInterrupt+0x40>)
 800fd52:	fba2 2303 	umull	r2, r3, r2, r3
 800fd56:	099b      	lsrs	r3, r3, #6
 800fd58:	4a09      	ldr	r2, [pc, #36]	; (800fd80 <vPortSetupTimerInterrupt+0x44>)
 800fd5a:	3b01      	subs	r3, #1
 800fd5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fd5e:	4b04      	ldr	r3, [pc, #16]	; (800fd70 <vPortSetupTimerInterrupt+0x34>)
 800fd60:	2207      	movs	r2, #7
 800fd62:	601a      	str	r2, [r3, #0]
}
 800fd64:	bf00      	nop
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop
 800fd70:	e000e010 	.word	0xe000e010
 800fd74:	e000e018 	.word	0xe000e018
 800fd78:	20000038 	.word	0x20000038
 800fd7c:	10624dd3 	.word	0x10624dd3
 800fd80:	e000e014 	.word	0xe000e014

0800fd84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fd94 <vPortEnableVFP+0x10>
 800fd88:	6801      	ldr	r1, [r0, #0]
 800fd8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fd8e:	6001      	str	r1, [r0, #0]
 800fd90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd92:	bf00      	nop
 800fd94:	e000ed88 	.word	0xe000ed88

0800fd98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd98:	b480      	push	{r7}
 800fd9a:	b085      	sub	sp, #20
 800fd9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd9e:	f3ef 8305 	mrs	r3, IPSR
 800fda2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2b0f      	cmp	r3, #15
 800fda8:	d914      	bls.n	800fdd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fdaa:	4a17      	ldr	r2, [pc, #92]	; (800fe08 <vPortValidateInterruptPriority+0x70>)
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	4413      	add	r3, r2
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fdb4:	4b15      	ldr	r3, [pc, #84]	; (800fe0c <vPortValidateInterruptPriority+0x74>)
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	7afa      	ldrb	r2, [r7, #11]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d20a      	bcs.n	800fdd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	607b      	str	r3, [r7, #4]
}
 800fdd0:	bf00      	nop
 800fdd2:	e7fe      	b.n	800fdd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fdd4:	4b0e      	ldr	r3, [pc, #56]	; (800fe10 <vPortValidateInterruptPriority+0x78>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fddc:	4b0d      	ldr	r3, [pc, #52]	; (800fe14 <vPortValidateInterruptPriority+0x7c>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d90a      	bls.n	800fdfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde8:	f383 8811 	msr	BASEPRI, r3
 800fdec:	f3bf 8f6f 	isb	sy
 800fdf0:	f3bf 8f4f 	dsb	sy
 800fdf4:	603b      	str	r3, [r7, #0]
}
 800fdf6:	bf00      	nop
 800fdf8:	e7fe      	b.n	800fdf8 <vPortValidateInterruptPriority+0x60>
	}
 800fdfa:	bf00      	nop
 800fdfc:	3714      	adds	r7, #20
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	e000e3f0 	.word	0xe000e3f0
 800fe0c:	20002970 	.word	0x20002970
 800fe10:	e000ed0c 	.word	0xe000ed0c
 800fe14:	20002974 	.word	0x20002974

0800fe18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b08a      	sub	sp, #40	; 0x28
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fe20:	2300      	movs	r3, #0
 800fe22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fe24:	f7fe fbd8 	bl	800e5d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fe28:	4b58      	ldr	r3, [pc, #352]	; (800ff8c <pvPortMalloc+0x174>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d101      	bne.n	800fe34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fe30:	f000 f910 	bl	8010054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fe34:	4b56      	ldr	r3, [pc, #344]	; (800ff90 <pvPortMalloc+0x178>)
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	4013      	ands	r3, r2
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f040 808e 	bne.w	800ff5e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d01d      	beq.n	800fe84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fe48:	2208      	movs	r2, #8
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4413      	add	r3, r2
 800fe4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f003 0307 	and.w	r3, r3, #7
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d014      	beq.n	800fe84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f023 0307 	bic.w	r3, r3, #7
 800fe60:	3308      	adds	r3, #8
 800fe62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f003 0307 	and.w	r3, r3, #7
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00a      	beq.n	800fe84 <pvPortMalloc+0x6c>
	__asm volatile
 800fe6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	617b      	str	r3, [r7, #20]
}
 800fe80:	bf00      	nop
 800fe82:	e7fe      	b.n	800fe82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d069      	beq.n	800ff5e <pvPortMalloc+0x146>
 800fe8a:	4b42      	ldr	r3, [pc, #264]	; (800ff94 <pvPortMalloc+0x17c>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d864      	bhi.n	800ff5e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe94:	4b40      	ldr	r3, [pc, #256]	; (800ff98 <pvPortMalloc+0x180>)
 800fe96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe98:	4b3f      	ldr	r3, [pc, #252]	; (800ff98 <pvPortMalloc+0x180>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe9e:	e004      	b.n	800feaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d903      	bls.n	800febc <pvPortMalloc+0xa4>
 800feb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d1f1      	bne.n	800fea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800febc:	4b33      	ldr	r3, [pc, #204]	; (800ff8c <pvPortMalloc+0x174>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d04b      	beq.n	800ff5e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fec6:	6a3b      	ldr	r3, [r7, #32]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2208      	movs	r2, #8
 800fecc:	4413      	add	r3, r2
 800fece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed2:	681a      	ldr	r2, [r3, #0]
 800fed4:	6a3b      	ldr	r3, [r7, #32]
 800fed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feda:	685a      	ldr	r2, [r3, #4]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	1ad2      	subs	r2, r2, r3
 800fee0:	2308      	movs	r3, #8
 800fee2:	005b      	lsls	r3, r3, #1
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d91f      	bls.n	800ff28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4413      	add	r3, r2
 800feee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	f003 0307 	and.w	r3, r3, #7
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00a      	beq.n	800ff10 <pvPortMalloc+0xf8>
	__asm volatile
 800fefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fefe:	f383 8811 	msr	BASEPRI, r3
 800ff02:	f3bf 8f6f 	isb	sy
 800ff06:	f3bf 8f4f 	dsb	sy
 800ff0a:	613b      	str	r3, [r7, #16]
}
 800ff0c:	bf00      	nop
 800ff0e:	e7fe      	b.n	800ff0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff12:	685a      	ldr	r2, [r3, #4]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	1ad2      	subs	r2, r2, r3
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ff22:	69b8      	ldr	r0, [r7, #24]
 800ff24:	f000 f8f8 	bl	8010118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ff28:	4b1a      	ldr	r3, [pc, #104]	; (800ff94 <pvPortMalloc+0x17c>)
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	1ad3      	subs	r3, r2, r3
 800ff32:	4a18      	ldr	r2, [pc, #96]	; (800ff94 <pvPortMalloc+0x17c>)
 800ff34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ff36:	4b17      	ldr	r3, [pc, #92]	; (800ff94 <pvPortMalloc+0x17c>)
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	4b18      	ldr	r3, [pc, #96]	; (800ff9c <pvPortMalloc+0x184>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d203      	bcs.n	800ff4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff42:	4b14      	ldr	r3, [pc, #80]	; (800ff94 <pvPortMalloc+0x17c>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	4a15      	ldr	r2, [pc, #84]	; (800ff9c <pvPortMalloc+0x184>)
 800ff48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	685a      	ldr	r2, [r3, #4]
 800ff4e:	4b10      	ldr	r3, [pc, #64]	; (800ff90 <pvPortMalloc+0x178>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	431a      	orrs	r2, r3
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff5e:	f7fe fb49 	bl	800e5f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	f003 0307 	and.w	r3, r3, #7
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00a      	beq.n	800ff82 <pvPortMalloc+0x16a>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	f383 8811 	msr	BASEPRI, r3
 800ff74:	f3bf 8f6f 	isb	sy
 800ff78:	f3bf 8f4f 	dsb	sy
 800ff7c:	60fb      	str	r3, [r7, #12]
}
 800ff7e:	bf00      	nop
 800ff80:	e7fe      	b.n	800ff80 <pvPortMalloc+0x168>
	return pvReturn;
 800ff82:	69fb      	ldr	r3, [r7, #28]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3728      	adds	r7, #40	; 0x28
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	20002d80 	.word	0x20002d80
 800ff90:	20002d8c 	.word	0x20002d8c
 800ff94:	20002d84 	.word	0x20002d84
 800ff98:	20002d78 	.word	0x20002d78
 800ff9c:	20002d88 	.word	0x20002d88

0800ffa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d048      	beq.n	8010044 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ffb2:	2308      	movs	r3, #8
 800ffb4:	425b      	negs	r3, r3
 800ffb6:	697a      	ldr	r2, [r7, #20]
 800ffb8:	4413      	add	r3, r2
 800ffba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	685a      	ldr	r2, [r3, #4]
 800ffc4:	4b21      	ldr	r3, [pc, #132]	; (801004c <vPortFree+0xac>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4013      	ands	r3, r2
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d10a      	bne.n	800ffe4 <vPortFree+0x44>
	__asm volatile
 800ffce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd2:	f383 8811 	msr	BASEPRI, r3
 800ffd6:	f3bf 8f6f 	isb	sy
 800ffda:	f3bf 8f4f 	dsb	sy
 800ffde:	60fb      	str	r3, [r7, #12]
}
 800ffe0:	bf00      	nop
 800ffe2:	e7fe      	b.n	800ffe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00a      	beq.n	8010002 <vPortFree+0x62>
	__asm volatile
 800ffec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff0:	f383 8811 	msr	BASEPRI, r3
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	60bb      	str	r3, [r7, #8]
}
 800fffe:	bf00      	nop
 8010000:	e7fe      	b.n	8010000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	685a      	ldr	r2, [r3, #4]
 8010006:	4b11      	ldr	r3, [pc, #68]	; (801004c <vPortFree+0xac>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4013      	ands	r3, r2
 801000c:	2b00      	cmp	r3, #0
 801000e:	d019      	beq.n	8010044 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d115      	bne.n	8010044 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	685a      	ldr	r2, [r3, #4]
 801001c:	4b0b      	ldr	r3, [pc, #44]	; (801004c <vPortFree+0xac>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	43db      	mvns	r3, r3
 8010022:	401a      	ands	r2, r3
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010028:	f7fe fad6 	bl	800e5d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	685a      	ldr	r2, [r3, #4]
 8010030:	4b07      	ldr	r3, [pc, #28]	; (8010050 <vPortFree+0xb0>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4413      	add	r3, r2
 8010036:	4a06      	ldr	r2, [pc, #24]	; (8010050 <vPortFree+0xb0>)
 8010038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801003a:	6938      	ldr	r0, [r7, #16]
 801003c:	f000 f86c 	bl	8010118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010040:	f7fe fad8 	bl	800e5f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010044:	bf00      	nop
 8010046:	3718      	adds	r7, #24
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	20002d8c 	.word	0x20002d8c
 8010050:	20002d84 	.word	0x20002d84

08010054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801005a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801005e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010060:	4b27      	ldr	r3, [pc, #156]	; (8010100 <prvHeapInit+0xac>)
 8010062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f003 0307 	and.w	r3, r3, #7
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00c      	beq.n	8010088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	3307      	adds	r3, #7
 8010072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f023 0307 	bic.w	r3, r3, #7
 801007a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	4a1f      	ldr	r2, [pc, #124]	; (8010100 <prvHeapInit+0xac>)
 8010084:	4413      	add	r3, r2
 8010086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801008c:	4a1d      	ldr	r2, [pc, #116]	; (8010104 <prvHeapInit+0xb0>)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010092:	4b1c      	ldr	r3, [pc, #112]	; (8010104 <prvHeapInit+0xb0>)
 8010094:	2200      	movs	r2, #0
 8010096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	68ba      	ldr	r2, [r7, #8]
 801009c:	4413      	add	r3, r2
 801009e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80100a0:	2208      	movs	r2, #8
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	1a9b      	subs	r3, r3, r2
 80100a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f023 0307 	bic.w	r3, r3, #7
 80100ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	4a15      	ldr	r2, [pc, #84]	; (8010108 <prvHeapInit+0xb4>)
 80100b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80100b6:	4b14      	ldr	r3, [pc, #80]	; (8010108 <prvHeapInit+0xb4>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2200      	movs	r2, #0
 80100bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80100be:	4b12      	ldr	r3, [pc, #72]	; (8010108 <prvHeapInit+0xb4>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2200      	movs	r2, #0
 80100c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	68fa      	ldr	r2, [r7, #12]
 80100ce:	1ad2      	subs	r2, r2, r3
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80100d4:	4b0c      	ldr	r3, [pc, #48]	; (8010108 <prvHeapInit+0xb4>)
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	4a0a      	ldr	r2, [pc, #40]	; (801010c <prvHeapInit+0xb8>)
 80100e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	4a09      	ldr	r2, [pc, #36]	; (8010110 <prvHeapInit+0xbc>)
 80100ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80100ec:	4b09      	ldr	r3, [pc, #36]	; (8010114 <prvHeapInit+0xc0>)
 80100ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80100f2:	601a      	str	r2, [r3, #0]
}
 80100f4:	bf00      	nop
 80100f6:	3714      	adds	r7, #20
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr
 8010100:	20002978 	.word	0x20002978
 8010104:	20002d78 	.word	0x20002d78
 8010108:	20002d80 	.word	0x20002d80
 801010c:	20002d88 	.word	0x20002d88
 8010110:	20002d84 	.word	0x20002d84
 8010114:	20002d8c 	.word	0x20002d8c

08010118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010118:	b480      	push	{r7}
 801011a:	b085      	sub	sp, #20
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010120:	4b28      	ldr	r3, [pc, #160]	; (80101c4 <prvInsertBlockIntoFreeList+0xac>)
 8010122:	60fb      	str	r3, [r7, #12]
 8010124:	e002      	b.n	801012c <prvInsertBlockIntoFreeList+0x14>
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	60fb      	str	r3, [r7, #12]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	429a      	cmp	r2, r3
 8010134:	d8f7      	bhi.n	8010126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	68ba      	ldr	r2, [r7, #8]
 8010140:	4413      	add	r3, r2
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	429a      	cmp	r2, r3
 8010146:	d108      	bne.n	801015a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	685a      	ldr	r2, [r3, #4]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	441a      	add	r2, r3
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	68ba      	ldr	r2, [r7, #8]
 8010164:	441a      	add	r2, r3
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	429a      	cmp	r2, r3
 801016c:	d118      	bne.n	80101a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	4b15      	ldr	r3, [pc, #84]	; (80101c8 <prvInsertBlockIntoFreeList+0xb0>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	429a      	cmp	r2, r3
 8010178:	d00d      	beq.n	8010196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	685a      	ldr	r2, [r3, #4]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	441a      	add	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	601a      	str	r2, [r3, #0]
 8010194:	e008      	b.n	80101a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010196:	4b0c      	ldr	r3, [pc, #48]	; (80101c8 <prvInsertBlockIntoFreeList+0xb0>)
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	601a      	str	r2, [r3, #0]
 801019e:	e003      	b.n	80101a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681a      	ldr	r2, [r3, #0]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d002      	beq.n	80101b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80101b6:	bf00      	nop
 80101b8:	3714      	adds	r7, #20
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop
 80101c4:	20002d78 	.word	0x20002d78
 80101c8:	20002d80 	.word	0x20002d80

080101cc <swapfunc>:
 80101cc:	2b02      	cmp	r3, #2
 80101ce:	b510      	push	{r4, lr}
 80101d0:	d00a      	beq.n	80101e8 <swapfunc+0x1c>
 80101d2:	0892      	lsrs	r2, r2, #2
 80101d4:	3a01      	subs	r2, #1
 80101d6:	6803      	ldr	r3, [r0, #0]
 80101d8:	680c      	ldr	r4, [r1, #0]
 80101da:	f840 4b04 	str.w	r4, [r0], #4
 80101de:	2a00      	cmp	r2, #0
 80101e0:	f841 3b04 	str.w	r3, [r1], #4
 80101e4:	dcf6      	bgt.n	80101d4 <swapfunc+0x8>
 80101e6:	bd10      	pop	{r4, pc}
 80101e8:	4402      	add	r2, r0
 80101ea:	780c      	ldrb	r4, [r1, #0]
 80101ec:	7803      	ldrb	r3, [r0, #0]
 80101ee:	f800 4b01 	strb.w	r4, [r0], #1
 80101f2:	f801 3b01 	strb.w	r3, [r1], #1
 80101f6:	1a13      	subs	r3, r2, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	dcf6      	bgt.n	80101ea <swapfunc+0x1e>
 80101fc:	e7f3      	b.n	80101e6 <swapfunc+0x1a>

080101fe <med3.constprop.0>:
 80101fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010200:	460c      	mov	r4, r1
 8010202:	4615      	mov	r5, r2
 8010204:	4607      	mov	r7, r0
 8010206:	461e      	mov	r6, r3
 8010208:	4798      	blx	r3
 801020a:	2800      	cmp	r0, #0
 801020c:	4629      	mov	r1, r5
 801020e:	4620      	mov	r0, r4
 8010210:	da0a      	bge.n	8010228 <med3.constprop.0+0x2a>
 8010212:	47b0      	blx	r6
 8010214:	2800      	cmp	r0, #0
 8010216:	db05      	blt.n	8010224 <med3.constprop.0+0x26>
 8010218:	4629      	mov	r1, r5
 801021a:	4638      	mov	r0, r7
 801021c:	47b0      	blx	r6
 801021e:	2800      	cmp	r0, #0
 8010220:	db0a      	blt.n	8010238 <med3.constprop.0+0x3a>
 8010222:	463c      	mov	r4, r7
 8010224:	4620      	mov	r0, r4
 8010226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010228:	47b0      	blx	r6
 801022a:	2800      	cmp	r0, #0
 801022c:	dcfa      	bgt.n	8010224 <med3.constprop.0+0x26>
 801022e:	4629      	mov	r1, r5
 8010230:	4638      	mov	r0, r7
 8010232:	47b0      	blx	r6
 8010234:	2800      	cmp	r0, #0
 8010236:	dbf4      	blt.n	8010222 <med3.constprop.0+0x24>
 8010238:	462c      	mov	r4, r5
 801023a:	e7f3      	b.n	8010224 <med3.constprop.0+0x26>

0801023c <qsort>:
 801023c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010240:	469a      	mov	sl, r3
 8010242:	ea40 0302 	orr.w	r3, r0, r2
 8010246:	079b      	lsls	r3, r3, #30
 8010248:	b097      	sub	sp, #92	; 0x5c
 801024a:	4606      	mov	r6, r0
 801024c:	4614      	mov	r4, r2
 801024e:	d11a      	bne.n	8010286 <qsort+0x4a>
 8010250:	f1b2 0804 	subs.w	r8, r2, #4
 8010254:	bf18      	it	ne
 8010256:	f04f 0801 	movne.w	r8, #1
 801025a:	2300      	movs	r3, #0
 801025c:	9302      	str	r3, [sp, #8]
 801025e:	1933      	adds	r3, r6, r4
 8010260:	fb04 f701 	mul.w	r7, r4, r1
 8010264:	9301      	str	r3, [sp, #4]
 8010266:	2906      	cmp	r1, #6
 8010268:	eb06 0307 	add.w	r3, r6, r7
 801026c:	9303      	str	r3, [sp, #12]
 801026e:	d82a      	bhi.n	80102c6 <qsort+0x8a>
 8010270:	9b01      	ldr	r3, [sp, #4]
 8010272:	9a03      	ldr	r2, [sp, #12]
 8010274:	4293      	cmp	r3, r2
 8010276:	d310      	bcc.n	801029a <qsort+0x5e>
 8010278:	9b02      	ldr	r3, [sp, #8]
 801027a:	2b00      	cmp	r3, #0
 801027c:	f040 811e 	bne.w	80104bc <qsort+0x280>
 8010280:	b017      	add	sp, #92	; 0x5c
 8010282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010286:	f04f 0802 	mov.w	r8, #2
 801028a:	e7e6      	b.n	801025a <qsort+0x1e>
 801028c:	4643      	mov	r3, r8
 801028e:	4622      	mov	r2, r4
 8010290:	4639      	mov	r1, r7
 8010292:	4628      	mov	r0, r5
 8010294:	f7ff ff9a 	bl	80101cc <swapfunc>
 8010298:	e00e      	b.n	80102b8 <qsort+0x7c>
 801029a:	9d01      	ldr	r5, [sp, #4]
 801029c:	e00d      	b.n	80102ba <qsort+0x7e>
 801029e:	1b2f      	subs	r7, r5, r4
 80102a0:	4629      	mov	r1, r5
 80102a2:	4638      	mov	r0, r7
 80102a4:	47d0      	blx	sl
 80102a6:	2800      	cmp	r0, #0
 80102a8:	dd09      	ble.n	80102be <qsort+0x82>
 80102aa:	f1b8 0f00 	cmp.w	r8, #0
 80102ae:	d1ed      	bne.n	801028c <qsort+0x50>
 80102b0:	682b      	ldr	r3, [r5, #0]
 80102b2:	683a      	ldr	r2, [r7, #0]
 80102b4:	602a      	str	r2, [r5, #0]
 80102b6:	603b      	str	r3, [r7, #0]
 80102b8:	463d      	mov	r5, r7
 80102ba:	42ae      	cmp	r6, r5
 80102bc:	d3ef      	bcc.n	801029e <qsort+0x62>
 80102be:	9b01      	ldr	r3, [sp, #4]
 80102c0:	4423      	add	r3, r4
 80102c2:	9301      	str	r3, [sp, #4]
 80102c4:	e7d4      	b.n	8010270 <qsort+0x34>
 80102c6:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80102ca:	1b3f      	subs	r7, r7, r4
 80102cc:	2907      	cmp	r1, #7
 80102ce:	fb04 6909 	mla	r9, r4, r9, r6
 80102d2:	4437      	add	r7, r6
 80102d4:	d021      	beq.n	801031a <qsort+0xde>
 80102d6:	2928      	cmp	r1, #40	; 0x28
 80102d8:	d944      	bls.n	8010364 <qsort+0x128>
 80102da:	08cd      	lsrs	r5, r1, #3
 80102dc:	4365      	muls	r5, r4
 80102de:	4653      	mov	r3, sl
 80102e0:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80102e4:	1971      	adds	r1, r6, r5
 80102e6:	4630      	mov	r0, r6
 80102e8:	f7ff ff89 	bl	80101fe <med3.constprop.0>
 80102ec:	4649      	mov	r1, r9
 80102ee:	eb09 0205 	add.w	r2, r9, r5
 80102f2:	4653      	mov	r3, sl
 80102f4:	4683      	mov	fp, r0
 80102f6:	1b48      	subs	r0, r1, r5
 80102f8:	f7ff ff81 	bl	80101fe <med3.constprop.0>
 80102fc:	463a      	mov	r2, r7
 80102fe:	4681      	mov	r9, r0
 8010300:	4653      	mov	r3, sl
 8010302:	1b79      	subs	r1, r7, r5
 8010304:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8010308:	f7ff ff79 	bl	80101fe <med3.constprop.0>
 801030c:	4602      	mov	r2, r0
 801030e:	4649      	mov	r1, r9
 8010310:	4653      	mov	r3, sl
 8010312:	4658      	mov	r0, fp
 8010314:	f7ff ff73 	bl	80101fe <med3.constprop.0>
 8010318:	4681      	mov	r9, r0
 801031a:	f1b8 0f00 	cmp.w	r8, #0
 801031e:	d124      	bne.n	801036a <qsort+0x12e>
 8010320:	6833      	ldr	r3, [r6, #0]
 8010322:	f8d9 2000 	ldr.w	r2, [r9]
 8010326:	6032      	str	r2, [r6, #0]
 8010328:	f8c9 3000 	str.w	r3, [r9]
 801032c:	eb06 0b04 	add.w	fp, r6, r4
 8010330:	46b9      	mov	r9, r7
 8010332:	465d      	mov	r5, fp
 8010334:	2300      	movs	r3, #0
 8010336:	45bb      	cmp	fp, r7
 8010338:	d835      	bhi.n	80103a6 <qsort+0x16a>
 801033a:	4631      	mov	r1, r6
 801033c:	4658      	mov	r0, fp
 801033e:	9304      	str	r3, [sp, #16]
 8010340:	47d0      	blx	sl
 8010342:	2800      	cmp	r0, #0
 8010344:	9b04      	ldr	r3, [sp, #16]
 8010346:	dc3e      	bgt.n	80103c6 <qsort+0x18a>
 8010348:	d10a      	bne.n	8010360 <qsort+0x124>
 801034a:	f1b8 0f00 	cmp.w	r8, #0
 801034e:	d113      	bne.n	8010378 <qsort+0x13c>
 8010350:	682b      	ldr	r3, [r5, #0]
 8010352:	f8db 2000 	ldr.w	r2, [fp]
 8010356:	602a      	str	r2, [r5, #0]
 8010358:	f8cb 3000 	str.w	r3, [fp]
 801035c:	4425      	add	r5, r4
 801035e:	2301      	movs	r3, #1
 8010360:	44a3      	add	fp, r4
 8010362:	e7e8      	b.n	8010336 <qsort+0xfa>
 8010364:	463a      	mov	r2, r7
 8010366:	46b3      	mov	fp, r6
 8010368:	e7d1      	b.n	801030e <qsort+0xd2>
 801036a:	4643      	mov	r3, r8
 801036c:	4622      	mov	r2, r4
 801036e:	4649      	mov	r1, r9
 8010370:	4630      	mov	r0, r6
 8010372:	f7ff ff2b 	bl	80101cc <swapfunc>
 8010376:	e7d9      	b.n	801032c <qsort+0xf0>
 8010378:	4643      	mov	r3, r8
 801037a:	4622      	mov	r2, r4
 801037c:	4659      	mov	r1, fp
 801037e:	4628      	mov	r0, r5
 8010380:	f7ff ff24 	bl	80101cc <swapfunc>
 8010384:	e7ea      	b.n	801035c <qsort+0x120>
 8010386:	d10b      	bne.n	80103a0 <qsort+0x164>
 8010388:	f1b8 0f00 	cmp.w	r8, #0
 801038c:	d114      	bne.n	80103b8 <qsort+0x17c>
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	f8d9 2000 	ldr.w	r2, [r9]
 8010394:	603a      	str	r2, [r7, #0]
 8010396:	f8c9 3000 	str.w	r3, [r9]
 801039a:	eba9 0904 	sub.w	r9, r9, r4
 801039e:	2301      	movs	r3, #1
 80103a0:	9f04      	ldr	r7, [sp, #16]
 80103a2:	45bb      	cmp	fp, r7
 80103a4:	d90f      	bls.n	80103c6 <qsort+0x18a>
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d143      	bne.n	8010432 <qsort+0x1f6>
 80103aa:	9b01      	ldr	r3, [sp, #4]
 80103ac:	9a03      	ldr	r2, [sp, #12]
 80103ae:	4293      	cmp	r3, r2
 80103b0:	f4bf af62 	bcs.w	8010278 <qsort+0x3c>
 80103b4:	9d01      	ldr	r5, [sp, #4]
 80103b6:	e036      	b.n	8010426 <qsort+0x1ea>
 80103b8:	4643      	mov	r3, r8
 80103ba:	4622      	mov	r2, r4
 80103bc:	4649      	mov	r1, r9
 80103be:	4638      	mov	r0, r7
 80103c0:	f7ff ff04 	bl	80101cc <swapfunc>
 80103c4:	e7e9      	b.n	801039a <qsort+0x15e>
 80103c6:	4631      	mov	r1, r6
 80103c8:	4638      	mov	r0, r7
 80103ca:	9305      	str	r3, [sp, #20]
 80103cc:	47d0      	blx	sl
 80103ce:	1b3b      	subs	r3, r7, r4
 80103d0:	2800      	cmp	r0, #0
 80103d2:	9304      	str	r3, [sp, #16]
 80103d4:	9b05      	ldr	r3, [sp, #20]
 80103d6:	dad6      	bge.n	8010386 <qsort+0x14a>
 80103d8:	f1b8 0f00 	cmp.w	r8, #0
 80103dc:	d006      	beq.n	80103ec <qsort+0x1b0>
 80103de:	4643      	mov	r3, r8
 80103e0:	4622      	mov	r2, r4
 80103e2:	4639      	mov	r1, r7
 80103e4:	4658      	mov	r0, fp
 80103e6:	f7ff fef1 	bl	80101cc <swapfunc>
 80103ea:	e005      	b.n	80103f8 <qsort+0x1bc>
 80103ec:	f8db 3000 	ldr.w	r3, [fp]
 80103f0:	683a      	ldr	r2, [r7, #0]
 80103f2:	f8cb 2000 	str.w	r2, [fp]
 80103f6:	603b      	str	r3, [r7, #0]
 80103f8:	9f04      	ldr	r7, [sp, #16]
 80103fa:	e7b0      	b.n	801035e <qsort+0x122>
 80103fc:	4643      	mov	r3, r8
 80103fe:	4622      	mov	r2, r4
 8010400:	4639      	mov	r1, r7
 8010402:	4628      	mov	r0, r5
 8010404:	f7ff fee2 	bl	80101cc <swapfunc>
 8010408:	e00c      	b.n	8010424 <qsort+0x1e8>
 801040a:	1b2f      	subs	r7, r5, r4
 801040c:	4629      	mov	r1, r5
 801040e:	4638      	mov	r0, r7
 8010410:	47d0      	blx	sl
 8010412:	2800      	cmp	r0, #0
 8010414:	dd09      	ble.n	801042a <qsort+0x1ee>
 8010416:	f1b8 0f00 	cmp.w	r8, #0
 801041a:	d1ef      	bne.n	80103fc <qsort+0x1c0>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	683a      	ldr	r2, [r7, #0]
 8010420:	602a      	str	r2, [r5, #0]
 8010422:	603b      	str	r3, [r7, #0]
 8010424:	463d      	mov	r5, r7
 8010426:	42ae      	cmp	r6, r5
 8010428:	d3ef      	bcc.n	801040a <qsort+0x1ce>
 801042a:	9b01      	ldr	r3, [sp, #4]
 801042c:	4423      	add	r3, r4
 801042e:	9301      	str	r3, [sp, #4]
 8010430:	e7bb      	b.n	80103aa <qsort+0x16e>
 8010432:	ebab 0305 	sub.w	r3, fp, r5
 8010436:	1baa      	subs	r2, r5, r6
 8010438:	429a      	cmp	r2, r3
 801043a:	bfa8      	it	ge
 801043c:	461a      	movge	r2, r3
 801043e:	9301      	str	r3, [sp, #4]
 8010440:	b12a      	cbz	r2, 801044e <qsort+0x212>
 8010442:	4643      	mov	r3, r8
 8010444:	ebab 0102 	sub.w	r1, fp, r2
 8010448:	4630      	mov	r0, r6
 801044a:	f7ff febf 	bl	80101cc <swapfunc>
 801044e:	9b03      	ldr	r3, [sp, #12]
 8010450:	eba3 0209 	sub.w	r2, r3, r9
 8010454:	eba9 0707 	sub.w	r7, r9, r7
 8010458:	1b12      	subs	r2, r2, r4
 801045a:	42ba      	cmp	r2, r7
 801045c:	bf28      	it	cs
 801045e:	463a      	movcs	r2, r7
 8010460:	b12a      	cbz	r2, 801046e <qsort+0x232>
 8010462:	9903      	ldr	r1, [sp, #12]
 8010464:	4643      	mov	r3, r8
 8010466:	1a89      	subs	r1, r1, r2
 8010468:	4658      	mov	r0, fp
 801046a:	f7ff feaf 	bl	80101cc <swapfunc>
 801046e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010472:	9b03      	ldr	r3, [sp, #12]
 8010474:	454f      	cmp	r7, r9
 8010476:	eba3 0007 	sub.w	r0, r3, r7
 801047a:	d904      	bls.n	8010486 <qsort+0x24a>
 801047c:	4633      	mov	r3, r6
 801047e:	46b9      	mov	r9, r7
 8010480:	9f01      	ldr	r7, [sp, #4]
 8010482:	4606      	mov	r6, r0
 8010484:	4618      	mov	r0, r3
 8010486:	42a7      	cmp	r7, r4
 8010488:	d921      	bls.n	80104ce <qsort+0x292>
 801048a:	fbb7 f1f4 	udiv	r1, r7, r4
 801048e:	9b02      	ldr	r3, [sp, #8]
 8010490:	2b07      	cmp	r3, #7
 8010492:	d80d      	bhi.n	80104b0 <qsort+0x274>
 8010494:	aa16      	add	r2, sp, #88	; 0x58
 8010496:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801049a:	fbb9 f2f4 	udiv	r2, r9, r4
 801049e:	f843 6c40 	str.w	r6, [r3, #-64]
 80104a2:	f843 2c3c 	str.w	r2, [r3, #-60]
 80104a6:	9b02      	ldr	r3, [sp, #8]
 80104a8:	3301      	adds	r3, #1
 80104aa:	9302      	str	r3, [sp, #8]
 80104ac:	4606      	mov	r6, r0
 80104ae:	e6d6      	b.n	801025e <qsort+0x22>
 80104b0:	4653      	mov	r3, sl
 80104b2:	4622      	mov	r2, r4
 80104b4:	f7ff fec2 	bl	801023c <qsort>
 80104b8:	45a1      	cmp	r9, r4
 80104ba:	d80b      	bhi.n	80104d4 <qsort+0x298>
 80104bc:	9b02      	ldr	r3, [sp, #8]
 80104be:	aa16      	add	r2, sp, #88	; 0x58
 80104c0:	3b01      	subs	r3, #1
 80104c2:	9302      	str	r3, [sp, #8]
 80104c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80104c8:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 80104cc:	e7ee      	b.n	80104ac <qsort+0x270>
 80104ce:	45a1      	cmp	r9, r4
 80104d0:	f67f aed2 	bls.w	8010278 <qsort+0x3c>
 80104d4:	fbb9 f1f4 	udiv	r1, r9, r4
 80104d8:	4630      	mov	r0, r6
 80104da:	e7e7      	b.n	80104ac <qsort+0x270>

080104dc <memset>:
 80104dc:	4402      	add	r2, r0
 80104de:	4603      	mov	r3, r0
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d100      	bne.n	80104e6 <memset+0xa>
 80104e4:	4770      	bx	lr
 80104e6:	f803 1b01 	strb.w	r1, [r3], #1
 80104ea:	e7f9      	b.n	80104e0 <memset+0x4>

080104ec <_reclaim_reent>:
 80104ec:	4b29      	ldr	r3, [pc, #164]	; (8010594 <_reclaim_reent+0xa8>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4283      	cmp	r3, r0
 80104f2:	b570      	push	{r4, r5, r6, lr}
 80104f4:	4604      	mov	r4, r0
 80104f6:	d04b      	beq.n	8010590 <_reclaim_reent+0xa4>
 80104f8:	69c3      	ldr	r3, [r0, #28]
 80104fa:	b143      	cbz	r3, 801050e <_reclaim_reent+0x22>
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d144      	bne.n	801058c <_reclaim_reent+0xa0>
 8010502:	69e3      	ldr	r3, [r4, #28]
 8010504:	6819      	ldr	r1, [r3, #0]
 8010506:	b111      	cbz	r1, 801050e <_reclaim_reent+0x22>
 8010508:	4620      	mov	r0, r4
 801050a:	f000 f87f 	bl	801060c <_free_r>
 801050e:	6961      	ldr	r1, [r4, #20]
 8010510:	b111      	cbz	r1, 8010518 <_reclaim_reent+0x2c>
 8010512:	4620      	mov	r0, r4
 8010514:	f000 f87a 	bl	801060c <_free_r>
 8010518:	69e1      	ldr	r1, [r4, #28]
 801051a:	b111      	cbz	r1, 8010522 <_reclaim_reent+0x36>
 801051c:	4620      	mov	r0, r4
 801051e:	f000 f875 	bl	801060c <_free_r>
 8010522:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010524:	b111      	cbz	r1, 801052c <_reclaim_reent+0x40>
 8010526:	4620      	mov	r0, r4
 8010528:	f000 f870 	bl	801060c <_free_r>
 801052c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801052e:	b111      	cbz	r1, 8010536 <_reclaim_reent+0x4a>
 8010530:	4620      	mov	r0, r4
 8010532:	f000 f86b 	bl	801060c <_free_r>
 8010536:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010538:	b111      	cbz	r1, 8010540 <_reclaim_reent+0x54>
 801053a:	4620      	mov	r0, r4
 801053c:	f000 f866 	bl	801060c <_free_r>
 8010540:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010542:	b111      	cbz	r1, 801054a <_reclaim_reent+0x5e>
 8010544:	4620      	mov	r0, r4
 8010546:	f000 f861 	bl	801060c <_free_r>
 801054a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801054c:	b111      	cbz	r1, 8010554 <_reclaim_reent+0x68>
 801054e:	4620      	mov	r0, r4
 8010550:	f000 f85c 	bl	801060c <_free_r>
 8010554:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010556:	b111      	cbz	r1, 801055e <_reclaim_reent+0x72>
 8010558:	4620      	mov	r0, r4
 801055a:	f000 f857 	bl	801060c <_free_r>
 801055e:	6a23      	ldr	r3, [r4, #32]
 8010560:	b1b3      	cbz	r3, 8010590 <_reclaim_reent+0xa4>
 8010562:	4620      	mov	r0, r4
 8010564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010568:	4718      	bx	r3
 801056a:	5949      	ldr	r1, [r1, r5]
 801056c:	b941      	cbnz	r1, 8010580 <_reclaim_reent+0x94>
 801056e:	3504      	adds	r5, #4
 8010570:	69e3      	ldr	r3, [r4, #28]
 8010572:	2d80      	cmp	r5, #128	; 0x80
 8010574:	68d9      	ldr	r1, [r3, #12]
 8010576:	d1f8      	bne.n	801056a <_reclaim_reent+0x7e>
 8010578:	4620      	mov	r0, r4
 801057a:	f000 f847 	bl	801060c <_free_r>
 801057e:	e7c0      	b.n	8010502 <_reclaim_reent+0x16>
 8010580:	680e      	ldr	r6, [r1, #0]
 8010582:	4620      	mov	r0, r4
 8010584:	f000 f842 	bl	801060c <_free_r>
 8010588:	4631      	mov	r1, r6
 801058a:	e7ef      	b.n	801056c <_reclaim_reent+0x80>
 801058c:	2500      	movs	r5, #0
 801058e:	e7ef      	b.n	8010570 <_reclaim_reent+0x84>
 8010590:	bd70      	pop	{r4, r5, r6, pc}
 8010592:	bf00      	nop
 8010594:	2000010c 	.word	0x2000010c

08010598 <__errno>:
 8010598:	4b01      	ldr	r3, [pc, #4]	; (80105a0 <__errno+0x8>)
 801059a:	6818      	ldr	r0, [r3, #0]
 801059c:	4770      	bx	lr
 801059e:	bf00      	nop
 80105a0:	2000010c 	.word	0x2000010c

080105a4 <__libc_init_array>:
 80105a4:	b570      	push	{r4, r5, r6, lr}
 80105a6:	4d0d      	ldr	r5, [pc, #52]	; (80105dc <__libc_init_array+0x38>)
 80105a8:	4c0d      	ldr	r4, [pc, #52]	; (80105e0 <__libc_init_array+0x3c>)
 80105aa:	1b64      	subs	r4, r4, r5
 80105ac:	10a4      	asrs	r4, r4, #2
 80105ae:	2600      	movs	r6, #0
 80105b0:	42a6      	cmp	r6, r4
 80105b2:	d109      	bne.n	80105c8 <__libc_init_array+0x24>
 80105b4:	4d0b      	ldr	r5, [pc, #44]	; (80105e4 <__libc_init_array+0x40>)
 80105b6:	4c0c      	ldr	r4, [pc, #48]	; (80105e8 <__libc_init_array+0x44>)
 80105b8:	f000 fa88 	bl	8010acc <_init>
 80105bc:	1b64      	subs	r4, r4, r5
 80105be:	10a4      	asrs	r4, r4, #2
 80105c0:	2600      	movs	r6, #0
 80105c2:	42a6      	cmp	r6, r4
 80105c4:	d105      	bne.n	80105d2 <__libc_init_array+0x2e>
 80105c6:	bd70      	pop	{r4, r5, r6, pc}
 80105c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80105cc:	4798      	blx	r3
 80105ce:	3601      	adds	r6, #1
 80105d0:	e7ee      	b.n	80105b0 <__libc_init_array+0xc>
 80105d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80105d6:	4798      	blx	r3
 80105d8:	3601      	adds	r6, #1
 80105da:	e7f2      	b.n	80105c2 <__libc_init_array+0x1e>
 80105dc:	08010ca0 	.word	0x08010ca0
 80105e0:	08010ca0 	.word	0x08010ca0
 80105e4:	08010ca0 	.word	0x08010ca0
 80105e8:	08010ca4 	.word	0x08010ca4

080105ec <__retarget_lock_acquire_recursive>:
 80105ec:	4770      	bx	lr

080105ee <__retarget_lock_release_recursive>:
 80105ee:	4770      	bx	lr

080105f0 <memcpy>:
 80105f0:	440a      	add	r2, r1
 80105f2:	4291      	cmp	r1, r2
 80105f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80105f8:	d100      	bne.n	80105fc <memcpy+0xc>
 80105fa:	4770      	bx	lr
 80105fc:	b510      	push	{r4, lr}
 80105fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010606:	4291      	cmp	r1, r2
 8010608:	d1f9      	bne.n	80105fe <memcpy+0xe>
 801060a:	bd10      	pop	{r4, pc}

0801060c <_free_r>:
 801060c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801060e:	2900      	cmp	r1, #0
 8010610:	d044      	beq.n	801069c <_free_r+0x90>
 8010612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010616:	9001      	str	r0, [sp, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	f1a1 0404 	sub.w	r4, r1, #4
 801061e:	bfb8      	it	lt
 8010620:	18e4      	addlt	r4, r4, r3
 8010622:	f000 f83f 	bl	80106a4 <__malloc_lock>
 8010626:	4a1e      	ldr	r2, [pc, #120]	; (80106a0 <_free_r+0x94>)
 8010628:	9801      	ldr	r0, [sp, #4]
 801062a:	6813      	ldr	r3, [r2, #0]
 801062c:	b933      	cbnz	r3, 801063c <_free_r+0x30>
 801062e:	6063      	str	r3, [r4, #4]
 8010630:	6014      	str	r4, [r2, #0]
 8010632:	b003      	add	sp, #12
 8010634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010638:	f000 b83a 	b.w	80106b0 <__malloc_unlock>
 801063c:	42a3      	cmp	r3, r4
 801063e:	d908      	bls.n	8010652 <_free_r+0x46>
 8010640:	6825      	ldr	r5, [r4, #0]
 8010642:	1961      	adds	r1, r4, r5
 8010644:	428b      	cmp	r3, r1
 8010646:	bf01      	itttt	eq
 8010648:	6819      	ldreq	r1, [r3, #0]
 801064a:	685b      	ldreq	r3, [r3, #4]
 801064c:	1949      	addeq	r1, r1, r5
 801064e:	6021      	streq	r1, [r4, #0]
 8010650:	e7ed      	b.n	801062e <_free_r+0x22>
 8010652:	461a      	mov	r2, r3
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	b10b      	cbz	r3, 801065c <_free_r+0x50>
 8010658:	42a3      	cmp	r3, r4
 801065a:	d9fa      	bls.n	8010652 <_free_r+0x46>
 801065c:	6811      	ldr	r1, [r2, #0]
 801065e:	1855      	adds	r5, r2, r1
 8010660:	42a5      	cmp	r5, r4
 8010662:	d10b      	bne.n	801067c <_free_r+0x70>
 8010664:	6824      	ldr	r4, [r4, #0]
 8010666:	4421      	add	r1, r4
 8010668:	1854      	adds	r4, r2, r1
 801066a:	42a3      	cmp	r3, r4
 801066c:	6011      	str	r1, [r2, #0]
 801066e:	d1e0      	bne.n	8010632 <_free_r+0x26>
 8010670:	681c      	ldr	r4, [r3, #0]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	6053      	str	r3, [r2, #4]
 8010676:	440c      	add	r4, r1
 8010678:	6014      	str	r4, [r2, #0]
 801067a:	e7da      	b.n	8010632 <_free_r+0x26>
 801067c:	d902      	bls.n	8010684 <_free_r+0x78>
 801067e:	230c      	movs	r3, #12
 8010680:	6003      	str	r3, [r0, #0]
 8010682:	e7d6      	b.n	8010632 <_free_r+0x26>
 8010684:	6825      	ldr	r5, [r4, #0]
 8010686:	1961      	adds	r1, r4, r5
 8010688:	428b      	cmp	r3, r1
 801068a:	bf04      	itt	eq
 801068c:	6819      	ldreq	r1, [r3, #0]
 801068e:	685b      	ldreq	r3, [r3, #4]
 8010690:	6063      	str	r3, [r4, #4]
 8010692:	bf04      	itt	eq
 8010694:	1949      	addeq	r1, r1, r5
 8010696:	6021      	streq	r1, [r4, #0]
 8010698:	6054      	str	r4, [r2, #4]
 801069a:	e7ca      	b.n	8010632 <_free_r+0x26>
 801069c:	b003      	add	sp, #12
 801069e:	bd30      	pop	{r4, r5, pc}
 80106a0:	20002ecc 	.word	0x20002ecc

080106a4 <__malloc_lock>:
 80106a4:	4801      	ldr	r0, [pc, #4]	; (80106ac <__malloc_lock+0x8>)
 80106a6:	f7ff bfa1 	b.w	80105ec <__retarget_lock_acquire_recursive>
 80106aa:	bf00      	nop
 80106ac:	20002ec8 	.word	0x20002ec8

080106b0 <__malloc_unlock>:
 80106b0:	4801      	ldr	r0, [pc, #4]	; (80106b8 <__malloc_unlock+0x8>)
 80106b2:	f7ff bf9c 	b.w	80105ee <__retarget_lock_release_recursive>
 80106b6:	bf00      	nop
 80106b8:	20002ec8 	.word	0x20002ec8
 80106bc:	00000000 	.word	0x00000000

080106c0 <exp>:
 80106c0:	b538      	push	{r3, r4, r5, lr}
 80106c2:	ed2d 8b02 	vpush	{d8}
 80106c6:	ec55 4b10 	vmov	r4, r5, d0
 80106ca:	f000 f84d 	bl	8010768 <__ieee754_exp>
 80106ce:	eeb0 8a40 	vmov.f32	s16, s0
 80106d2:	eef0 8a60 	vmov.f32	s17, s1
 80106d6:	ec45 4b10 	vmov	d0, r4, r5
 80106da:	f000 f839 	bl	8010750 <finite>
 80106de:	b168      	cbz	r0, 80106fc <exp+0x3c>
 80106e0:	a317      	add	r3, pc, #92	; (adr r3, 8010740 <exp+0x80>)
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	4620      	mov	r0, r4
 80106e8:	4629      	mov	r1, r5
 80106ea:	f7f0 f9bd 	bl	8000a68 <__aeabi_dcmpgt>
 80106ee:	b160      	cbz	r0, 801070a <exp+0x4a>
 80106f0:	f7ff ff52 	bl	8010598 <__errno>
 80106f4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010730 <exp+0x70>
 80106f8:	2322      	movs	r3, #34	; 0x22
 80106fa:	6003      	str	r3, [r0, #0]
 80106fc:	eeb0 0a48 	vmov.f32	s0, s16
 8010700:	eef0 0a68 	vmov.f32	s1, s17
 8010704:	ecbd 8b02 	vpop	{d8}
 8010708:	bd38      	pop	{r3, r4, r5, pc}
 801070a:	a30f      	add	r3, pc, #60	; (adr r3, 8010748 <exp+0x88>)
 801070c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010710:	4620      	mov	r0, r4
 8010712:	4629      	mov	r1, r5
 8010714:	f7f0 f98a 	bl	8000a2c <__aeabi_dcmplt>
 8010718:	2800      	cmp	r0, #0
 801071a:	d0ef      	beq.n	80106fc <exp+0x3c>
 801071c:	f7ff ff3c 	bl	8010598 <__errno>
 8010720:	2322      	movs	r3, #34	; 0x22
 8010722:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010738 <exp+0x78>
 8010726:	6003      	str	r3, [r0, #0]
 8010728:	e7e8      	b.n	80106fc <exp+0x3c>
 801072a:	bf00      	nop
 801072c:	f3af 8000 	nop.w
 8010730:	00000000 	.word	0x00000000
 8010734:	7ff00000 	.word	0x7ff00000
	...
 8010740:	fefa39ef 	.word	0xfefa39ef
 8010744:	40862e42 	.word	0x40862e42
 8010748:	d52d3051 	.word	0xd52d3051
 801074c:	c0874910 	.word	0xc0874910

08010750 <finite>:
 8010750:	b082      	sub	sp, #8
 8010752:	ed8d 0b00 	vstr	d0, [sp]
 8010756:	9801      	ldr	r0, [sp, #4]
 8010758:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801075c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010760:	0fc0      	lsrs	r0, r0, #31
 8010762:	b002      	add	sp, #8
 8010764:	4770      	bx	lr
	...

08010768 <__ieee754_exp>:
 8010768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801076c:	ec55 4b10 	vmov	r4, r5, d0
 8010770:	49b5      	ldr	r1, [pc, #724]	; (8010a48 <__ieee754_exp+0x2e0>)
 8010772:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010776:	428a      	cmp	r2, r1
 8010778:	ed2d 8b04 	vpush	{d8-d9}
 801077c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010780:	d93b      	bls.n	80107fa <__ieee754_exp+0x92>
 8010782:	49b2      	ldr	r1, [pc, #712]	; (8010a4c <__ieee754_exp+0x2e4>)
 8010784:	428a      	cmp	r2, r1
 8010786:	d916      	bls.n	80107b6 <__ieee754_exp+0x4e>
 8010788:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801078c:	4323      	orrs	r3, r4
 801078e:	ee10 2a10 	vmov	r2, s0
 8010792:	d007      	beq.n	80107a4 <__ieee754_exp+0x3c>
 8010794:	462b      	mov	r3, r5
 8010796:	4620      	mov	r0, r4
 8010798:	4629      	mov	r1, r5
 801079a:	f7ef fd1f 	bl	80001dc <__adddf3>
 801079e:	4604      	mov	r4, r0
 80107a0:	460d      	mov	r5, r1
 80107a2:	e002      	b.n	80107aa <__ieee754_exp+0x42>
 80107a4:	b10e      	cbz	r6, 80107aa <__ieee754_exp+0x42>
 80107a6:	2400      	movs	r4, #0
 80107a8:	2500      	movs	r5, #0
 80107aa:	ecbd 8b04 	vpop	{d8-d9}
 80107ae:	ec45 4b10 	vmov	d0, r4, r5
 80107b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b6:	a38e      	add	r3, pc, #568	; (adr r3, 80109f0 <__ieee754_exp+0x288>)
 80107b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107bc:	ee10 0a10 	vmov	r0, s0
 80107c0:	4629      	mov	r1, r5
 80107c2:	f7f0 f951 	bl	8000a68 <__aeabi_dcmpgt>
 80107c6:	4607      	mov	r7, r0
 80107c8:	b130      	cbz	r0, 80107d8 <__ieee754_exp+0x70>
 80107ca:	ecbd 8b04 	vpop	{d8-d9}
 80107ce:	2000      	movs	r0, #0
 80107d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107d4:	f000 b971 	b.w	8010aba <__math_oflow>
 80107d8:	a387      	add	r3, pc, #540	; (adr r3, 80109f8 <__ieee754_exp+0x290>)
 80107da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107de:	4620      	mov	r0, r4
 80107e0:	4629      	mov	r1, r5
 80107e2:	f7f0 f923 	bl	8000a2c <__aeabi_dcmplt>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	f000 808b 	beq.w	8010902 <__ieee754_exp+0x19a>
 80107ec:	ecbd 8b04 	vpop	{d8-d9}
 80107f0:	4638      	mov	r0, r7
 80107f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107f6:	f000 b957 	b.w	8010aa8 <__math_uflow>
 80107fa:	4b95      	ldr	r3, [pc, #596]	; (8010a50 <__ieee754_exp+0x2e8>)
 80107fc:	429a      	cmp	r2, r3
 80107fe:	f240 80ac 	bls.w	801095a <__ieee754_exp+0x1f2>
 8010802:	4b94      	ldr	r3, [pc, #592]	; (8010a54 <__ieee754_exp+0x2ec>)
 8010804:	429a      	cmp	r2, r3
 8010806:	d87c      	bhi.n	8010902 <__ieee754_exp+0x19a>
 8010808:	4b93      	ldr	r3, [pc, #588]	; (8010a58 <__ieee754_exp+0x2f0>)
 801080a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	ee10 0a10 	vmov	r0, s0
 8010816:	4629      	mov	r1, r5
 8010818:	f7ef fcde 	bl	80001d8 <__aeabi_dsub>
 801081c:	4b8f      	ldr	r3, [pc, #572]	; (8010a5c <__ieee754_exp+0x2f4>)
 801081e:	00f7      	lsls	r7, r6, #3
 8010820:	443b      	add	r3, r7
 8010822:	ed93 7b00 	vldr	d7, [r3]
 8010826:	f1c6 0a01 	rsb	sl, r6, #1
 801082a:	4680      	mov	r8, r0
 801082c:	4689      	mov	r9, r1
 801082e:	ebaa 0a06 	sub.w	sl, sl, r6
 8010832:	eeb0 8a47 	vmov.f32	s16, s14
 8010836:	eef0 8a67 	vmov.f32	s17, s15
 801083a:	ec53 2b18 	vmov	r2, r3, d8
 801083e:	4640      	mov	r0, r8
 8010840:	4649      	mov	r1, r9
 8010842:	f7ef fcc9 	bl	80001d8 <__aeabi_dsub>
 8010846:	4604      	mov	r4, r0
 8010848:	460d      	mov	r5, r1
 801084a:	4622      	mov	r2, r4
 801084c:	462b      	mov	r3, r5
 801084e:	4620      	mov	r0, r4
 8010850:	4629      	mov	r1, r5
 8010852:	f7ef fe79 	bl	8000548 <__aeabi_dmul>
 8010856:	a36a      	add	r3, pc, #424	; (adr r3, 8010a00 <__ieee754_exp+0x298>)
 8010858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085c:	4606      	mov	r6, r0
 801085e:	460f      	mov	r7, r1
 8010860:	f7ef fe72 	bl	8000548 <__aeabi_dmul>
 8010864:	a368      	add	r3, pc, #416	; (adr r3, 8010a08 <__ieee754_exp+0x2a0>)
 8010866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086a:	f7ef fcb5 	bl	80001d8 <__aeabi_dsub>
 801086e:	4632      	mov	r2, r6
 8010870:	463b      	mov	r3, r7
 8010872:	f7ef fe69 	bl	8000548 <__aeabi_dmul>
 8010876:	a366      	add	r3, pc, #408	; (adr r3, 8010a10 <__ieee754_exp+0x2a8>)
 8010878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087c:	f7ef fcae 	bl	80001dc <__adddf3>
 8010880:	4632      	mov	r2, r6
 8010882:	463b      	mov	r3, r7
 8010884:	f7ef fe60 	bl	8000548 <__aeabi_dmul>
 8010888:	a363      	add	r3, pc, #396	; (adr r3, 8010a18 <__ieee754_exp+0x2b0>)
 801088a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088e:	f7ef fca3 	bl	80001d8 <__aeabi_dsub>
 8010892:	4632      	mov	r2, r6
 8010894:	463b      	mov	r3, r7
 8010896:	f7ef fe57 	bl	8000548 <__aeabi_dmul>
 801089a:	a361      	add	r3, pc, #388	; (adr r3, 8010a20 <__ieee754_exp+0x2b8>)
 801089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a0:	f7ef fc9c 	bl	80001dc <__adddf3>
 80108a4:	4632      	mov	r2, r6
 80108a6:	463b      	mov	r3, r7
 80108a8:	f7ef fe4e 	bl	8000548 <__aeabi_dmul>
 80108ac:	4602      	mov	r2, r0
 80108ae:	460b      	mov	r3, r1
 80108b0:	4620      	mov	r0, r4
 80108b2:	4629      	mov	r1, r5
 80108b4:	f7ef fc90 	bl	80001d8 <__aeabi_dsub>
 80108b8:	4602      	mov	r2, r0
 80108ba:	460b      	mov	r3, r1
 80108bc:	4606      	mov	r6, r0
 80108be:	460f      	mov	r7, r1
 80108c0:	4620      	mov	r0, r4
 80108c2:	4629      	mov	r1, r5
 80108c4:	f7ef fe40 	bl	8000548 <__aeabi_dmul>
 80108c8:	ec41 0b19 	vmov	d9, r0, r1
 80108cc:	f1ba 0f00 	cmp.w	sl, #0
 80108d0:	d15d      	bne.n	801098e <__ieee754_exp+0x226>
 80108d2:	2200      	movs	r2, #0
 80108d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80108d8:	4630      	mov	r0, r6
 80108da:	4639      	mov	r1, r7
 80108dc:	f7ef fc7c 	bl	80001d8 <__aeabi_dsub>
 80108e0:	4602      	mov	r2, r0
 80108e2:	460b      	mov	r3, r1
 80108e4:	ec51 0b19 	vmov	r0, r1, d9
 80108e8:	f7ef ff58 	bl	800079c <__aeabi_ddiv>
 80108ec:	4622      	mov	r2, r4
 80108ee:	462b      	mov	r3, r5
 80108f0:	f7ef fc72 	bl	80001d8 <__aeabi_dsub>
 80108f4:	4602      	mov	r2, r0
 80108f6:	460b      	mov	r3, r1
 80108f8:	2000      	movs	r0, #0
 80108fa:	4959      	ldr	r1, [pc, #356]	; (8010a60 <__ieee754_exp+0x2f8>)
 80108fc:	f7ef fc6c 	bl	80001d8 <__aeabi_dsub>
 8010900:	e74d      	b.n	801079e <__ieee754_exp+0x36>
 8010902:	4b58      	ldr	r3, [pc, #352]	; (8010a64 <__ieee754_exp+0x2fc>)
 8010904:	4620      	mov	r0, r4
 8010906:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801090a:	4629      	mov	r1, r5
 801090c:	a346      	add	r3, pc, #280	; (adr r3, 8010a28 <__ieee754_exp+0x2c0>)
 801090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010912:	f7ef fe19 	bl	8000548 <__aeabi_dmul>
 8010916:	e9d6 2300 	ldrd	r2, r3, [r6]
 801091a:	f7ef fc5f 	bl	80001dc <__adddf3>
 801091e:	f7f0 f8ad 	bl	8000a7c <__aeabi_d2iz>
 8010922:	4682      	mov	sl, r0
 8010924:	f7ef fda6 	bl	8000474 <__aeabi_i2d>
 8010928:	a341      	add	r3, pc, #260	; (adr r3, 8010a30 <__ieee754_exp+0x2c8>)
 801092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092e:	4606      	mov	r6, r0
 8010930:	460f      	mov	r7, r1
 8010932:	f7ef fe09 	bl	8000548 <__aeabi_dmul>
 8010936:	4602      	mov	r2, r0
 8010938:	460b      	mov	r3, r1
 801093a:	4620      	mov	r0, r4
 801093c:	4629      	mov	r1, r5
 801093e:	f7ef fc4b 	bl	80001d8 <__aeabi_dsub>
 8010942:	a33d      	add	r3, pc, #244	; (adr r3, 8010a38 <__ieee754_exp+0x2d0>)
 8010944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010948:	4680      	mov	r8, r0
 801094a:	4689      	mov	r9, r1
 801094c:	4630      	mov	r0, r6
 801094e:	4639      	mov	r1, r7
 8010950:	f7ef fdfa 	bl	8000548 <__aeabi_dmul>
 8010954:	ec41 0b18 	vmov	d8, r0, r1
 8010958:	e76f      	b.n	801083a <__ieee754_exp+0xd2>
 801095a:	4b43      	ldr	r3, [pc, #268]	; (8010a68 <__ieee754_exp+0x300>)
 801095c:	429a      	cmp	r2, r3
 801095e:	d811      	bhi.n	8010984 <__ieee754_exp+0x21c>
 8010960:	a337      	add	r3, pc, #220	; (adr r3, 8010a40 <__ieee754_exp+0x2d8>)
 8010962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010966:	ee10 0a10 	vmov	r0, s0
 801096a:	4629      	mov	r1, r5
 801096c:	f7ef fc36 	bl	80001dc <__adddf3>
 8010970:	4b3b      	ldr	r3, [pc, #236]	; (8010a60 <__ieee754_exp+0x2f8>)
 8010972:	2200      	movs	r2, #0
 8010974:	f7f0 f878 	bl	8000a68 <__aeabi_dcmpgt>
 8010978:	b138      	cbz	r0, 801098a <__ieee754_exp+0x222>
 801097a:	4b39      	ldr	r3, [pc, #228]	; (8010a60 <__ieee754_exp+0x2f8>)
 801097c:	2200      	movs	r2, #0
 801097e:	4620      	mov	r0, r4
 8010980:	4629      	mov	r1, r5
 8010982:	e70a      	b.n	801079a <__ieee754_exp+0x32>
 8010984:	f04f 0a00 	mov.w	sl, #0
 8010988:	e75f      	b.n	801084a <__ieee754_exp+0xe2>
 801098a:	4682      	mov	sl, r0
 801098c:	e75d      	b.n	801084a <__ieee754_exp+0xe2>
 801098e:	4632      	mov	r2, r6
 8010990:	463b      	mov	r3, r7
 8010992:	2000      	movs	r0, #0
 8010994:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010998:	f7ef fc1e 	bl	80001d8 <__aeabi_dsub>
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	ec51 0b19 	vmov	r0, r1, d9
 80109a4:	f7ef fefa 	bl	800079c <__aeabi_ddiv>
 80109a8:	4602      	mov	r2, r0
 80109aa:	460b      	mov	r3, r1
 80109ac:	ec51 0b18 	vmov	r0, r1, d8
 80109b0:	f7ef fc12 	bl	80001d8 <__aeabi_dsub>
 80109b4:	4642      	mov	r2, r8
 80109b6:	464b      	mov	r3, r9
 80109b8:	f7ef fc0e 	bl	80001d8 <__aeabi_dsub>
 80109bc:	4602      	mov	r2, r0
 80109be:	460b      	mov	r3, r1
 80109c0:	2000      	movs	r0, #0
 80109c2:	4927      	ldr	r1, [pc, #156]	; (8010a60 <__ieee754_exp+0x2f8>)
 80109c4:	f7ef fc08 	bl	80001d8 <__aeabi_dsub>
 80109c8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80109cc:	4592      	cmp	sl, r2
 80109ce:	db02      	blt.n	80109d6 <__ieee754_exp+0x26e>
 80109d0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80109d4:	e6e3      	b.n	801079e <__ieee754_exp+0x36>
 80109d6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80109da:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80109de:	2200      	movs	r2, #0
 80109e0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80109e4:	f7ef fdb0 	bl	8000548 <__aeabi_dmul>
 80109e8:	e6d9      	b.n	801079e <__ieee754_exp+0x36>
 80109ea:	bf00      	nop
 80109ec:	f3af 8000 	nop.w
 80109f0:	fefa39ef 	.word	0xfefa39ef
 80109f4:	40862e42 	.word	0x40862e42
 80109f8:	d52d3051 	.word	0xd52d3051
 80109fc:	c0874910 	.word	0xc0874910
 8010a00:	72bea4d0 	.word	0x72bea4d0
 8010a04:	3e663769 	.word	0x3e663769
 8010a08:	c5d26bf1 	.word	0xc5d26bf1
 8010a0c:	3ebbbd41 	.word	0x3ebbbd41
 8010a10:	af25de2c 	.word	0xaf25de2c
 8010a14:	3f11566a 	.word	0x3f11566a
 8010a18:	16bebd93 	.word	0x16bebd93
 8010a1c:	3f66c16c 	.word	0x3f66c16c
 8010a20:	5555553e 	.word	0x5555553e
 8010a24:	3fc55555 	.word	0x3fc55555
 8010a28:	652b82fe 	.word	0x652b82fe
 8010a2c:	3ff71547 	.word	0x3ff71547
 8010a30:	fee00000 	.word	0xfee00000
 8010a34:	3fe62e42 	.word	0x3fe62e42
 8010a38:	35793c76 	.word	0x35793c76
 8010a3c:	3dea39ef 	.word	0x3dea39ef
 8010a40:	8800759c 	.word	0x8800759c
 8010a44:	7e37e43c 	.word	0x7e37e43c
 8010a48:	40862e41 	.word	0x40862e41
 8010a4c:	7fefffff 	.word	0x7fefffff
 8010a50:	3fd62e42 	.word	0x3fd62e42
 8010a54:	3ff0a2b1 	.word	0x3ff0a2b1
 8010a58:	08010c78 	.word	0x08010c78
 8010a5c:	08010c88 	.word	0x08010c88
 8010a60:	3ff00000 	.word	0x3ff00000
 8010a64:	08010c68 	.word	0x08010c68
 8010a68:	3defffff 	.word	0x3defffff

08010a6c <with_errno>:
 8010a6c:	b570      	push	{r4, r5, r6, lr}
 8010a6e:	4604      	mov	r4, r0
 8010a70:	460d      	mov	r5, r1
 8010a72:	4616      	mov	r6, r2
 8010a74:	f7ff fd90 	bl	8010598 <__errno>
 8010a78:	4629      	mov	r1, r5
 8010a7a:	6006      	str	r6, [r0, #0]
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	bd70      	pop	{r4, r5, r6, pc}

08010a80 <xflow>:
 8010a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a82:	4614      	mov	r4, r2
 8010a84:	461d      	mov	r5, r3
 8010a86:	b108      	cbz	r0, 8010a8c <xflow+0xc>
 8010a88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010a8c:	e9cd 2300 	strd	r2, r3, [sp]
 8010a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a94:	4620      	mov	r0, r4
 8010a96:	4629      	mov	r1, r5
 8010a98:	f7ef fd56 	bl	8000548 <__aeabi_dmul>
 8010a9c:	2222      	movs	r2, #34	; 0x22
 8010a9e:	b003      	add	sp, #12
 8010aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010aa4:	f7ff bfe2 	b.w	8010a6c <with_errno>

08010aa8 <__math_uflow>:
 8010aa8:	b508      	push	{r3, lr}
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010ab0:	f7ff ffe6 	bl	8010a80 <xflow>
 8010ab4:	ec41 0b10 	vmov	d0, r0, r1
 8010ab8:	bd08      	pop	{r3, pc}

08010aba <__math_oflow>:
 8010aba:	b508      	push	{r3, lr}
 8010abc:	2200      	movs	r2, #0
 8010abe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010ac2:	f7ff ffdd 	bl	8010a80 <xflow>
 8010ac6:	ec41 0b10 	vmov	d0, r0, r1
 8010aca:	bd08      	pop	{r3, pc}

08010acc <_init>:
 8010acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ace:	bf00      	nop
 8010ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ad2:	bc08      	pop	{r3}
 8010ad4:	469e      	mov	lr, r3
 8010ad6:	4770      	bx	lr

08010ad8 <_fini>:
 8010ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ada:	bf00      	nop
 8010adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ade:	bc08      	pop	{r3}
 8010ae0:	469e      	mov	lr, r3
 8010ae2:	4770      	bx	lr
